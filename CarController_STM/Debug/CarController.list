
CarController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800e750  0800e750  0001e750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ead0  0800ead0  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800ead0  0800ead0  0001ead0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ead8  0800ead8  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ead8  0800ead8  0001ead8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eadc  0800eadc  0001eadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800eae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006604  20000354  0800ee34  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006958  0800ee34  00026958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029d54  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f6c  00000000  00000000  0004a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e70  00000000  00000000  0004f048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c70  00000000  00000000  00050eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000788f  00000000  00000000  00052b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b618  00000000  00000000  0005a3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f029  00000000  00000000  000759cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001149f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a68  00000000  00000000  00114a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e734 	.word	0x0800e734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	0800e734 	.word	0x0800e734

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <i2c1_pisiRegister>:
};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	230a      	movs	r3, #10
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	1d7b      	adds	r3, r7, #5
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <i2c1_pisiRegister+0x40>)
 8000ee8:	f001 fbb4 	bl	8002654 <HAL_I2C_Mem_Write>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20004cdc 	.word	0x20004cdc

08000efc <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	603a      	str	r2, [r7, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	71bb      	strb	r3, [r7, #6]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d906      	bls.n	8000f26 <i2c1_beriRegistre+0x2a>
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b19      	cmp	r3, #25
 8000f1c:	d103      	bne.n	8000f26 <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f24:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	b298      	uxth	r0, r3
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	797a      	ldrb	r2, [r7, #5]
 8000f3a:	9202      	str	r2, [sp, #8]
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	4602      	mov	r2, r0
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <i2c1_beriRegistre+0x58>)
 8000f48:	f001 fc7e 	bl	8002848 <HAL_I2C_Mem_Read>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20004cdc 	.word	0x20004cdc

08000f58 <initOrientation>:

void initOrientation() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 ff1b 	bl	8001d98 <HAL_Delay>

#define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
//#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

#if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
    i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR);
 8000f62:	2273      	movs	r2, #115	; 0x73
 8000f64:	214f      	movs	r1, #79	; 0x4f
 8000f66:	201e      	movs	r0, #30
 8000f68:	f7ff ffa6 	bl	8000eb8 <i2c1_pisiRegister>
#elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
    i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR);
#else
    for(;;); // V primeru napake, pocakamo tukaj
#endif
    HAL_Delay(100);
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f000 ff13 	bl	8001d98 <HAL_Delay>

    i2c1_pisiRegister(0x19, 0x20, 0x37);
 8000f72:	2237      	movs	r2, #55	; 0x37
 8000f74:	2120      	movs	r1, #32
 8000f76:	2019      	movs	r0, #25
 8000f78:	f7ff ff9e 	bl	8000eb8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x22, 1u<<4u);
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	2122      	movs	r1, #34	; 0x22
 8000f80:	2019      	movs	r0, #25
 8000f82:	f7ff ff99 	bl	8000eb8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x98);
 8000f86:	2298      	movs	r2, #152	; 0x98
 8000f88:	2123      	movs	r1, #35	; 0x23
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f7ff ff94 	bl	8000eb8 <i2c1_pisiRegister>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <reading>:

void reading(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	for(;;){
		struct SensorData data;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <reading+0x34>)
 8000fa0:	f001 f9e1 	bl	8002366 <HAL_GPIO_TogglePin>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&data.X, 6);
 8000fa4:	463a      	mov	r2, r7
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	2128      	movs	r1, #40	; 0x28
 8000faa:	2019      	movs	r0, #25
 8000fac:	f7ff ffa6 	bl	8000efc <i2c1_beriRegistre>
		xQueueSend( sensorQueue, &data, pdMS_TO_TICKS( 200 ) );
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <reading+0x38>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	f008 fc27 	bl	800980c <xQueueGenericSend>
		vTaskDelay(100);
 8000fbe:	2064      	movs	r0, #100	; 0x64
 8000fc0:	f009 f998 	bl	800a2f4 <vTaskDelay>
	for(;;){
 8000fc4:	e7e9      	b.n	8000f9a <reading+0x6>
 8000fc6:	bf00      	nop
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	2000037c 	.word	0x2000037c

08000fd0 <button_reading>:
	}
}

void button_reading(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	uint8_t data = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000fda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fde:	4816      	ldr	r0, [pc, #88]	; (8001038 <button_reading+0x68>)
 8000fe0:	f001 f9c1 	bl	8002366 <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4815      	ldr	r0, [pc, #84]	; (800103c <button_reading+0x6c>)
 8000fe8:	f001 f98c 	bl	8002304 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <button_reading+0x2e>
            buttonStable++;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <button_reading+0x70>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <button_reading+0x70>)
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e018      	b.n	8001030 <button_reading+0x60>
        }else {
            if(buttonStable > 5) {
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <button_reading+0x70>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b05      	cmp	r3, #5
 8001004:	d911      	bls.n	800102a <button_reading+0x5a>

                if(sendingEnabled == 0) {
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <button_reading+0x74>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <button_reading+0x46>
                    sendingEnabled = 1;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <button_reading+0x74>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e009      	b.n	800102a <button_reading+0x5a>
                }else{
                    button_pressed = 1;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <button_reading+0x78>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
                    xQueueSend( buttonQueue, &data, pdMS_TO_TICKS( 200 ) );
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <button_reading+0x7c>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	1df9      	adds	r1, r7, #7
 8001022:	2300      	movs	r3, #0
 8001024:	22c8      	movs	r2, #200	; 0xc8
 8001026:	f008 fbf1 	bl	800980c <xQueueGenericSend>
                }
            }


            buttonStable = 0;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <button_reading+0x70>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
        }
        vTaskDelay(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f009 f95f 	bl	800a2f4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001036:	e7d0      	b.n	8000fda <button_reading+0xa>
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40020000 	.word	0x40020000
 8001040:	20000370 	.word	0x20000370
 8001044:	20000374 	.word	0x20000374
 8001048:	20000375 	.word	0x20000375
 800104c:	20000378 	.word	0x20000378

08001050 <sensor_transmitting>:
	}
}

void sensor_transmitting(){
 8001050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001054:	b088      	sub	sp, #32
 8001056:	af04      	add	r7, sp, #16
	struct SensorData data;
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105c:	482e      	ldr	r0, [pc, #184]	; (8001118 <sensor_transmitting+0xc8>)
 800105e:	f001 f982 	bl	8002366 <HAL_GPIO_TogglePin>
		xQueueReceive( sensorQueue, &data, portMAX_DELAY );
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <sensor_transmitting+0xcc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1d39      	adds	r1, r7, #4
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106c:	4618      	mov	r0, r3
 800106e:	f008 fd5b 	bl	8009b28 <xQueueReceive>
		if(sendingEnabled==1){
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <sensor_transmitting+0xd0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d1ee      	bne.n	8001058 <sensor_transmitting+0x8>
			int length = sprintf(&data_buf, "{\"type\":\"acc\", \"X\":%.3f, \"Y\":%.3f, \"Z\":%.3f}\n\r", ((float) data.X) * 0.00012, ((float) -data.Y) * 0.00012, ((float) data.Z) * 0.00012);
 800107a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001086:	ee17 0a90 	vmov	r0, s15
 800108a:	f7ff fa65 	bl	8000558 <__aeabi_f2d>
 800108e:	a320      	add	r3, pc, #128	; (adr r3, 8001110 <sensor_transmitting+0xc0>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fab8 	bl	8000608 <__aeabi_dmul>
 8001098:	4603      	mov	r3, r0
 800109a:	460c      	mov	r4, r1
 800109c:	4698      	mov	r8, r3
 800109e:	46a1      	mov	r9, r4
 80010a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a4:	425b      	negs	r3, r3
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_f2d>
 80010b6:	a316      	add	r3, pc, #88	; (adr r3, 8001110 <sensor_transmitting+0xc0>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff faa4 	bl	8000608 <__aeabi_dmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	460c      	mov	r4, r1
 80010c4:	4625      	mov	r5, r4
 80010c6:	461c      	mov	r4, r3
 80010c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d4:	ee17 0a90 	vmov	r0, s15
 80010d8:	f7ff fa3e 	bl	8000558 <__aeabi_f2d>
 80010dc:	a30c      	add	r3, pc, #48	; (adr r3, 8001110 <sensor_transmitting+0xc0>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fa91 	bl	8000608 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010ee:	e9cd 4500 	strd	r4, r5, [sp]
 80010f2:	4642      	mov	r2, r8
 80010f4:	464b      	mov	r3, r9
 80010f6:	490b      	ldr	r1, [pc, #44]	; (8001124 <sensor_transmitting+0xd4>)
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <sensor_transmitting+0xd8>)
 80010fa:	f00c f805 	bl	800d108 <siprintf>
 80010fe:	60f8      	str	r0, [r7, #12]
			CDC_Transmit_FS(&data_buf, length);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <sensor_transmitting+0xd8>)
 8001108:	f00a fe56 	bl	800bdb8 <CDC_Transmit_FS>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800110c:	e7a4      	b.n	8001058 <sensor_transmitting+0x8>
 800110e:	bf00      	nop
 8001110:	4d551d69 	.word	0x4d551d69
 8001114:	3f1f7510 	.word	0x3f1f7510
 8001118:	40020c00 	.word	0x40020c00
 800111c:	2000037c 	.word	0x2000037c
 8001120:	20000374 	.word	0x20000374
 8001124:	0800e75c 	.word	0x0800e75c
 8001128:	20004e3c 	.word	0x20004e3c

0800112c <button_transmitting>:
		}
	}
}

void button_transmitting(){
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	uint8_t data;
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	4811      	ldr	r0, [pc, #68]	; (800117c <button_transmitting+0x50>)
 8001138:	f001 f915 	bl	8002366 <HAL_GPIO_TogglePin>
		xQueueReceive( buttonQueue, &data, portMAX_DELAY );
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <button_transmitting+0x54>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1cf9      	adds	r1, r7, #3
 8001142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001146:	4618      	mov	r0, r3
 8001148:	f008 fcee 	bl	8009b28 <xQueueReceive>
		if(sendingEnabled==1){
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <button_transmitting+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d1ee      	bne.n	8001132 <button_transmitting+0x6>
			int length = sprintf(&button_buf, "{\"type\":\"button\"}\n\r");
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <button_transmitting+0x5c>)
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <button_transmitting+0x60>)
 8001158:	4615      	mov	r5, r2
 800115a:	461c      	mov	r4, r3
 800115c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115e:	6028      	str	r0, [r5, #0]
 8001160:	6069      	str	r1, [r5, #4]
 8001162:	60aa      	str	r2, [r5, #8]
 8001164:	60eb      	str	r3, [r5, #12]
 8001166:	6820      	ldr	r0, [r4, #0]
 8001168:	6128      	str	r0, [r5, #16]
 800116a:	2313      	movs	r3, #19
 800116c:	607b      	str	r3, [r7, #4]
			CDC_Transmit_FS(&button_buf, length);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <button_transmitting+0x5c>)
 8001176:	f00a fe1f 	bl	800bdb8 <CDC_Transmit_FS>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800117a:	e7da      	b.n	8001132 <button_transmitting+0x6>
 800117c:	40020c00 	.word	0x40020c00
 8001180:	20000378 	.word	0x20000378
 8001184:	20000374 	.word	0x20000374
 8001188:	20004d30 	.word	0x20004d30
 800118c:	0800e78c 	.word	0x0800e78c

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f000 fd8d 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f891 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f000 fa25 	bl	80015ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80011a2:	f000 f911 	bl	80013c8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80011a6:	f000 f93f 	bl	8001428 <MX_I2S2_Init>
  MX_I2S3_Init();
 80011aa:	f000 f96b 	bl	8001484 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011ae:	f000 f999 	bl	80014e4 <MX_SPI1_Init>
  MX_TIM4_Init();
 80011b2:	f000 f9cd 	bl	8001550 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim4);
 80011b6:	4832      	ldr	r0, [pc, #200]	; (8001280 <main+0xf0>)
 80011b8:	f004 fd17 	bl	8005bea <HAL_TIM_Base_Start_IT>
    __HAL_I2C_ENABLE(&hi2c1);
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <main+0xf4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <main+0xf4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

    initOrientation();
 80011cc:	f7ff fec4 	bl	8000f58 <initOrientation>
    i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[0], 6);
 80011d0:	2306      	movs	r3, #6
 80011d2:	4a2d      	ldr	r2, [pc, #180]	; (8001288 <main+0xf8>)
 80011d4:	2128      	movs	r1, #40	; 0x28
 80011d6:	2019      	movs	r0, #25
 80011d8:	f7ff fe90 	bl	8000efc <i2c1_beriRegistre>

    buttonQueue = xQueueCreate( 4, sizeof( uint8_t ) );
 80011dc:	2200      	movs	r2, #0
 80011de:	2101      	movs	r1, #1
 80011e0:	2004      	movs	r0, #4
 80011e2:	f008 fab0 	bl	8009746 <xQueueGenericCreate>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <main+0xfc>)
 80011ea:	601a      	str	r2, [r3, #0]
    sensorQueue = xQueueCreate( 4, sizeof( struct SensorData ) );
 80011ec:	2200      	movs	r2, #0
 80011ee:	2106      	movs	r1, #6
 80011f0:	2004      	movs	r0, #4
 80011f2:	f008 faa8 	bl	8009746 <xQueueGenericCreate>
 80011f6:	4602      	mov	r2, r0
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <main+0x100>)
 80011fa:	601a      	str	r2, [r3, #0]

    TaskHandle_t readingHandle = NULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
    TaskHandle_t button_readingHandle = NULL;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
    TaskHandle_t transmittingHandle = NULL;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]

    xTaskCreate(
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	2300      	movs	r3, #0
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	491e      	ldr	r1, [pc, #120]	; (8001294 <main+0x104>)
 800121a:	481f      	ldr	r0, [pc, #124]	; (8001298 <main+0x108>)
 800121c:	f008 ff26 	bl	800a06c <xTaskCreate>
			256,      /* Stack size in words, not bytes. */
            ( void * ) 1,    /* Parameter passed into the task. */
            tskIDLE_PRIORITY,/* Priority at which the task is created. */
            &readingHandle );      /* Used to pass out the created task's handle. */

    xTaskCreate(
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001230:	491a      	ldr	r1, [pc, #104]	; (800129c <main+0x10c>)
 8001232:	481b      	ldr	r0, [pc, #108]	; (80012a0 <main+0x110>)
 8001234:	f008 ff1a 	bl	800a06c <xTaskCreate>
			256,      /* Stack size in words, not bytes. */
    		( void * ) 1,    /* Parameter passed into the task. */
    		tskIDLE_PRIORITY,/* Priority at which the task is created. */
    		&button_readingHandle );      /* Used to pass out the created task's handle. */

    xTaskCreate(
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	2301      	movs	r3, #1
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001246:	4917      	ldr	r1, [pc, #92]	; (80012a4 <main+0x114>)
 8001248:	4817      	ldr	r0, [pc, #92]	; (80012a8 <main+0x118>)
 800124a:	f008 ff0f 	bl	800a06c <xTaskCreate>
			256,      /* Stack size in words, not bytes. */
    		( void * ) 1,    /* Parameter passed into the task. */
    		tskIDLE_PRIORITY+1,/* Priority at which the task is created. */
    		&transmittingHandle );      /* Used to pass out the created task's handle. */

    xTaskCreate(
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	2301      	movs	r3, #1
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125c:	4913      	ldr	r1, [pc, #76]	; (80012ac <main+0x11c>)
 800125e:	4814      	ldr	r0, [pc, #80]	; (80012b0 <main+0x120>)
 8001260:	f008 ff04 	bl	800a06c <xTaskCreate>
       		tskIDLE_PRIORITY+1,/* Priority at which the task is created. */
       		&transmittingHandle );      /* Used to pass out the created task's handle. */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001264:	f007 ffa4 	bl	80091b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <main+0x124>)
 800126a:	2100      	movs	r1, #0
 800126c:	4812      	ldr	r0, [pc, #72]	; (80012b8 <main+0x128>)
 800126e:	f007 ffd3 	bl	8009218 <osThreadNew>
 8001272:	4602      	mov	r2, r0
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <main+0x12c>)
 8001276:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001278:	f009 f870 	bl	800a35c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127c:	e7fe      	b.n	800127c <main+0xec>
 800127e:	bf00      	nop
 8001280:	20004c9c 	.word	0x20004c9c
 8001284:	20004cdc 	.word	0x20004cdc
 8001288:	20004fa0 	.word	0x20004fa0
 800128c:	20000378 	.word	0x20000378
 8001290:	2000037c 	.word	0x2000037c
 8001294:	0800e7a0 	.word	0x0800e7a0
 8001298:	08000f95 	.word	0x08000f95
 800129c:	0800e7a8 	.word	0x0800e7a8
 80012a0:	08000fd1 	.word	0x08000fd1
 80012a4:	0800e7b8 	.word	0x0800e7b8
 80012a8:	0800112d 	.word	0x0800112d
 80012ac:	0800e7cc 	.word	0x0800e7cc
 80012b0:	08001051 	.word	0x08001051
 80012b4:	0800e838 	.word	0x0800e838
 80012b8:	080017cd 	.word	0x080017cd
 80012bc:	20004c98 	.word	0x20004c98

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09a      	sub	sp, #104	; 0x68
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ca:	2230      	movs	r2, #48	; 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00b f9fd 	bl	800c6ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <SystemClock_Config+0x100>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a30      	ldr	r2, [pc, #192]	; (80013c0 <SystemClock_Config+0x100>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <SystemClock_Config+0x100>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <SystemClock_Config+0x104>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <SystemClock_Config+0x104>)
 800131c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <SystemClock_Config+0x104>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132e:	2301      	movs	r3, #1
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001340:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001342:	2304      	movs	r3, #4
 8001344:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001346:	23a8      	movs	r3, #168	; 0xa8
 8001348:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800134a:	2304      	movs	r3, #4
 800134c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800134e:	2307      	movs	r3, #7
 8001350:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001352:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fe1c 	bl	8004f94 <HAL_RCC_OscConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001362:	f000 fa3d 	bl	80017e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	2102      	movs	r1, #2
 8001382:	4618      	mov	r0, r3
 8001384:	f004 f876 	bl	8005474 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800138e:	f000 fa27 	bl	80017e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001392:	2301      	movs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001396:	23c8      	movs	r3, #200	; 0xc8
 8001398:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800139a:	2305      	movs	r3, #5
 800139c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4618      	mov	r0, r3
 80013a8:	f004 fa42 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80013b2:	f000 fa15 	bl	80017e0 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3768      	adds	r7, #104	; 0x68
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_I2C1_Init+0x54>)
 80013ce:	4a14      	ldr	r2, [pc, #80]	; (8001420 <MX_I2C1_Init+0x58>)
 80013d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x54>)
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <MX_I2C1_Init+0x5c>)
 80013d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_I2C1_Init+0x54>)
 80013da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013de:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_I2C1_Init+0x54>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <MX_I2C1_Init+0x54>)
 80013e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_I2C1_Init+0x54>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_I2C1_Init+0x54>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_I2C1_Init+0x54>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_I2C1_Init+0x54>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_I2C1_Init+0x54>)
 8001408:	f000 ffec 	bl	80023e4 <HAL_I2C_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001412:	f000 f9e5 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20004cdc 	.word	0x20004cdc
 8001420:	40005400 	.word	0x40005400
 8001424:	00061a80 	.word	0x00061a80

08001428 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_I2S2_Init+0x50>)
 800142e:	4a13      	ldr	r2, [pc, #76]	; (800147c <MX_I2S2_Init+0x54>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_I2S2_Init+0x50>)
 8001434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001438:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_I2S2_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_I2S2_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_I2S2_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <MX_I2S2_Init+0x50>)
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <MX_I2S2_Init+0x58>)
 8001450:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_I2S2_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <MX_I2S2_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_I2S2_Init+0x50>)
 8001460:	2201      	movs	r2, #1
 8001462:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <MX_I2S2_Init+0x50>)
 8001466:	f001 ff71 	bl	800334c <HAL_I2S_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001470:	f000 f9b6 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20004fa8 	.word	0x20004fa8
 800147c:	40003800 	.word	0x40003800
 8001480:	00017700 	.word	0x00017700

08001484 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_I2S3_Init+0x54>)
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <MX_I2S3_Init+0x58>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_I2S3_Init+0x54>)
 8001490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001494:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_I2S3_Init+0x54>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_I2S3_Init+0x54>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <MX_I2S3_Init+0x54>)
 80014a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_I2S3_Init+0x54>)
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <MX_I2S3_Init+0x5c>)
 80014ae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_I2S3_Init+0x54>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_I2S3_Init+0x54>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_I2S3_Init+0x54>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_I2S3_Init+0x54>)
 80014c4:	f001 ff42 	bl	800334c <HAL_I2S_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80014ce:	f000 f987 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20004ff0 	.word	0x20004ff0
 80014dc:	40003c00 	.word	0x40003c00
 80014e0:	00017700 	.word	0x00017700

080014e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_SPI1_Init+0x64>)
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <MX_SPI1_Init+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <MX_SPI1_Init+0x64>)
 80014f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_SPI1_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_SPI1_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_SPI1_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_SPI1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_SPI1_Init+0x64>)
 8001510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001514:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_SPI1_Init+0x64>)
 8001530:	220a      	movs	r2, #10
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_SPI1_Init+0x64>)
 8001536:	f004 fac9 	bl	8005acc <HAL_SPI_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001540:	f000 f94e 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20004f48 	.word	0x20004f48
 800154c:	40013000 	.word	0x40013000

08001550 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_TIM4_Init+0x94>)
 800156e:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <MX_TIM4_Init+0x98>)
 8001570:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_TIM4_Init+0x94>)
 8001574:	2253      	movs	r2, #83	; 0x53
 8001576:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_TIM4_Init+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_TIM4_Init+0x94>)
 8001580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001584:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_TIM4_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_TIM4_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <MX_TIM4_Init+0x94>)
 8001594:	f004 fafe 	bl	8005b94 <HAL_TIM_Base_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800159e:	f000 f91f 	bl	80017e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_TIM4_Init+0x94>)
 80015b0:	f004 fc47 	bl	8005e42 <HAL_TIM_ConfigClockSource>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80015ba:	f000 f911 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	; (80015e4 <MX_TIM4_Init+0x94>)
 80015cc:	f004 fe3c 	bl	8006248 <HAL_TIMEx_MasterConfigSynchronization>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80015d6:	f000 f903 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20004c9c 	.word	0x20004c9c
 80015e8:	40000800 	.word	0x40000800

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a69      	ldr	r2, [pc, #420]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a62      	ldr	r2, [pc, #392]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b5c      	ldr	r3, [pc, #368]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a5b      	ldr	r2, [pc, #364]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b55      	ldr	r3, [pc, #340]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b4e      	ldr	r3, [pc, #312]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <MX_GPIO_Init+0x1c4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2108      	movs	r1, #8
 80016ae:	4841      	ldr	r0, [pc, #260]	; (80017b4 <MX_GPIO_Init+0x1c8>)
 80016b0:	f000 fe40 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2101      	movs	r1, #1
 80016b8:	483f      	ldr	r0, [pc, #252]	; (80017b8 <MX_GPIO_Init+0x1cc>)
 80016ba:	f000 fe3b 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016be:	2200      	movs	r2, #0
 80016c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80016c4:	483d      	ldr	r0, [pc, #244]	; (80017bc <MX_GPIO_Init+0x1d0>)
 80016c6:	f000 fe35 	bl	8002334 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80016ca:	2304      	movs	r3, #4
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4835      	ldr	r0, [pc, #212]	; (80017b4 <MX_GPIO_Init+0x1c8>)
 80016de:	f000 fc8f 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80016e2:	2308      	movs	r3, #8
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	482e      	ldr	r0, [pc, #184]	; (80017b4 <MX_GPIO_Init+0x1c8>)
 80016fa:	f000 fc81 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 80016fe:	2310      	movs	r3, #16
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <MX_GPIO_Init+0x1d4>)
 8001704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	4828      	ldr	r0, [pc, #160]	; (80017b4 <MX_GPIO_Init+0x1c8>)
 8001712:	f000 fc75 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|MEMS_INT2_Pin;
 8001716:	2322      	movs	r3, #34	; 0x22
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <MX_GPIO_Init+0x1d8>)
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4822      	ldr	r0, [pc, #136]	; (80017b4 <MX_GPIO_Init+0x1c8>)
 800172a:	f000 fc69 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800172e:	2301      	movs	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <MX_GPIO_Init+0x1cc>)
 8001746:	f000 fc5b 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800174a:	2301      	movs	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_GPIO_Init+0x1d8>)
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <MX_GPIO_Init+0x1dc>)
 800175e:	f000 fc4f 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001762:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001766:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <MX_GPIO_Init+0x1d0>)
 800177c:	f000 fc40 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001780:	2320      	movs	r3, #32
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	480a      	ldr	r0, [pc, #40]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001794:	f000 fc34 	bl	8002000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2105      	movs	r1, #5
 800179c:	200a      	movs	r0, #10
 800179e:	f000 fbf8 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017a2:	200a      	movs	r0, #10
 80017a4:	f000 fc11 	bl	8001fca <HAL_NVIC_EnableIRQ>

}
 80017a8:	bf00      	nop
 80017aa:	3730      	adds	r7, #48	; 0x30
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	10110000 	.word	0x10110000
 80017c4:	10120000 	.word	0x10120000
 80017c8:	40020000 	.word	0x40020000

080017cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80017d4:	f00a fa32 	bl	800bc3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017d8:	2001      	movs	r0, #1
 80017da:	f007 fdc3 	bl	8009364 <osDelay>
 80017de:	e7fb      	b.n	80017d8 <StartDefaultTask+0xc>

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <Error_Handler+0x6>

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_MspInit+0x54>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a11      	ldr	r2, [pc, #68]	; (800183c <HAL_MspInit+0x54>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x54>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_MspInit+0x54>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_MspInit+0x54>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_MspInit+0x54>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	210f      	movs	r1, #15
 800182a:	f06f 0001 	mvn.w	r0, #1
 800182e:	f000 fbb0 	bl	8001f92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_I2C_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12c      	bne.n	80018bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800187e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001884:	2312      	movs	r3, #18
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001890:	2304      	movs	r3, #4
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <HAL_I2C_MspInit+0x8c>)
 800189c:	f000 fbb0 	bl	8002000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_I2C_MspInit+0x88>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400

080018d0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a59      	ldr	r2, [pc, #356]	; (8001a54 <HAL_I2S_MspInit+0x184>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d15b      	bne.n	80019aa <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a57      	ldr	r2, [pc, #348]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a50      	ldr	r2, [pc, #320]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001946:	2304      	movs	r3, #4
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001956:	2306      	movs	r3, #6
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	483e      	ldr	r0, [pc, #248]	; (8001a5c <HAL_I2S_MspInit+0x18c>)
 8001962:	f000 fb4d 	bl	8002000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001966:	2308      	movs	r3, #8
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001976:	2305      	movs	r3, #5
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	4619      	mov	r1, r3
 8001980:	4836      	ldr	r0, [pc, #216]	; (8001a5c <HAL_I2S_MspInit+0x18c>)
 8001982:	f000 fb3d 	bl	8002000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001998:	2305      	movs	r3, #5
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	4619      	mov	r1, r3
 80019a2:	482f      	ldr	r0, [pc, #188]	; (8001a60 <HAL_I2S_MspInit+0x190>)
 80019a4:	f000 fb2c 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019a8:	e04f      	b.n	8001a4a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <HAL_I2S_MspInit+0x194>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d14a      	bne.n	8001a4a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6313      	str	r3, [r2, #48]	; 0x30
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_I2S_MspInit+0x188>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a18:	2306      	movs	r3, #6
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4811      	ldr	r0, [pc, #68]	; (8001a68 <HAL_I2S_MspInit+0x198>)
 8001a24:	f000 faec 	bl	8002000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a28:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a3a:	2306      	movs	r3, #6
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_I2S_MspInit+0x18c>)
 8001a46:	f000 fadb 	bl	8002000 <HAL_GPIO_Init>
}
 8001a4a:	bf00      	nop
 8001a4c:	3738      	adds	r7, #56	; 0x38
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40003800 	.word	0x40003800
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40003c00 	.word	0x40003c00
 8001a68:	40020000 	.word	0x40020000

08001a6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <HAL_SPI_MspInit+0x84>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d12b      	bne.n	8001ae6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_SPI_MspInit+0x88>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_SPI_MspInit+0x88>)
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_SPI_MspInit+0x88>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_SPI_MspInit+0x88>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_SPI_MspInit+0x88>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_SPI_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ac6:	23e0      	movs	r3, #224	; 0xe0
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_SPI_MspInit+0x8c>)
 8001ae2:	f000 fa8d 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40013000 	.word	0x40013000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000

08001afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <HAL_TIM_Base_MspInit+0x48>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d115      	bne.n	8001b3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_TIM_Base_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <HAL_TIM_Base_MspInit+0x4c>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_TIM_Base_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	201e      	movs	r0, #30
 8001b30:	f000 fa2f 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b34:	201e      	movs	r0, #30
 8001b36:	f000 fa48 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40000800 	.word	0x40000800
 8001b48:	40023800 	.word	0x40023800

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <NMI_Handler+0x4>

08001b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <MemManage_Handler+0x4>

08001b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7c:	f000 f8ec 	bl	8001d58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b80:	f009 f822 	bl	800abc8 <xTaskGetSchedulerState>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b8a:	f009 fdf5 	bl	800b778 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b96:	2010      	movs	r0, #16
 8001b98:	f000 fc00 	bl	800239c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <TIM4_IRQHandler+0x10>)
 8001ba6:	f004 f844 	bl	8005c32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20004c9c 	.word	0x20004c9c

08001bb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <OTG_FS_IRQHandler+0x10>)
 8001bba:	f002 f9b7 	bl	8003f2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000654c 	.word	0x2000654c

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f00a fd24 	bl	800c644 <__errno>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	230c      	movs	r3, #12
 8001c00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20020000 	.word	0x20020000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	20000380 	.word	0x20000380
 8001c30:	20006958 	.word	0x20006958

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <SystemInit+0x28>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <SystemInit+0x28>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SystemInit+0x28>)
 8001c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c66:	e003      	b.n	8001c70 <LoopCopyDataInit>

08001c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c6e:	3104      	adds	r1, #4

08001c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c78:	d3f6      	bcc.n	8001c68 <CopyDataInit>
  ldr  r2, =_sbss
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c7c:	e002      	b.n	8001c84 <LoopFillZerobss>

08001c7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c80:	f842 3b04 	str.w	r3, [r2], #4

08001c84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c88:	d3f9      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c8a:	f7ff ffd3 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f00a fcdf 	bl	800c650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c92:	f7ff fa7d 	bl	8001190 <main>
  bx  lr    
 8001c96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c9c:	0800eae0 	.word	0x0800eae0
  ldr  r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ca4:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8001ca8:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8001cac:	20006958 	.word	0x20006958

08001cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <HAL_Init+0x40>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_Init+0x40>)
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_Init+0x40>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f94d 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce2:	200f      	movs	r0, #15
 8001ce4:	f000 f808 	bl	8001cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce8:	f7ff fd7e 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x54>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x58>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f965 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d34:	f000 f92d 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_InitTick+0x5c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	20005038 	.word	0x20005038

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20005038 	.word	0x20005038

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_Delay+0x40>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000008 	.word	0x20000008

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	; (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5c:	f7ff ff8e 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff29 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff3e 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff8e 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5d 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff31 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffa2 	bl	8001f38 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e159      	b.n	80022d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 8148 	bne.w	80022ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d00b      	beq.n	800205a <HAL_GPIO_Init+0x5a>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204e:	2b11      	cmp	r3, #17
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b12      	cmp	r3, #18
 8002058:	d130      	bne.n	80020bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 0201 	and.w	r2, r3, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0xfc>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b12      	cmp	r3, #18
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a2 	beq.w	80022ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <HAL_GPIO_Init+0x2e4>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_GPIO_Init+0x2e4>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_GPIO_Init+0x2e4>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <HAL_GPIO_Init+0x2e8>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a48      	ldr	r2, [pc, #288]	; (80022ec <HAL_GPIO_Init+0x2ec>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x202>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_GPIO_Init+0x2f0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x1fe>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a46      	ldr	r2, [pc, #280]	; (80022f4 <HAL_GPIO_Init+0x2f4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x1fa>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <HAL_GPIO_Init+0x2f8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a44      	ldr	r2, [pc, #272]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x1f2>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x204>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002214:	4934      	ldr	r1, [pc, #208]	; (80022e8 <HAL_GPIO_Init+0x2e8>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <HAL_GPIO_Init+0x300>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002246:	4a2e      	ldr	r2, [pc, #184]	; (8002300 <HAL_GPIO_Init+0x300>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <HAL_GPIO_Init+0x300>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002270:	4a23      	ldr	r2, [pc, #140]	; (8002300 <HAL_GPIO_Init+0x300>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_GPIO_Init+0x300>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229a:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_GPIO_Init+0x300>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_GPIO_Init+0x300>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_GPIO_Init+0x300>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f aea2 	bls.w	800201c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40013c00 	.word	0x40013c00

08002304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e001      	b.n	8002326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
 8002340:	4613      	mov	r3, r2
 8002342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002350:	e003      	b.n	800235a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	041a      	lsls	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	619a      	str	r2, [r3, #24]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	401a      	ands	r2, r3
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	429a      	cmp	r2, r3
 800237e:	d104      	bne.n	800238a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	041a      	lsls	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002388:	e002      	b.n	8002390 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f806 	bl	80023cc <HAL_GPIO_EXTI_Callback>
  }
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40013c00 	.word	0x40013c00

080023cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e11f      	b.n	8002636 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fa18 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002448:	f003 f9de 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 800244c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a7b      	ldr	r2, [pc, #492]	; (8002640 <HAL_I2C_Init+0x25c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d807      	bhi.n	8002468 <HAL_I2C_Init+0x84>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a7a      	ldr	r2, [pc, #488]	; (8002644 <HAL_I2C_Init+0x260>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e006      	b.n	8002476 <HAL_I2C_Init+0x92>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a77      	ldr	r2, [pc, #476]	; (8002648 <HAL_I2C_Init+0x264>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0db      	b.n	8002636 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a72      	ldr	r2, [pc, #456]	; (800264c <HAL_I2C_Init+0x268>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a64      	ldr	r2, [pc, #400]	; (8002640 <HAL_I2C_Init+0x25c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d802      	bhi.n	80024b8 <HAL_I2C_Init+0xd4>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3301      	adds	r3, #1
 80024b6:	e009      	b.n	80024cc <HAL_I2C_Init+0xe8>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	4a63      	ldr	r2, [pc, #396]	; (8002650 <HAL_I2C_Init+0x26c>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	3301      	adds	r3, #1
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4956      	ldr	r1, [pc, #344]	; (8002640 <HAL_I2C_Init+0x25c>)
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d80d      	bhi.n	8002508 <HAL_I2C_Init+0x124>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e59      	subs	r1, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	2b04      	cmp	r3, #4
 8002502:	bf38      	it	cc
 8002504:	2304      	movcc	r3, #4
 8002506:	e04f      	b.n	80025a8 <HAL_I2C_Init+0x1c4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d111      	bne.n	8002534 <HAL_I2C_Init+0x150>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e58      	subs	r0, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e012      	b.n	800255a <HAL_I2C_Init+0x176>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	0099      	lsls	r1, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Init+0x17e>
 800255e:	2301      	movs	r3, #1
 8002560:	e022      	b.n	80025a8 <HAL_I2C_Init+0x1c4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10e      	bne.n	8002588 <HAL_I2C_Init+0x1a4>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e58      	subs	r0, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	440b      	add	r3, r1
 8002578:	fbb0 f3f3 	udiv	r3, r0, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002586:	e00f      	b.n	80025a8 <HAL_I2C_Init+0x1c4>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	0099      	lsls	r1, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	fbb0 f3f3 	udiv	r3, r0, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	6809      	ldr	r1, [r1, #0]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6911      	ldr	r1, [r2, #16]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	000186a0 	.word	0x000186a0
 8002644:	001e847f 	.word	0x001e847f
 8002648:	003d08ff 	.word	0x003d08ff
 800264c:	431bde83 	.word	0x431bde83
 8002650:	10624dd3 	.word	0x10624dd3

08002654 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	4608      	mov	r0, r1
 800265e:	4611      	mov	r1, r2
 8002660:	461a      	mov	r2, r3
 8002662:	4603      	mov	r3, r0
 8002664:	817b      	strh	r3, [r7, #10]
 8002666:	460b      	mov	r3, r1
 8002668:	813b      	strh	r3, [r7, #8]
 800266a:	4613      	mov	r3, r2
 800266c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800266e:	f7ff fb87 	bl	8001d80 <HAL_GetTick>
 8002672:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b20      	cmp	r3, #32
 800267e:	f040 80d9 	bne.w	8002834 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2319      	movs	r3, #25
 8002688:	2201      	movs	r2, #1
 800268a:	496d      	ldr	r1, [pc, #436]	; (8002840 <HAL_I2C_Mem_Write+0x1ec>)
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fc7f 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002698:	2302      	movs	r3, #2
 800269a:	e0cc      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_I2C_Mem_Write+0x56>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0c5      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d007      	beq.n	80026d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2221      	movs	r2, #33	; 0x21
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2240      	movs	r2, #64	; 0x40
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a4d      	ldr	r2, [pc, #308]	; (8002844 <HAL_I2C_Mem_Write+0x1f0>)
 8002710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002712:	88f8      	ldrh	r0, [r7, #6]
 8002714:	893a      	ldrh	r2, [r7, #8]
 8002716:	8979      	ldrh	r1, [r7, #10]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4603      	mov	r3, r0
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fab6 	bl	8002c94 <I2C_RequestMemoryWrite>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d052      	beq.n	80027d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e081      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fd00 	bl	800313c <I2C_WaitOnTXEFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b04      	cmp	r3, #4
 8002748:	d107      	bne.n	800275a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06b      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d11b      	bne.n	80027d4 <HAL_I2C_Mem_Write+0x180>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d017      	beq.n	80027d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1aa      	bne.n	8002732 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fcec 	bl	80031be <I2C_WaitOnBTFFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d107      	bne.n	8002804 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e016      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	00100002 	.word	0x00100002
 8002844:	ffff0000 	.word	0xffff0000

08002848 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	460b      	mov	r3, r1
 800285c:	813b      	strh	r3, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002862:	f7ff fa8d 	bl	8001d80 <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b20      	cmp	r3, #32
 8002872:	f040 8208 	bne.w	8002c86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2319      	movs	r3, #25
 800287c:	2201      	movs	r2, #1
 800287e:	497b      	ldr	r1, [pc, #492]	; (8002a6c <HAL_I2C_Mem_Read+0x224>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fb85 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
 800288e:	e1fb      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_I2C_Mem_Read+0x56>
 800289a:	2302      	movs	r3, #2
 800289c:	e1f4      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d007      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2222      	movs	r2, #34	; 0x22
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a5b      	ldr	r2, [pc, #364]	; (8002a70 <HAL_I2C_Mem_Read+0x228>)
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002906:	88f8      	ldrh	r0, [r7, #6]
 8002908:	893a      	ldrh	r2, [r7, #8]
 800290a:	8979      	ldrh	r1, [r7, #10]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4603      	mov	r3, r0
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fa52 	bl	8002dc0 <I2C_RequestMemoryRead>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1b0      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	d113      	bne.n	8002956 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	623b      	str	r3, [r7, #32]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e184      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	2b01      	cmp	r3, #1
 800295c:	d11b      	bne.n	8002996 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e164      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	2b02      	cmp	r3, #2
 800299c:	d11b      	bne.n	80029d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	e144      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029ec:	e138      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	f200 80f1 	bhi.w	8002bda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d123      	bne.n	8002a48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fc1b 	bl	8003240 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e139      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a46:	e10b      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d14e      	bne.n	8002aee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	2200      	movs	r2, #0
 8002a58:	4906      	ldr	r1, [pc, #24]	; (8002a74 <HAL_I2C_Mem_Read+0x22c>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fa98 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e10e      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000
 8002a74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aec:	e0b8      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	2200      	movs	r2, #0
 8002af6:	4966      	ldr	r1, [pc, #408]	; (8002c90 <HAL_I2C_Mem_Read+0x448>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa49 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0bf      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	2200      	movs	r2, #0
 8002b52:	494f      	ldr	r1, [pc, #316]	; (8002c90 <HAL_I2C_Mem_Read+0x448>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fa1b 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e091      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd8:	e042      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fb2e 	bl	8003240 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e04c      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d118      	bne.n	8002c60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f aec2 	bne.w	80029ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e000      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
  }
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	00010004 	.word	0x00010004

08002c94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	817b      	strh	r3, [r7, #10]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	813b      	strh	r3, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f960 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce4:	d103      	bne.n	8002cee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e05f      	b.n	8002db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	492d      	ldr	r1, [pc, #180]	; (8002dbc <I2C_RequestMemoryWrite+0x128>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f998 	bl	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e04c      	b.n	8002db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d30:	6a39      	ldr	r1, [r7, #32]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa02 	bl	800313c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d107      	bne.n	8002d56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e02b      	b.n	8002db2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	e021      	b.n	8002db0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d6c:	893b      	ldrh	r3, [r7, #8]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	6a39      	ldr	r1, [r7, #32]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f9dc 	bl	800313c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d107      	bne.n	8002da2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e005      	b.n	8002db2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	00010002 	.word	0x00010002

08002dc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	4608      	mov	r0, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	817b      	strh	r3, [r7, #10]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	813b      	strh	r3, [r7, #8]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002de8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f8c2 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e20:	d103      	bne.n	8002e2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0aa      	b.n	8002f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e2e:	897b      	ldrh	r3, [r7, #10]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	4952      	ldr	r1, [pc, #328]	; (8002f8c <I2C_RequestMemoryRead+0x1cc>)
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f8fa 	bl	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e097      	b.n	8002f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6c:	6a39      	ldr	r1, [r7, #32]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f964 	bl	800313c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d107      	bne.n	8002e92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e076      	b.n	8002f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	611a      	str	r2, [r3, #16]
 8002ea6:	e021      	b.n	8002eec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea8:	893b      	ldrh	r3, [r7, #8]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	6a39      	ldr	r1, [r7, #32]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f93e 	bl	800313c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d107      	bne.n	8002ede <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002edc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e050      	b.n	8002f84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eee:	6a39      	ldr	r1, [r7, #32]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f923 	bl	800313c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d107      	bne.n	8002f14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e035      	b.n	8002f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f82b 	bl	8002f90 <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4e:	d103      	bne.n	8002f58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e013      	b.n	8002f84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f5c:	897b      	ldrh	r3, [r7, #10]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	6a3a      	ldr	r2, [r7, #32]
 8002f70:	4906      	ldr	r1, [pc, #24]	; (8002f8c <I2C_RequestMemoryRead+0x1cc>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f863 	bl	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	00010002 	.word	0x00010002

08002f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa0:	e025      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa8:	d021      	beq.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002faa:	f7fe fee9 	bl	8001d80 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d302      	bcc.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d116      	bne.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e023      	b.n	8003036 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d10d      	bne.n	8003014 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	43da      	mvns	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4013      	ands	r3, r2
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	e00c      	b.n	800302e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	429a      	cmp	r2, r3
 8003032:	d0b6      	beq.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304c:	e051      	b.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305c:	d123      	bne.n	80030a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003076:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e046      	b.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ac:	d021      	beq.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7fe fe67 	bl	8001d80 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d116      	bne.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e020      	b.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10c      	bne.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	bf14      	ite	ne
 800310e:	2301      	movne	r3, #1
 8003110:	2300      	moveq	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e00b      	b.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	43da      	mvns	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d18d      	bne.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003148:	e02d      	b.n	80031a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f8ce 	bl	80032ec <I2C_IsAcknowledgeFailed>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e02d      	b.n	80031b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003160:	d021      	beq.n	80031a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe fe0d 	bl	8001d80 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e007      	b.n	80031b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d1ca      	bne.n	800314a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ca:	e02d      	b.n	8003228 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f88d 	bl	80032ec <I2C_IsAcknowledgeFailed>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e02d      	b.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e2:	d021      	beq.n	8003228 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe fdcc 	bl	8001d80 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d116      	bne.n	8003228 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e007      	b.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b04      	cmp	r3, #4
 8003234:	d1ca      	bne.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800324c:	e042      	b.n	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b10      	cmp	r3, #16
 800325a:	d119      	bne.n	8003290 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0210 	mvn.w	r2, #16
 8003264:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e029      	b.n	80032e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003290:	f7fe fd76 	bl	8001d80 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	429a      	cmp	r2, r3
 800329e:	d302      	bcc.n	80032a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d116      	bne.n	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e007      	b.n	80032e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d1b5      	bne.n	800324e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d11b      	bne.n	800333c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800330c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e128      	b.n	80035b0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a90      	ldr	r2, [pc, #576]	; (80035b8 <HAL_I2S_Init+0x26c>)
 8003376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7fe faa9 	bl	80018d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003394:	f023 030f 	bic.w	r3, r3, #15
 8003398:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2202      	movs	r2, #2
 80033a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d060      	beq.n	800346c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033b2:	2310      	movs	r3, #16
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e001      	b.n	80033bc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d802      	bhi.n	80033ca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033ca:	2001      	movs	r0, #1
 80033cc:	f002 fb20 	bl	8005a10 <HAL_RCCEx_GetPeriphCLKFreq>
 80033d0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033da:	d125      	bne.n	8003428 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	3305      	adds	r3, #5
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	e01f      	b.n	8003446 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	461a      	mov	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003422:	3305      	adds	r3, #5
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	e00e      	b.n	8003446 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	3305      	adds	r3, #5
 8003444:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4a5c      	ldr	r2, [pc, #368]	; (80035bc <HAL_I2S_Init+0x270>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e003      	b.n	8003474 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800346c:	2302      	movs	r3, #2
 800346e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d902      	bls.n	8003480 <HAL_I2S_Init+0x134>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	2bff      	cmp	r3, #255	; 0xff
 800347e:	d907      	bls.n	8003490 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	f043 0210 	orr.w	r2, r3, #16
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e08f      	b.n	80035b0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	ea42 0103 	orr.w	r1, r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034ae:	f023 030f 	bic.w	r3, r3, #15
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6851      	ldr	r1, [r2, #4]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68d2      	ldr	r2, [r2, #12]
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6992      	ldr	r2, [r2, #24]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d161      	bne.n	80035a0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a38      	ldr	r2, [pc, #224]	; (80035c0 <HAL_I2S_Init+0x274>)
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a37      	ldr	r2, [pc, #220]	; (80035c4 <HAL_I2S_Init+0x278>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_I2S_Init+0x1a4>
 80034ec:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <HAL_I2S_Init+0x27c>)
 80034ee:	e001      	b.n	80034f4 <HAL_I2S_Init+0x1a8>
 80034f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	4932      	ldr	r1, [pc, #200]	; (80035c4 <HAL_I2S_Init+0x278>)
 80034fc:	428a      	cmp	r2, r1
 80034fe:	d101      	bne.n	8003504 <HAL_I2S_Init+0x1b8>
 8003500:	4a31      	ldr	r2, [pc, #196]	; (80035c8 <HAL_I2S_Init+0x27c>)
 8003502:	e001      	b.n	8003508 <HAL_I2S_Init+0x1bc>
 8003504:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003508:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800350c:	f023 030f 	bic.w	r3, r3, #15
 8003510:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <HAL_I2S_Init+0x278>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_I2S_Init+0x1d4>
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <HAL_I2S_Init+0x27c>)
 800351e:	e001      	b.n	8003524 <HAL_I2S_Init+0x1d8>
 8003520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003524:	2202      	movs	r2, #2
 8003526:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <HAL_I2S_Init+0x278>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_I2S_Init+0x1ea>
 8003532:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_I2S_Init+0x27c>)
 8003534:	e001      	b.n	800353a <HAL_I2S_Init+0x1ee>
 8003536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003546:	d003      	beq.n	8003550 <HAL_I2S_Init+0x204>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	e001      	b.n	800355c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	b299      	uxth	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003572:	4303      	orrs	r3, r0
 8003574:	b29b      	uxth	r3, r3
 8003576:	430b      	orrs	r3, r1
 8003578:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800357a:	4313      	orrs	r3, r2
 800357c:	b29a      	uxth	r2, r3
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	4313      	orrs	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003588:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <HAL_I2S_Init+0x278>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_I2S_Init+0x24c>
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_I2S_Init+0x27c>)
 8003596:	e001      	b.n	800359c <HAL_I2S_Init+0x250>
 8003598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359c:	897a      	ldrh	r2, [r7, #10]
 800359e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	080036c3 	.word	0x080036c3
 80035bc:	cccccccd 	.word	0xcccccccd
 80035c0:	080037d9 	.word	0x080037d9
 80035c4:	40003800 	.word	0x40003800
 80035c8:	40003400 	.word	0x40003400

080035cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c9a      	adds	r2, r3, #2
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10e      	bne.n	800365c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800364c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ffb8 	bl	80035cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	b292      	uxth	r2, r2
 8003678:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	1c9a      	adds	r2, r3, #2
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10e      	bne.n	80036ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff93 	bl	80035e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d13a      	bne.n	8003754 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d109      	bne.n	80036fc <I2S_IRQHandler+0x3a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d102      	bne.n	80036fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ffb4 	bl	8003664 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d126      	bne.n	8003754 <I2S_IRQHandler+0x92>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b20      	cmp	r3, #32
 8003712:	d11f      	bne.n	8003754 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003722:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f043 0202 	orr.w	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff50 	bl	80035f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b03      	cmp	r3, #3
 800375e:	d136      	bne.n	80037ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b02      	cmp	r3, #2
 8003768:	d109      	bne.n	800377e <I2S_IRQHandler+0xbc>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d102      	bne.n	800377e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff45 	bl	8003608 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d122      	bne.n	80037ce <I2S_IRQHandler+0x10c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d11b      	bne.n	80037ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	f043 0204 	orr.w	r2, r3, #4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff13 	bl	80035f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4aa2      	ldr	r2, [pc, #648]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037f2:	4ba2      	ldr	r3, [pc, #648]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037f4:	e001      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a9b      	ldr	r2, [pc, #620]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003810:	4b9a      	ldr	r3, [pc, #616]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003812:	e001      	b.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003824:	d004      	beq.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 8099 	bne.w	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f925 	bl	8003a94 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f9c8 	bl	8003bf4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d13a      	bne.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d035      	beq.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7e      	ldr	r2, [pc, #504]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003882:	4b7e      	ldr	r3, [pc, #504]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003884:	e001      	b.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4979      	ldr	r1, [pc, #484]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003892:	428b      	cmp	r3, r1
 8003894:	d101      	bne.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003896:	4b79      	ldr	r3, [pc, #484]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003898:	e001      	b.n	800389e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800389a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fe88 	bl	80035f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	f040 80be 	bne.w	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80b8 	beq.w	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a59      	ldr	r2, [pc, #356]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003918:	e001      	b.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800391a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4954      	ldr	r1, [pc, #336]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003926:	428b      	cmp	r3, r1
 8003928:	d101      	bne.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800392a:	4b54      	ldr	r3, [pc, #336]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800392c:	e001      	b.n	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800392e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003936:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f043 0204 	orr.w	r2, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fe4a 	bl	80035f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003960:	e084      	b.n	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d107      	bne.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8be 	bl	8003af8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8fd 	bl	8003b90 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d12f      	bne.n	8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d02a      	beq.n	8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2e      	ldr	r2, [pc, #184]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039c6:	e001      	b.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4929      	ldr	r1, [pc, #164]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039d4:	428b      	cmp	r3, r1
 80039d6:	d101      	bne.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039da:	e001      	b.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f043 0202 	orr.w	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fdfa 	bl	80035f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d131      	bne.n	8003a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02c      	beq.n	8003a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a20:	e001      	b.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4912      	ldr	r1, [pc, #72]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a2e:	428b      	cmp	r3, r1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a34:	e001      	b.n	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a4e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f043 0204 	orr.w	r2, r3, #4
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fdc5 	bl	80035f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a6a:	e000      	b.n	8003a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a6c:	bf00      	nop
}
 8003a6e:	bf00      	nop
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40003800 	.word	0x40003800
 8003a7c:	40003400 	.word	0x40003400

08003a80 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c99      	adds	r1, r3, #2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6251      	str	r1, [r2, #36]	; 0x24
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d113      	bne.n	8003aee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ffc9 	bl	8003a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c99      	adds	r1, r3, #2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6251      	str	r1, [r2, #36]	; 0x24
 8003b0a:	8819      	ldrh	r1, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <I2SEx_TxISR_I2SExt+0x90>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d101      	bne.n	8003b1a <I2SEx_TxISR_I2SExt+0x22>
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <I2SEx_TxISR_I2SExt+0x94>)
 8003b18:	e001      	b.n	8003b1e <I2SEx_TxISR_I2SExt+0x26>
 8003b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1e:	460a      	mov	r2, r1
 8003b20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d121      	bne.n	8003b7e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <I2SEx_TxISR_I2SExt+0x90>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <I2SEx_TxISR_I2SExt+0x50>
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <I2SEx_TxISR_I2SExt+0x94>)
 8003b46:	e001      	b.n	8003b4c <I2SEx_TxISR_I2SExt+0x54>
 8003b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	490d      	ldr	r1, [pc, #52]	; (8003b88 <I2SEx_TxISR_I2SExt+0x90>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d101      	bne.n	8003b5c <I2SEx_TxISR_I2SExt+0x64>
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <I2SEx_TxISR_I2SExt+0x94>)
 8003b5a:	e001      	b.n	8003b60 <I2SEx_TxISR_I2SExt+0x68>
 8003b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff81 	bl	8003a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40003800 	.word	0x40003800
 8003b8c:	40003400 	.word	0x40003400

08003b90 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68d8      	ldr	r0, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	1c99      	adds	r1, r3, #2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ba8:	b282      	uxth	r2, r0
 8003baa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d113      	bne.n	8003bec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bd2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ff4a 	bl	8003a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <I2SEx_RxISR_I2SExt+0x90>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <I2SEx_RxISR_I2SExt+0x16>
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <I2SEx_RxISR_I2SExt+0x94>)
 8003c08:	e001      	b.n	8003c0e <I2SEx_RxISR_I2SExt+0x1a>
 8003c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0e:	68d8      	ldr	r0, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	1c99      	adds	r1, r3, #2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c1a:	b282      	uxth	r2, r0
 8003c1c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d121      	bne.n	8003c7a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <I2SEx_RxISR_I2SExt+0x90>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <I2SEx_RxISR_I2SExt+0x50>
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <I2SEx_RxISR_I2SExt+0x94>)
 8003c42:	e001      	b.n	8003c48 <I2SEx_RxISR_I2SExt+0x54>
 8003c44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	490d      	ldr	r1, [pc, #52]	; (8003c84 <I2SEx_RxISR_I2SExt+0x90>)
 8003c50:	428b      	cmp	r3, r1
 8003c52:	d101      	bne.n	8003c58 <I2SEx_RxISR_I2SExt+0x64>
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <I2SEx_RxISR_I2SExt+0x94>)
 8003c56:	e001      	b.n	8003c5c <I2SEx_RxISR_I2SExt+0x68>
 8003c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c60:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff ff03 	bl	8003a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40003800 	.word	0x40003800
 8003c88:	40003400 	.word	0x40003400

08003c8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8e:	b08f      	sub	sp, #60	; 0x3c
 8003c90:	af0a      	add	r7, sp, #40	; 0x28
 8003c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e10f      	b.n	8003ebe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f008 f9c3 	bl	800c044 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f002 fc4a 	bl	8006576 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	687e      	ldr	r6, [r7, #4]
 8003cea:	466d      	mov	r5, sp
 8003cec:	f106 0410 	add.w	r4, r6, #16
 8003cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d00:	1d33      	adds	r3, r6, #4
 8003d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	f002 fb21 	bl	800634c <USB_CoreInit>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0d0      	b.n	8003ebe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 fc38 	bl	8006598 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e04a      	b.n	8003dc4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	333d      	adds	r3, #61	; 0x3d
 8003d3e:	2201      	movs	r2, #1
 8003d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	333c      	adds	r3, #60	; 0x3c
 8003d52:	7bfa      	ldrb	r2, [r7, #15]
 8003d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	b298      	uxth	r0, r3
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	3342      	adds	r3, #66	; 0x42
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	333f      	adds	r3, #63	; 0x3f
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	3344      	adds	r3, #68	; 0x44
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3348      	adds	r3, #72	; 0x48
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	3350      	adds	r3, #80	; 0x50
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d3af      	bcc.n	8003d2e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e044      	b.n	8003e5e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d3b5      	bcc.n	8003dd4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	687e      	ldr	r6, [r7, #4]
 8003e70:	466d      	mov	r5, sp
 8003e72:	f106 0410 	add.w	r4, r6, #16
 8003e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e82:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e86:	1d33      	adds	r3, r6, #4
 8003e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8a:	6838      	ldr	r0, [r7, #0]
 8003e8c:	f002 fbae 	bl	80065ec <USB_DevInit>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00d      	b.n	8003ebe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 fbf6 	bl	80076a8 <USB_DevDisconnect>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ec6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_PCD_Start+0x1c>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e020      	b.n	8003f24 <HAL_PCD_Start+0x5e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d109      	bne.n	8003f06 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d005      	beq.n	8003f06 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f002 fb22 	bl	8006554 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f003 fba6 	bl	8007666 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b08d      	sub	sp, #52	; 0x34
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f003 fc64 	bl	8007810 <USB_GetMode>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 839d 	bne.w	800468a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 fbc8 	bl	80076ea <USB_ReadInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8393 	beq.w	8004688 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f003 fbbf 	bl	80076ea <USB_ReadInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f002 0202 	and.w	r2, r2, #2
 8003f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f003 fbad 	bl	80076ea <USB_ReadInterrupts>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d161      	bne.n	800405e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0210 	bic.w	r2, r2, #16
 8003fa8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	0c5b      	lsrs	r3, r3, #17
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d124      	bne.n	8004020 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d035      	beq.n	800404e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	6a38      	ldr	r0, [r7, #32]
 8003ff6:	f003 fa13 	bl	8007420 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004006:	441a      	add	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	699a      	ldr	r2, [r3, #24]
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	091b      	lsrs	r3, r3, #4
 8004014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004018:	441a      	add	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	619a      	str	r2, [r3, #24]
 800401e:	e016      	b.n	800404e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	0c5b      	lsrs	r3, r3, #17
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	2b06      	cmp	r3, #6
 800402a:	d110      	bne.n	800404e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004032:	2208      	movs	r2, #8
 8004034:	4619      	mov	r1, r3
 8004036:	6a38      	ldr	r0, [r7, #32]
 8004038:	f003 f9f2 	bl	8007420 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004048:	441a      	add	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699a      	ldr	r2, [r3, #24]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0210 	orr.w	r2, r2, #16
 800405c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f003 fb41 	bl	80076ea <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800406e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004072:	d16e      	bne.n	8004152 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f003 fb47 	bl	8007710 <USB_ReadDevAllOutEpInterrupt>
 8004082:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004084:	e062      	b.n	800414c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d057      	beq.n	8004140 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f003 fb6c 	bl	8007778 <USB_ReadDevOutEPInterrupt>
 80040a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00c      	beq.n	80040c6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2301      	movs	r3, #1
 80040bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fdb1 	bl	8004c28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040dc:	461a      	mov	r2, r3
 80040de:	2308      	movs	r3, #8
 80040e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 feab 	bl	8004e40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	461a      	mov	r2, r3
 8004102:	2310      	movs	r3, #16
 8004104:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	461a      	mov	r2, r3
 800411e:	2320      	movs	r3, #32
 8004120:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	461a      	mov	r2, r3
 800413a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800413e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	3301      	adds	r3, #1
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	2b00      	cmp	r3, #0
 8004150:	d199      	bne.n	8004086 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f003 fac7 	bl	80076ea <USB_ReadInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004162:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004166:	f040 80c0 	bne.w	80042ea <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f003 fae8 	bl	8007744 <USB_ReadDevAllInEpInterrupt>
 8004174:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800417a:	e0b2      	b.n	80042e2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80a7 	beq.w	80042d6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f003 fb0e 	bl	80077b4 <USB_ReadDevInEPInterrupt>
 8004198:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d057      	beq.n	8004254 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	2201      	movs	r2, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	69f9      	ldr	r1, [r7, #28]
 80041c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c4:	4013      	ands	r3, r2
 80041c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	461a      	mov	r2, r3
 80041d6:	2301      	movs	r3, #1
 80041d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d132      	bne.n	8004248 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3348      	adds	r3, #72	; 0x48
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4403      	add	r3, r0
 8004202:	3344      	adds	r3, #68	; 0x44
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4419      	add	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4403      	add	r3, r0
 8004216:	3348      	adds	r3, #72	; 0x48
 8004218:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d113      	bne.n	8004248 <HAL_PCD_IRQHandler+0x31c>
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	3350      	adds	r3, #80	; 0x50
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004240:	461a      	mov	r2, r3
 8004242:	2101      	movs	r1, #1
 8004244:	f003 fb16 	bl	8007874 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	b2db      	uxtb	r3, r3
 800424c:	4619      	mov	r1, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f007 ff87 	bl	800c162 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	461a      	mov	r2, r3
 800426c:	2308      	movs	r3, #8
 800426e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	461a      	mov	r2, r3
 8004288:	2310      	movs	r3, #16
 800428a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a2:	461a      	mov	r2, r3
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	461a      	mov	r2, r3
 80042c0:	2302      	movs	r3, #2
 80042c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fc1b 	bl	8004b0c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	3301      	adds	r3, #1
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f47f af49 	bne.w	800417c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f003 f9fb 	bl	80076ea <USB_ReadInterrupts>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042fe:	d122      	bne.n	8004346 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004326:	2100      	movs	r1, #0
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fe27 	bl	8004f7c <HAL_PCDEx_LPM_Callback>
 800432e:	e002      	b.n	8004336 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f007 ff83 	bl	800c23c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f003 f9cd 	bl	80076ea <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435a:	d112      	bne.n	8004382 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d102      	bne.n	8004372 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f007 ff3f 	bl	800c1f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004380:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f003 f9af 	bl	80076ea <USB_ReadInterrupts>
 800438c:	4603      	mov	r3, r0
 800438e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004396:	f040 80c7 	bne.w	8004528 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2110      	movs	r1, #16
 80043b4:	4618      	mov	r0, r3
 80043b6:	f002 fa7d 	bl	80068b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ba:	2300      	movs	r3, #0
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043be:	e056      	b.n	800446e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	461a      	mov	r2, r3
 80043ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043f2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004412:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004426:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004446:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004462:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004466:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	3301      	adds	r3, #1
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004474:	429a      	cmp	r2, r3
 8004476:	d3a3      	bcc.n	80043c0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004486:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800448a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a4:	f043 030b 	orr.w	r3, r3, #11
 80044a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ba:	f043 030b 	orr.w	r3, r3, #11
 80044be:	6453      	str	r3, [r2, #68]	; 0x44
 80044c0:	e015      	b.n	80044ee <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80044d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e8:	f043 030b 	orr.w	r3, r3, #11
 80044ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004500:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004512:	461a      	mov	r2, r3
 8004514:	f003 f9ae 	bl	8007874 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f003 f8dc 	bl	80076ea <USB_ReadInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453c:	d124      	bne.n	8004588 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f003 f972 	bl	800782c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f002 fa12 	bl	8006976 <USB_GetDevSpeed>
 8004552:	4603      	mov	r3, r0
 8004554:	461a      	mov	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681c      	ldr	r4, [r3, #0]
 800455e:	f001 f947 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8004562:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	4620      	mov	r0, r4
 800456e:	f001 ff4f 	bl	8006410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f007 fe1d 	bl	800c1b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004586:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f003 f8ac 	bl	80076ea <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d10a      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f007 fdfa 	bl	800c196 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f002 0208 	and.w	r2, r2, #8
 80045b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 f897 	bl	80076ea <USB_ReadInterrupts>
 80045bc:	4603      	mov	r3, r0
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c6:	d10f      	bne.n	80045e8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	4619      	mov	r1, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f007 fe52 	bl	800c27c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f003 f87c 	bl	80076ea <USB_ReadInterrupts>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045fc:	d10f      	bne.n	800461e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f007 fe25 	bl	800c258 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800461c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f003 f861 	bl	80076ea <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d10a      	bne.n	800464a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f007 fe33 	bl	800c2a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f003 f84b 	bl	80076ea <USB_ReadInterrupts>
 8004654:	4603      	mov	r3, r0
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b04      	cmp	r3, #4
 800465c:	d115      	bne.n	800468a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f007 fe23 	bl	800c2bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	e000      	b.n	800468a <HAL_PCD_IRQHandler+0x75e>
      return;
 8004688:	bf00      	nop
    }
  }
}
 800468a:	3734      	adds	r7, #52	; 0x34
 800468c:	46bd      	mov	sp, r7
 800468e:	bd90      	pop	{r4, r7, pc}

08004690 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_PCD_SetAddress+0x1a>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e013      	b.n	80046d2 <HAL_PCD_SetAddress+0x42>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f002 ffa9 	bl	800761a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	461a      	mov	r2, r3
 80046e8:	4603      	mov	r3, r0
 80046ea:	70fb      	strb	r3, [r7, #3]
 80046ec:	460b      	mov	r3, r1
 80046ee:	803b      	strh	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da0f      	bge.n	8004720 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	3338      	adds	r3, #56	; 0x38
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	3304      	adds	r3, #4
 8004716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	705a      	strb	r2, [r3, #1]
 800471e:	e00f      	b.n	8004740 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	f003 020f 	and.w	r2, r3, #15
 8004726:	4613      	mov	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	3304      	adds	r3, #4
 8004738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800474c:	883a      	ldrh	r2, [r7, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	78ba      	ldrb	r2, [r7, #2]
 8004756:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	785b      	ldrb	r3, [r3, #1]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800476a:	78bb      	ldrb	r3, [r7, #2]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d102      	bne.n	8004776 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_PCD_EP_Open+0xaa>
 8004780:	2302      	movs	r3, #2
 8004782:	e00e      	b.n	80047a2 <HAL_PCD_EP_Open+0xc8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	4618      	mov	r0, r3
 8004794:	f002 f914 	bl	80069c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80047a0:	7afb      	ldrb	r3, [r7, #11]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da0f      	bge.n	80047de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 020f 	and.w	r2, r3, #15
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	3338      	adds	r3, #56	; 0x38
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	3304      	adds	r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	705a      	strb	r2, [r3, #1]
 80047dc:	e00f      	b.n	80047fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_PCD_EP_Close+0x6e>
 8004814:	2302      	movs	r3, #2
 8004816:	e00e      	b.n	8004836 <HAL_PCD_EP_Close+0x8c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	4618      	mov	r0, r3
 8004828:	f002 f952 	bl	8006ad0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	460b      	mov	r3, r1
 800484c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800484e:	7afb      	ldrb	r3, [r7, #11]
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	3304      	adds	r3, #4
 8004866:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004880:	7afb      	ldrb	r3, [r7, #11]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	b2da      	uxtb	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d102      	bne.n	800489a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800489a:	7afb      	ldrb	r3, [r7, #11]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	f002 fc2d 	bl	8007110 <USB_EP0StartXfer>
 80048b6:	e008      	b.n	80048ca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	f002 f9df 	bl	8006c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	f003 020f 	and.w	r2, r3, #15
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	460b      	mov	r3, r1
 8004912:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004914:	7afb      	ldrb	r3, [r7, #11]
 8004916:	f003 020f 	and.w	r2, r3, #15
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	3338      	adds	r3, #56	; 0x38
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	3304      	adds	r3, #4
 800492a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2200      	movs	r2, #0
 800493c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2201      	movs	r2, #1
 8004942:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004944:	7afb      	ldrb	r3, [r7, #11]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	b2da      	uxtb	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d102      	bne.n	800495e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800495e:	7afb      	ldrb	r3, [r7, #11]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	f002 fbcb 	bl	8007110 <USB_EP0StartXfer>
 800497a:	e008      	b.n	800498e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	f002 f97d 	bl	8006c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 020f 	and.w	r2, r3, #15
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d901      	bls.n	80049b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e050      	b.n	8004a58 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da0f      	bge.n	80049de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	f003 020f 	and.w	r2, r3, #15
 80049c4:	4613      	mov	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	3338      	adds	r3, #56	; 0x38
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	705a      	strb	r2, [r3, #1]
 80049dc:	e00d      	b.n	80049fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	3304      	adds	r3, #4
 80049f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_PCD_EP_SetStall+0x82>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e01e      	b.n	8004a58 <HAL_PCD_EP_SetStall+0xc0>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68f9      	ldr	r1, [r7, #12]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f002 fd22 	bl	8007472 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	b2d9      	uxtb	r1, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f002 ff13 	bl	8007874 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	f003 020f 	and.w	r2, r3, #15
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d901      	bls.n	8004a7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e042      	b.n	8004b04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da0f      	bge.n	8004aa6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	f003 020f 	and.w	r2, r3, #15
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	3338      	adds	r3, #56	; 0x38
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	705a      	strb	r2, [r3, #1]
 8004aa4:	e00f      	b.n	8004ac6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_PCD_EP_ClrStall+0x86>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e00e      	b.n	8004b04 <HAL_PCD_EP_ClrStall+0xa4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f002 fd2a 	bl	800754e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	3338      	adds	r3, #56	; 0x38
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	3304      	adds	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d901      	bls.n	8004b44 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e06c      	b.n	8004c1e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d902      	bls.n	8004b60 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	3303      	adds	r3, #3
 8004b64:	089b      	lsrs	r3, r3, #2
 8004b66:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b68:	e02b      	b.n	8004bc2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d902      	bls.n	8004b86 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	3303      	adds	r3, #3
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68d9      	ldr	r1, [r3, #12]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	6978      	ldr	r0, [r7, #20]
 8004ba6:	f002 fc06 	bl	80073b6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d809      	bhi.n	8004bec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d203      	bcs.n	8004bec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1be      	bne.n	8004b6a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d811      	bhi.n	8004c1c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	2201      	movs	r2, #1
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	6939      	ldr	r1, [r7, #16]
 8004c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c18:	4013      	ands	r3, r2
 8004c1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	333c      	adds	r3, #60	; 0x3c
 8004c40:	3304      	adds	r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	f040 80a0 	bne.w	8004da0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d015      	beq.n	8004c96 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a72      	ldr	r2, [pc, #456]	; (8004e38 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	f240 80dd 	bls.w	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80d7 	beq.w	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c92:	6093      	str	r3, [r2, #8]
 8004c94:	e0cb      	b.n	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cac:	461a      	mov	r2, r3
 8004cae:	2320      	movs	r3, #32
 8004cb0:	6093      	str	r3, [r2, #8]
 8004cb2:	e0bc      	b.n	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 80b7 	bne.w	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a5d      	ldr	r2, [pc, #372]	; (8004e38 <PCD_EP_OutXfrComplete_int+0x210>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d90f      	bls.n	8004ce8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce4:	6093      	str	r3, [r2, #8]
 8004ce6:	e0a2      	b.n	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cfa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	0159      	lsls	r1, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	440b      	add	r3, r1
 8004d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004d0e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4403      	add	r3, r0
 8004d1e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d22:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d36:	6819      	ldr	r1, [r3, #0]
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4403      	add	r3, r0
 8004d46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4419      	add	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4403      	add	r3, r0
 8004d5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d60:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d114      	bne.n	8004d92 <PCD_EP_OutXfrComplete_int+0x16a>
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d108      	bne.n	8004d92 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	f002 fd71 	bl	8007874 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f007 f9c7 	bl	800c12c <HAL_PCD_DataOutStageCallback>
 8004d9e:	e046      	b.n	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <PCD_EP_OutXfrComplete_int+0x214>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d124      	bne.n	8004df2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc4:	6093      	str	r3, [r2, #8]
 8004dc6:	e032      	b.n	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	461a      	mov	r2, r3
 8004de0:	2320      	movs	r3, #32
 8004de2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f007 f99e 	bl	800c12c <HAL_PCD_DataOutStageCallback>
 8004df0:	e01d      	b.n	8004e2e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d114      	bne.n	8004e22 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d108      	bne.n	8004e22 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	f002 fd29 	bl	8007874 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f007 f97f 	bl	800c12c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	4f54300a 	.word	0x4f54300a
 8004e3c:	4f54310a 	.word	0x4f54310a

08004e40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	333c      	adds	r3, #60	; 0x3c
 8004e58:	3304      	adds	r3, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d90e      	bls.n	8004e94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f007 f937 	bl	800c108 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d90c      	bls.n	8004ebc <PCD_EP_OutSetupPacket_int+0x7c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d108      	bne.n	8004ebc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	f002 fcdc 	bl	8007874 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	4f54300a 	.word	0x4f54300a

08004ecc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004eea:	883b      	ldrh	r3, [r7, #0]
 8004eec:	0419      	lsls	r1, r3, #16
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef8:	e028      	b.n	8004f4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	4413      	add	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e00d      	b.n	8004f2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	3340      	adds	r3, #64	; 0x40
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4413      	add	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	3301      	adds	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3ec      	bcc.n	8004f0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f34:	883b      	ldrh	r3, [r7, #0]
 8004f36:	0418      	lsls	r0, r3, #16
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	4302      	orrs	r2, r0
 8004f44:	3340      	adds	r3, #64	; 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e25b      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d075      	beq.n	800509e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fb2:	4ba3      	ldr	r3, [pc, #652]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fbe:	4ba0      	ldr	r3, [pc, #640]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d112      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fca:	4b9d      	ldr	r3, [pc, #628]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd8:	4b99      	ldr	r3, [pc, #612]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d05b      	beq.n	800509c <HAL_RCC_OscConfig+0x108>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d157      	bne.n	800509c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e236      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff8:	d106      	bne.n	8005008 <HAL_RCC_OscConfig+0x74>
 8004ffa:	4b91      	ldr	r3, [pc, #580]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a90      	ldr	r2, [pc, #576]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e01d      	b.n	8005044 <HAL_RCC_OscConfig+0xb0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x98>
 8005012:	4b8b      	ldr	r3, [pc, #556]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a8a      	ldr	r2, [pc, #552]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b88      	ldr	r3, [pc, #544]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a87      	ldr	r2, [pc, #540]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e00b      	b.n	8005044 <HAL_RCC_OscConfig+0xb0>
 800502c:	4b84      	ldr	r3, [pc, #528]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a83      	ldr	r2, [pc, #524]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	4b81      	ldr	r3, [pc, #516]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a80      	ldr	r2, [pc, #512]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 800503e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d013      	beq.n	8005074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504c:	f7fc fe98 	bl	8001d80 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005054:	f7fc fe94 	bl	8001d80 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b64      	cmp	r3, #100	; 0x64
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1fb      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005066:	4b76      	ldr	r3, [pc, #472]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0xc0>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fc fe84 	bl	8001d80 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800507c:	f7fc fe80 	bl	8001d80 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	; 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e1e7      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508e:	4b6c      	ldr	r3, [pc, #432]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0xe8>
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d063      	beq.n	8005172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050aa:	4b65      	ldr	r3, [pc, #404]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b6:	4b62      	ldr	r3, [pc, #392]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d11c      	bne.n	80050fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c2:	4b5f      	ldr	r3, [pc, #380]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d116      	bne.n	80050fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	4b5c      	ldr	r3, [pc, #368]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_RCC_OscConfig+0x152>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e1bb      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e6:	4b56      	ldr	r3, [pc, #344]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4952      	ldr	r1, [pc, #328]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fa:	e03a      	b.n	8005172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005104:	4b4f      	ldr	r3, [pc, #316]	; (8005244 <HAL_RCC_OscConfig+0x2b0>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fc fe39 	bl	8001d80 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005112:	f7fc fe35 	bl	8001d80 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e19c      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005124:	4b46      	ldr	r3, [pc, #280]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	4b43      	ldr	r3, [pc, #268]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4940      	ldr	r1, [pc, #256]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]
 8005144:	e015      	b.n	8005172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005146:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <HAL_RCC_OscConfig+0x2b0>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fc fe18 	bl	8001d80 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005154:	f7fc fe14 	bl	8001d80 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e17b      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005166:	4b36      	ldr	r3, [pc, #216]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d030      	beq.n	80051e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005186:	4b30      	ldr	r3, [pc, #192]	; (8005248 <HAL_RCC_OscConfig+0x2b4>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fc fdf8 	bl	8001d80 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005194:	f7fc fdf4 	bl	8001d80 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e15b      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a6:	4b26      	ldr	r3, [pc, #152]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x200>
 80051b2:	e015      	b.n	80051e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b4:	4b24      	ldr	r3, [pc, #144]	; (8005248 <HAL_RCC_OscConfig+0x2b4>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7fc fde1 	bl	8001d80 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c2:	f7fc fddd 	bl	8001d80 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e144      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d4:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80051d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a0 	beq.w	800532e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b13      	ldr	r3, [pc, #76]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10f      	bne.n	800521e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	4a0e      	ldr	r2, [pc, #56]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520c:	6413      	str	r3, [r2, #64]	; 0x40
 800520e:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <HAL_RCC_OscConfig+0x2ac>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d121      	bne.n	800526e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a07      	ldr	r2, [pc, #28]	; (800524c <HAL_RCC_OscConfig+0x2b8>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005236:	f7fc fda3 	bl	8001d80 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	e011      	b.n	8005262 <HAL_RCC_OscConfig+0x2ce>
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
 8005244:	42470000 	.word	0x42470000
 8005248:	42470e80 	.word	0x42470e80
 800524c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005250:	f7fc fd96 	bl	8001d80 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0fd      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005262:	4b81      	ldr	r3, [pc, #516]	; (8005468 <HAL_RCC_OscConfig+0x4d4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d106      	bne.n	8005284 <HAL_RCC_OscConfig+0x2f0>
 8005276:	4b7d      	ldr	r3, [pc, #500]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	4a7c      	ldr	r2, [pc, #496]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	6713      	str	r3, [r2, #112]	; 0x70
 8005282:	e01c      	b.n	80052be <HAL_RCC_OscConfig+0x32a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b05      	cmp	r3, #5
 800528a:	d10c      	bne.n	80052a6 <HAL_RCC_OscConfig+0x312>
 800528c:	4b77      	ldr	r3, [pc, #476]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	4a76      	ldr	r2, [pc, #472]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 8005292:	f043 0304 	orr.w	r3, r3, #4
 8005296:	6713      	str	r3, [r2, #112]	; 0x70
 8005298:	4b74      	ldr	r3, [pc, #464]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529c:	4a73      	ldr	r2, [pc, #460]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
 80052a4:	e00b      	b.n	80052be <HAL_RCC_OscConfig+0x32a>
 80052a6:	4b71      	ldr	r3, [pc, #452]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	4a70      	ldr	r2, [pc, #448]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	6713      	str	r3, [r2, #112]	; 0x70
 80052b2:	4b6e      	ldr	r3, [pc, #440]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	4a6d      	ldr	r2, [pc, #436]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d015      	beq.n	80052f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c6:	f7fc fd5b 	bl	8001d80 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052cc:	e00a      	b.n	80052e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f7fc fd57 	bl	8001d80 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e0bc      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ee      	beq.n	80052ce <HAL_RCC_OscConfig+0x33a>
 80052f0:	e014      	b.n	800531c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f2:	f7fc fd45 	bl	8001d80 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f8:	e00a      	b.n	8005310 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fc fd41 	bl	8001d80 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e0a6      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005310:	4b56      	ldr	r3, [pc, #344]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1ee      	bne.n	80052fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d105      	bne.n	800532e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005322:	4b52      	ldr	r3, [pc, #328]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a51      	ldr	r2, [pc, #324]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 8005328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8092 	beq.w	800545c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005338:	4b4c      	ldr	r3, [pc, #304]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b08      	cmp	r3, #8
 8005342:	d05c      	beq.n	80053fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d141      	bne.n	80053d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534c:	4b48      	ldr	r3, [pc, #288]	; (8005470 <HAL_RCC_OscConfig+0x4dc>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005352:	f7fc fd15 	bl	8001d80 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535a:	f7fc fd11 	bl	8001d80 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e078      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536c:	4b3f      	ldr	r3, [pc, #252]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f0      	bne.n	800535a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	019b      	lsls	r3, r3, #6
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	3b01      	subs	r3, #1
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	4933      	ldr	r1, [pc, #204]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a2:	4b33      	ldr	r3, [pc, #204]	; (8005470 <HAL_RCC_OscConfig+0x4dc>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fc fcea 	bl	8001d80 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b0:	f7fc fce6 	bl	8001d80 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e04d      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c2:	4b2a      	ldr	r3, [pc, #168]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x41c>
 80053ce:	e045      	b.n	800545c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <HAL_RCC_OscConfig+0x4dc>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d6:	f7fc fcd3 	bl	8001d80 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053de:	f7fc fccf 	bl	8001d80 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e036      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f0:	4b1e      	ldr	r3, [pc, #120]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0x44a>
 80053fc:	e02e      	b.n	800545c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e029      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800540a:	4b18      	ldr	r3, [pc, #96]	; (800546c <HAL_RCC_OscConfig+0x4d8>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	429a      	cmp	r2, r3
 800541c:	d11c      	bne.n	8005458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d115      	bne.n	8005458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005432:	4013      	ands	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005438:	4293      	cmp	r3, r2
 800543a:	d10d      	bne.n	8005458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d106      	bne.n	8005458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40007000 	.word	0x40007000
 800546c:	40023800 	.word	0x40023800
 8005470:	42470060 	.word	0x42470060

08005474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0cc      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005488:	4b68      	ldr	r3, [pc, #416]	; (800562c <HAL_RCC_ClockConfig+0x1b8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d90c      	bls.n	80054b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005496:	4b65      	ldr	r3, [pc, #404]	; (800562c <HAL_RCC_ClockConfig+0x1b8>)
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b63      	ldr	r3, [pc, #396]	; (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0b8      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c8:	4b59      	ldr	r3, [pc, #356]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4a58      	ldr	r2, [pc, #352]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e0:	4b53      	ldr	r3, [pc, #332]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4a52      	ldr	r2, [pc, #328]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b50      	ldr	r3, [pc, #320]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	494d      	ldr	r1, [pc, #308]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d044      	beq.n	8005594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005512:	4b47      	ldr	r3, [pc, #284]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d119      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e07f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d003      	beq.n	8005532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552e:	2b03      	cmp	r3, #3
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005532:	4b3f      	ldr	r3, [pc, #252]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e06f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005542:	4b3b      	ldr	r3, [pc, #236]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e067      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005552:	4b37      	ldr	r3, [pc, #220]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f023 0203 	bic.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4934      	ldr	r1, [pc, #208]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	4313      	orrs	r3, r2
 8005562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005564:	f7fc fc0c 	bl	8001d80 <HAL_GetTick>
 8005568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556a:	e00a      	b.n	8005582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556c:	f7fc fc08 	bl	8001d80 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e04f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005582:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 020c 	and.w	r2, r3, #12
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	429a      	cmp	r2, r3
 8005592:	d1eb      	bne.n	800556c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005594:	4b25      	ldr	r3, [pc, #148]	; (800562c <HAL_RCC_ClockConfig+0x1b8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d20c      	bcs.n	80055bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a2:	4b22      	ldr	r3, [pc, #136]	; (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b20      	ldr	r3, [pc, #128]	; (800562c <HAL_RCC_ClockConfig+0x1b8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e032      	b.n	8005622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4916      	ldr	r1, [pc, #88]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e6:	4b12      	ldr	r3, [pc, #72]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	490e      	ldr	r1, [pc, #56]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055fa:	f000 f821 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 80055fe:	4601      	mov	r1, r0
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	5cd3      	ldrb	r3, [r2, r3]
 800560e:	fa21 f303 	lsr.w	r3, r1, r3
 8005612:	4a09      	ldr	r2, [pc, #36]	; (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fc fb6c 	bl	8001cf8 <HAL_InitTick>

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40023c00 	.word	0x40023c00
 8005630:	40023800 	.word	0x40023800
 8005634:	0800e85c 	.word	0x0800e85c
 8005638:	20000000 	.word	0x20000000
 800563c:	20000004 	.word	0x20000004

08005640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	2300      	movs	r3, #0
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005656:	4b63      	ldr	r3, [pc, #396]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b04      	cmp	r3, #4
 8005660:	d007      	beq.n	8005672 <HAL_RCC_GetSysClockFreq+0x32>
 8005662:	2b08      	cmp	r3, #8
 8005664:	d008      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x38>
 8005666:	2b00      	cmp	r3, #0
 8005668:	f040 80b4 	bne.w	80057d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800566c:	4b5e      	ldr	r3, [pc, #376]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800566e:	60bb      	str	r3, [r7, #8]
       break;
 8005670:	e0b3      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005672:	4b5e      	ldr	r3, [pc, #376]	; (80057ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005674:	60bb      	str	r3, [r7, #8]
      break;
 8005676:	e0b0      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005678:	4b5a      	ldr	r3, [pc, #360]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005680:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005682:	4b58      	ldr	r3, [pc, #352]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d04a      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568e:	4b55      	ldr	r3, [pc, #340]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	ea03 0501 	and.w	r5, r3, r1
 80056a4:	ea04 0602 	and.w	r6, r4, r2
 80056a8:	4629      	mov	r1, r5
 80056aa:	4632      	mov	r2, r6
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	0154      	lsls	r4, r2, #5
 80056b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056ba:	014b      	lsls	r3, r1, #5
 80056bc:	4619      	mov	r1, r3
 80056be:	4622      	mov	r2, r4
 80056c0:	1b49      	subs	r1, r1, r5
 80056c2:	eb62 0206 	sbc.w	r2, r2, r6
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	0194      	lsls	r4, r2, #6
 80056d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056d4:	018b      	lsls	r3, r1, #6
 80056d6:	1a5b      	subs	r3, r3, r1
 80056d8:	eb64 0402 	sbc.w	r4, r4, r2
 80056dc:	f04f 0100 	mov.w	r1, #0
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	00e2      	lsls	r2, r4, #3
 80056e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056ea:	00d9      	lsls	r1, r3, #3
 80056ec:	460b      	mov	r3, r1
 80056ee:	4614      	mov	r4, r2
 80056f0:	195b      	adds	r3, r3, r5
 80056f2:	eb44 0406 	adc.w	r4, r4, r6
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	0262      	lsls	r2, r4, #9
 8005700:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005704:	0259      	lsls	r1, r3, #9
 8005706:	460b      	mov	r3, r1
 8005708:	4614      	mov	r4, r2
 800570a:	4618      	mov	r0, r3
 800570c:	4621      	mov	r1, r4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f04f 0400 	mov.w	r4, #0
 8005714:	461a      	mov	r2, r3
 8005716:	4623      	mov	r3, r4
 8005718:	f7fb fa4e 	bl	8000bb8 <__aeabi_uldivmod>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e049      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005724:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	099b      	lsrs	r3, r3, #6
 800572a:	f04f 0400 	mov.w	r4, #0
 800572e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	ea03 0501 	and.w	r5, r3, r1
 800573a:	ea04 0602 	and.w	r6, r4, r2
 800573e:	4629      	mov	r1, r5
 8005740:	4632      	mov	r2, r6
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	f04f 0400 	mov.w	r4, #0
 800574a:	0154      	lsls	r4, r2, #5
 800574c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005750:	014b      	lsls	r3, r1, #5
 8005752:	4619      	mov	r1, r3
 8005754:	4622      	mov	r2, r4
 8005756:	1b49      	subs	r1, r1, r5
 8005758:	eb62 0206 	sbc.w	r2, r2, r6
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	f04f 0400 	mov.w	r4, #0
 8005764:	0194      	lsls	r4, r2, #6
 8005766:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800576a:	018b      	lsls	r3, r1, #6
 800576c:	1a5b      	subs	r3, r3, r1
 800576e:	eb64 0402 	sbc.w	r4, r4, r2
 8005772:	f04f 0100 	mov.w	r1, #0
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	00e2      	lsls	r2, r4, #3
 800577c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005780:	00d9      	lsls	r1, r3, #3
 8005782:	460b      	mov	r3, r1
 8005784:	4614      	mov	r4, r2
 8005786:	195b      	adds	r3, r3, r5
 8005788:	eb44 0406 	adc.w	r4, r4, r6
 800578c:	f04f 0100 	mov.w	r1, #0
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	02a2      	lsls	r2, r4, #10
 8005796:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800579a:	0299      	lsls	r1, r3, #10
 800579c:	460b      	mov	r3, r1
 800579e:	4614      	mov	r4, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	4621      	mov	r1, r4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f04f 0400 	mov.w	r4, #0
 80057aa:	461a      	mov	r2, r3
 80057ac:	4623      	mov	r3, r4
 80057ae:	f7fb fa03 	bl	8000bb8 <__aeabi_uldivmod>
 80057b2:	4603      	mov	r3, r0
 80057b4:	460c      	mov	r4, r1
 80057b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	3301      	adds	r3, #1
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	60bb      	str	r3, [r7, #8]
      break;
 80057d2:	e002      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057d6:	60bb      	str	r3, [r7, #8]
      break;
 80057d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057da:	68bb      	ldr	r3, [r7, #8]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e4:	40023800 	.word	0x40023800
 80057e8:	00f42400 	.word	0x00f42400
 80057ec:	007a1200 	.word	0x007a1200

080057f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <HAL_RCC_GetHCLKFreq+0x14>)
 80057f6:	681b      	ldr	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000

08005808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800580c:	f7ff fff0 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005810:	4601      	mov	r1, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4a03      	ldr	r2, [pc, #12]	; (800582c <HAL_RCC_GetPCLK1Freq+0x24>)
 800581e:	5cd3      	ldrb	r3, [r2, r3]
 8005820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	0800e86c 	.word	0x0800e86c

08005830 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005854:	2b00      	cmp	r3, #0
 8005856:	d038      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005858:	4b68      	ldr	r3, [pc, #416]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800585e:	f7fc fa8f 	bl	8001d80 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005866:	f7fc fa8b 	bl	8001d80 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e0bd      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005878:	4b61      	ldr	r3, [pc, #388]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1f0      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	071b      	lsls	r3, r3, #28
 8005896:	495a      	ldr	r1, [pc, #360]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800589e:	4b57      	ldr	r3, [pc, #348]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058a4:	f7fc fa6c 	bl	8001d80 <HAL_GetTick>
 80058a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058ac:	f7fc fa68 	bl	8001d80 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e09a      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058be:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8083 	beq.w	80059de <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	4b48      	ldr	r3, [pc, #288]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	4a47      	ldr	r2, [pc, #284]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6413      	str	r3, [r2, #64]	; 0x40
 80058e8:	4b45      	ldr	r3, [pc, #276]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058f4:	4b43      	ldr	r3, [pc, #268]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a42      	ldr	r2, [pc, #264]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005900:	f7fc fa3e 	bl	8001d80 <HAL_GetTick>
 8005904:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005906:	e008      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005908:	f7fc fa3a 	bl	8001d80 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e06c      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800591a:	4b3a      	ldr	r3, [pc, #232]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005926:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02f      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	429a      	cmp	r2, r3
 8005942:	d028      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005944:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800594e:	4b2e      	ldr	r3, [pc, #184]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005950:	2201      	movs	r2, #1
 8005952:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005954:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800595a:	4a29      	ldr	r2, [pc, #164]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	d114      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800596c:	f7fc fa08 	bl	8001d80 <HAL_GetTick>
 8005970:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005972:	e00a      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005974:	f7fc fa04 	bl	8001d80 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e034      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598a:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0ee      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a2:	d10d      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80059a4:	4b16      	ldr	r3, [pc, #88]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b8:	4911      	ldr	r1, [pc, #68]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]
 80059be:	e005      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059ca:	6093      	str	r3, [r2, #8]
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d8:	4909      	ldr	r1, [pc, #36]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	7d1a      	ldrb	r2, [r3, #20]
 80059ee:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80059f0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	42470068 	.word	0x42470068
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40007000 	.word	0x40007000
 8005a08:	42470e40 	.word	0x42470e40
 8005a0c:	424711e0 	.word	0x424711e0

08005a10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d13f      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a36:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d131      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a42:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a44:	617b      	str	r3, [r7, #20]
          break;
 8005a46:	e031      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a54:	d109      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a56:	4b19      	ldr	r3, [pc, #100]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a60:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	e008      	b.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a82:	099b      	lsrs	r3, r3, #6
 8005a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a96:	0f1b      	lsrs	r3, r3, #28
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	617b      	str	r3, [r7, #20]
          break;
 8005aa4:	e002      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
          break;
 8005aaa:	bf00      	nop
        }
      }
      break;
 8005aac:	bf00      	nop
    }
  }
  return frequency;
 8005aae:	697b      	ldr	r3, [r7, #20]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	00bb8000 	.word	0x00bb8000
 8005ac4:	007a1200 	.word	0x007a1200
 8005ac8:	00f42400 	.word	0x00f42400

08005acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e056      	b.n	8005b8c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7fb ffb7 	bl	8001a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b14:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	ea42 0103 	orr.w	r1, r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	f003 0104 	and.w	r1, r3, #4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e01d      	b.n	8005be2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fb ff9e 	bl	8001afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f000 fa1e 	bl	8006014 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d007      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d122      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d11b      	bne.n	8005c8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f06f 0202 	mvn.w	r2, #2
 8005c5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9af 	bl	8005fd8 <HAL_TIM_IC_CaptureCallback>
 8005c7a:	e005      	b.n	8005c88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f9a1 	bl	8005fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9b2 	bl	8005fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d122      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d11b      	bne.n	8005ce2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f06f 0204 	mvn.w	r2, #4
 8005cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f985 	bl	8005fd8 <HAL_TIM_IC_CaptureCallback>
 8005cce:	e005      	b.n	8005cdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f977 	bl	8005fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f988 	bl	8005fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d122      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d11b      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f06f 0208 	mvn.w	r2, #8
 8005d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f95b 	bl	8005fd8 <HAL_TIM_IC_CaptureCallback>
 8005d22:	e005      	b.n	8005d30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f94d 	bl	8005fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f95e 	bl	8005fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d122      	bne.n	8005d8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d11b      	bne.n	8005d8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f06f 0210 	mvn.w	r2, #16
 8005d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2208      	movs	r2, #8
 8005d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f931 	bl	8005fd8 <HAL_TIM_IC_CaptureCallback>
 8005d76:	e005      	b.n	8005d84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f923 	bl	8005fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f934 	bl	8005fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d10e      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d107      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0201 	mvn.w	r2, #1
 8005dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f8fd 	bl	8005fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	2b80      	cmp	r3, #128	; 0x80
 8005dc2:	d10e      	bne.n	8005de2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b80      	cmp	r3, #128	; 0x80
 8005dd0:	d107      	bne.n	8005de2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 faab 	bl	8006338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d10e      	bne.n	8005e0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfa:	2b40      	cmp	r3, #64	; 0x40
 8005dfc:	d107      	bne.n	8005e0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f8f9 	bl	8006000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d10e      	bne.n	8005e3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d107      	bne.n	8005e3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f06f 0220 	mvn.w	r2, #32
 8005e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa75 	bl	8006324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_TIM_ConfigClockSource+0x18>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e0a6      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x166>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e78:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e80:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d067      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x120>
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d80b      	bhi.n	8005eae <HAL_TIM_ConfigClockSource+0x6c>
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d073      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x140>
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d802      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x62>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d06f      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ea2:	e078      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d06c      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x140>
 8005ea8:	2b30      	cmp	r3, #48	; 0x30
 8005eaa:	d06a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005eac:	e073      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eae:	2b70      	cmp	r3, #112	; 0x70
 8005eb0:	d00d      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0x8c>
 8005eb2:	2b70      	cmp	r3, #112	; 0x70
 8005eb4:	d804      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x7e>
 8005eb6:	2b50      	cmp	r3, #80	; 0x50
 8005eb8:	d033      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0xe0>
 8005eba:	2b60      	cmp	r3, #96	; 0x60
 8005ebc:	d041      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005ebe:	e06a      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec4:	d066      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0x152>
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eca:	d017      	beq.n	8005efc <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005ecc:	e063      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6899      	ldr	r1, [r3, #8]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f000 f993 	bl	8006208 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ef0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	609a      	str	r2, [r3, #8]
      break;
 8005efa:	e04c      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6899      	ldr	r1, [r3, #8]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f000 f97c 	bl	8006208 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1e:	609a      	str	r2, [r3, #8]
      break;
 8005f20:	e039      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6859      	ldr	r1, [r3, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f000 f8f0 	bl	8006114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2150      	movs	r1, #80	; 0x50
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f949 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f40:	e029      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 f90f 	bl	8006172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2160      	movs	r1, #96	; 0x60
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f939 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f60:	e019      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 f8d0 	bl	8006114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2140      	movs	r1, #64	; 0x40
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f929 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e009      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f000 f920 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f92:	e000      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a34      	ldr	r2, [pc, #208]	; (80060f8 <TIM_Base_SetConfig+0xe4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_Base_SetConfig+0x38>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006032:	d00b      	beq.n	800604c <TIM_Base_SetConfig+0x38>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a31      	ldr	r2, [pc, #196]	; (80060fc <TIM_Base_SetConfig+0xe8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_Base_SetConfig+0x38>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a30      	ldr	r2, [pc, #192]	; (8006100 <TIM_Base_SetConfig+0xec>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0x38>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <TIM_Base_SetConfig+0xf0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d108      	bne.n	800605e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <TIM_Base_SetConfig+0xe4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01b      	beq.n	800609e <TIM_Base_SetConfig+0x8a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606c:	d017      	beq.n	800609e <TIM_Base_SetConfig+0x8a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a22      	ldr	r2, [pc, #136]	; (80060fc <TIM_Base_SetConfig+0xe8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <TIM_Base_SetConfig+0x8a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a21      	ldr	r2, [pc, #132]	; (8006100 <TIM_Base_SetConfig+0xec>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00f      	beq.n	800609e <TIM_Base_SetConfig+0x8a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a20      	ldr	r2, [pc, #128]	; (8006104 <TIM_Base_SetConfig+0xf0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00b      	beq.n	800609e <TIM_Base_SetConfig+0x8a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1f      	ldr	r2, [pc, #124]	; (8006108 <TIM_Base_SetConfig+0xf4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d007      	beq.n	800609e <TIM_Base_SetConfig+0x8a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1e      	ldr	r2, [pc, #120]	; (800610c <TIM_Base_SetConfig+0xf8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_Base_SetConfig+0x8a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <TIM_Base_SetConfig+0xfc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d108      	bne.n	80060b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a08      	ldr	r2, [pc, #32]	; (80060f8 <TIM_Base_SetConfig+0xe4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d103      	bne.n	80060e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	615a      	str	r2, [r3, #20]
}
 80060ea:	bf00      	nop
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800
 8006104:	40000c00 	.word	0x40000c00
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800

08006114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f023 0201 	bic.w	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800613e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 030a 	bic.w	r3, r3, #10
 8006150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	621a      	str	r2, [r3, #32]
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006172:	b480      	push	{r7}
 8006174:	b087      	sub	sp, #28
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f023 0210 	bic.w	r2, r3, #16
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800619c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	031b      	lsls	r3, r3, #12
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f043 0307 	orr.w	r3, r3, #7
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	609a      	str	r2, [r3, #8]
}
 80061fc:	bf00      	nop
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	021a      	lsls	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	431a      	orrs	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4313      	orrs	r3, r2
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	609a      	str	r2, [r3, #8]
}
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800625c:	2302      	movs	r3, #2
 800625e:	e050      	b.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1c      	ldr	r2, [pc, #112]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d018      	beq.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ac:	d013      	beq.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a18      	ldr	r2, [pc, #96]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a16      	ldr	r2, [pc, #88]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a15      	ldr	r2, [pc, #84]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a13      	ldr	r2, [pc, #76]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d10c      	bne.n	80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40010000 	.word	0x40010000
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40014000 	.word	0x40014000

08006324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800634c:	b084      	sub	sp, #16
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	f107 001c 	add.w	r0, r7, #28
 800635a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	2b01      	cmp	r3, #1
 8006362:	d122      	bne.n	80063aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800638c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d105      	bne.n	800639e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fac6 	bl	8007930 <USB_CoreReset>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
 80063a8:	e01a      	b.n	80063e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 faba 	bl	8007930 <USB_CoreReset>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
 80063d2:	e005      	b.n	80063e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10b      	bne.n	80063fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f043 0206 	orr.w	r2, r3, #6
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800640a:	b004      	add	sp, #16
 800640c:	4770      	bx	lr
	...

08006410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d165      	bne.n	80064f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4a41      	ldr	r2, [pc, #260]	; (800652c <USB_SetTurnaroundTime+0x11c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d906      	bls.n	800643a <USB_SetTurnaroundTime+0x2a>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a40      	ldr	r2, [pc, #256]	; (8006530 <USB_SetTurnaroundTime+0x120>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d802      	bhi.n	800643a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006434:	230f      	movs	r3, #15
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e062      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4a3c      	ldr	r2, [pc, #240]	; (8006530 <USB_SetTurnaroundTime+0x120>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d906      	bls.n	8006450 <USB_SetTurnaroundTime+0x40>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <USB_SetTurnaroundTime+0x124>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d802      	bhi.n	8006450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800644a:	230e      	movs	r3, #14
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e057      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4a38      	ldr	r2, [pc, #224]	; (8006534 <USB_SetTurnaroundTime+0x124>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d906      	bls.n	8006466 <USB_SetTurnaroundTime+0x56>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a37      	ldr	r2, [pc, #220]	; (8006538 <USB_SetTurnaroundTime+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d802      	bhi.n	8006466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006460:	230d      	movs	r3, #13
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e04c      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a33      	ldr	r2, [pc, #204]	; (8006538 <USB_SetTurnaroundTime+0x128>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d906      	bls.n	800647c <USB_SetTurnaroundTime+0x6c>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4a32      	ldr	r2, [pc, #200]	; (800653c <USB_SetTurnaroundTime+0x12c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d802      	bhi.n	800647c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006476:	230c      	movs	r3, #12
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	e041      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <USB_SetTurnaroundTime+0x12c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d906      	bls.n	8006492 <USB_SetTurnaroundTime+0x82>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <USB_SetTurnaroundTime+0x130>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d802      	bhi.n	8006492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800648c:	230b      	movs	r3, #11
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e036      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4a2a      	ldr	r2, [pc, #168]	; (8006540 <USB_SetTurnaroundTime+0x130>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d906      	bls.n	80064a8 <USB_SetTurnaroundTime+0x98>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4a29      	ldr	r2, [pc, #164]	; (8006544 <USB_SetTurnaroundTime+0x134>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d802      	bhi.n	80064a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064a2:	230a      	movs	r3, #10
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e02b      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4a26      	ldr	r2, [pc, #152]	; (8006544 <USB_SetTurnaroundTime+0x134>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d906      	bls.n	80064be <USB_SetTurnaroundTime+0xae>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4a25      	ldr	r2, [pc, #148]	; (8006548 <USB_SetTurnaroundTime+0x138>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d802      	bhi.n	80064be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064b8:	2309      	movs	r3, #9
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e020      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4a21      	ldr	r2, [pc, #132]	; (8006548 <USB_SetTurnaroundTime+0x138>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d906      	bls.n	80064d4 <USB_SetTurnaroundTime+0xc4>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4a20      	ldr	r2, [pc, #128]	; (800654c <USB_SetTurnaroundTime+0x13c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d802      	bhi.n	80064d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064ce:	2308      	movs	r3, #8
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e015      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a1d      	ldr	r2, [pc, #116]	; (800654c <USB_SetTurnaroundTime+0x13c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d906      	bls.n	80064ea <USB_SetTurnaroundTime+0xda>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <USB_SetTurnaroundTime+0x140>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d802      	bhi.n	80064ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064e4:	2307      	movs	r3, #7
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e00a      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064ea:	2306      	movs	r3, #6
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e007      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064f6:	2309      	movs	r3, #9
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e001      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064fc:	2309      	movs	r3, #9
 80064fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	029b      	lsls	r3, r3, #10
 8006514:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006518:	431a      	orrs	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	00d8acbf 	.word	0x00d8acbf
 8006530:	00e4e1bf 	.word	0x00e4e1bf
 8006534:	00f423ff 	.word	0x00f423ff
 8006538:	0106737f 	.word	0x0106737f
 800653c:	011a499f 	.word	0x011a499f
 8006540:	01312cff 	.word	0x01312cff
 8006544:	014ca43f 	.word	0x014ca43f
 8006548:	016e35ff 	.word	0x016e35ff
 800654c:	01a6ab1f 	.word	0x01a6ab1f
 8006550:	01e847ff 	.word	0x01e847ff

08006554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f043 0201 	orr.w	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d106      	bne.n	80065c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60da      	str	r2, [r3, #12]
 80065c2:	e00b      	b.n	80065dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]
 80065d6:	e001      	b.n	80065dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e003      	b.n	80065e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80065dc:	2032      	movs	r0, #50	; 0x32
 80065de:	f7fb fbdb 	bl	8001d98 <HAL_Delay>

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065ec:	b084      	sub	sp, #16
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b086      	sub	sp, #24
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	e009      	b.n	8006620 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	3340      	adds	r3, #64	; 0x40
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	2200      	movs	r2, #0
 8006618:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	3301      	adds	r3, #1
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b0e      	cmp	r3, #14
 8006624:	d9f2      	bls.n	800660c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d11c      	bne.n	8006666 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800663a:	f043 0302 	orr.w	r3, r3, #2
 800663e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38
 8006664:	e00b      	b.n	800667e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006684:	461a      	mov	r2, r3
 8006686:	2300      	movs	r3, #0
 8006688:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	4619      	mov	r1, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006698:	461a      	mov	r2, r3
 800669a:	680b      	ldr	r3, [r1, #0]
 800669c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d10c      	bne.n	80066be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066aa:	2100      	movs	r1, #0
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f949 	bl	8006944 <USB_SetDevSpeed>
 80066b2:	e008      	b.n	80066c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066b4:	2101      	movs	r1, #1
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f944 	bl	8006944 <USB_SetDevSpeed>
 80066bc:	e003      	b.n	80066c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066be:	2103      	movs	r1, #3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f93f 	bl	8006944 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066c6:	2110      	movs	r1, #16
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f8f3 	bl	80068b4 <USB_FlushTxFifo>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f911 	bl	8006900 <USB_FlushRxFifo>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	461a      	mov	r2, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006706:	461a      	mov	r2, r3
 8006708:	2300      	movs	r3, #0
 800670a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	e043      	b.n	800679a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006728:	d118      	bne.n	800675c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673c:	461a      	mov	r2, r3
 800673e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	e013      	b.n	800676e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	461a      	mov	r2, r3
 8006754:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e008      	b.n	800676e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	461a      	mov	r2, r3
 800676a:	2300      	movs	r3, #0
 800676c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677a:	461a      	mov	r2, r3
 800677c:	2300      	movs	r3, #0
 800677e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678c:	461a      	mov	r2, r3
 800678e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3301      	adds	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3b7      	bcc.n	8006712 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	e043      	b.n	8006830 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067be:	d118      	bne.n	80067f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d2:	461a      	mov	r2, r3
 80067d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e013      	b.n	8006804 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	461a      	mov	r2, r3
 80067ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	e008      	b.n	8006804 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fe:	461a      	mov	r2, r3
 8006800:	2300      	movs	r3, #0
 8006802:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	461a      	mov	r2, r3
 8006812:	2300      	movs	r3, #0
 8006814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006822:	461a      	mov	r2, r3
 8006824:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006828:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	3301      	adds	r3, #1
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	429a      	cmp	r2, r3
 8006836:	d3b7      	bcc.n	80067a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800684a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006858:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	2b00      	cmp	r3, #0
 800685e:	d105      	bne.n	800686c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f043 0210 	orr.w	r2, r3, #16
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699a      	ldr	r2, [r3, #24]
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <USB_DevInit+0x2c4>)
 8006872:	4313      	orrs	r3, r2
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f043 0208 	orr.w	r2, r3, #8
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800688a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d107      	bne.n	80068a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006898:	f043 0304 	orr.w	r3, r3, #4
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068ac:	b004      	add	sp, #16
 80068ae:	4770      	bx	lr
 80068b0:	803c3800 	.word	0x803c3800

080068b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	019b      	lsls	r3, r3, #6
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <USB_FlushTxFifo+0x48>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d901      	bls.n	80068e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e006      	b.n	80068ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d0f0      	beq.n	80068ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	00030d40 	.word	0x00030d40

08006900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2210      	movs	r2, #16
 8006910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3301      	adds	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <USB_FlushRxFifo+0x40>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e006      	b.n	8006932 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b10      	cmp	r3, #16
 800692e:	d0f0      	beq.n	8006912 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	00030d40 	.word	0x00030d40

08006944 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006964:	4313      	orrs	r3, r2
 8006966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006976:	b480      	push	{r7}
 8006978:	b087      	sub	sp, #28
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0306 	and.w	r3, r3, #6
 800698e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d102      	bne.n	800699c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006996:	2300      	movs	r3, #0
 8006998:	75fb      	strb	r3, [r7, #23]
 800699a:	e00a      	b.n	80069b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d002      	beq.n	80069a8 <USB_GetDevSpeed+0x32>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b06      	cmp	r3, #6
 80069a6:	d102      	bne.n	80069ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069a8:	2302      	movs	r3, #2
 80069aa:	75fb      	strb	r3, [r7, #23]
 80069ac:	e001      	b.n	80069b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069ae:	230f      	movs	r3, #15
 80069b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d13a      	bne.n	8006a52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	2101      	movs	r1, #1
 80069ee:	fa01 f303 	lsl.w	r3, r1, r3
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	68f9      	ldr	r1, [r7, #12]
 80069f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069fa:	4313      	orrs	r3, r2
 80069fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d155      	bne.n	8006ac0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	78db      	ldrb	r3, [r3, #3]
 8006a2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	059b      	lsls	r3, r3, #22
 8006a36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	e036      	b.n	8006ac0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a58:	69da      	ldr	r2, [r3, #28]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	2101      	movs	r1, #1
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d11a      	bne.n	8006ac0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	78db      	ldrb	r3, [r3, #3]
 8006aa4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006abe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d161      	bne.n	8006bb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b02:	d11f      	bne.n	8006b44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	2101      	movs	r1, #1
 8006b56:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b64:	4013      	ands	r3, r2
 8006b66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	2101      	movs	r1, #1
 8006b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	43db      	mvns	r3, r3
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	0159      	lsls	r1, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	440b      	add	r3, r1
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4b35      	ldr	r3, [pc, #212]	; (8006c80 <USB_DeactivateEndpoint+0x1b0>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	600b      	str	r3, [r1, #0]
 8006bae:	e060      	b.n	8006c72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc6:	d11f      	bne.n	8006c08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	0151      	lsls	r1, r2, #5
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	440a      	add	r2, r1
 8006bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006be6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	2101      	movs	r1, #1
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	43db      	mvns	r3, r3
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c28:	4013      	ands	r3, r2
 8006c2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c42:	041b      	lsls	r3, r3, #16
 8006c44:	43db      	mvns	r3, r3
 8006c46:	68f9      	ldr	r1, [r7, #12]
 8006c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	0159      	lsls	r1, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	440b      	add	r3, r1
 8006c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <USB_DeactivateEndpoint+0x1b4>)
 8006c6e:	4013      	ands	r3, r2
 8006c70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	ec337800 	.word	0xec337800
 8006c84:	eff37800 	.word	0xeff37800

08006c88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08a      	sub	sp, #40	; 0x28
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	f040 815c 	bne.w	8006f62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d132      	bne.n	8006d18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d10:	0cdb      	lsrs	r3, r3, #19
 8006d12:	04db      	lsls	r3, r3, #19
 8006d14:	6113      	str	r3, [r2, #16]
 8006d16:	e074      	b.n	8006e02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d32:	0cdb      	lsrs	r3, r3, #19
 8006d34:	04db      	lsls	r3, r3, #19
 8006d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6959      	ldr	r1, [r3, #20]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	440b      	add	r3, r1
 8006d74:	1e59      	subs	r1, r3, #1
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d7e:	04d9      	lsls	r1, r3, #19
 8006d80:	4b9d      	ldr	r3, [pc, #628]	; (8006ff8 <USB_EPStartXfer+0x370>)
 8006d82:	400b      	ands	r3, r1
 8006d84:	69b9      	ldr	r1, [r7, #24]
 8006d86:	0148      	lsls	r0, r1, #5
 8006d88:	69f9      	ldr	r1, [r7, #28]
 8006d8a:	4401      	add	r1, r0
 8006d8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d90:	4313      	orrs	r3, r2
 8006d92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	691a      	ldr	r2, [r3, #16]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006daa:	69b9      	ldr	r1, [r7, #24]
 8006dac:	0148      	lsls	r0, r1, #5
 8006dae:	69f9      	ldr	r1, [r7, #28]
 8006db0:	4401      	add	r1, r0
 8006db2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006db6:	4313      	orrs	r3, r2
 8006db8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	78db      	ldrb	r3, [r3, #3]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11f      	bne.n	8006e02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ddc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006de0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d14b      	bne.n	8006ea0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	78db      	ldrb	r3, [r3, #3]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d128      	bne.n	8006e7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d110      	bne.n	8006e5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	e00f      	b.n	8006e7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e12f      	b.n	8007100 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ebe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	78db      	ldrb	r3, [r3, #3]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d015      	beq.n	8006ef4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8117 	beq.w	8007100 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	634b      	str	r3, [r1, #52]	; 0x34
 8006ef2:	e105      	b.n	8007100 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d110      	bne.n	8006f26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	e00f      	b.n	8006f46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	68d9      	ldr	r1, [r3, #12]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	b298      	uxth	r0, r3
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	4603      	mov	r3, r0
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fa2b 	bl	80073b6 <USB_WritePacket>
 8006f60:	e0ce      	b.n	8007100 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7c:	0cdb      	lsrs	r3, r3, #19
 8006f7e:	04db      	lsls	r3, r3, #19
 8006f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fa4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d126      	bne.n	8006ffc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc4:	69b9      	ldr	r1, [r7, #24]
 8006fc6:	0148      	lsls	r0, r1, #5
 8006fc8:	69f9      	ldr	r1, [r7, #28]
 8006fca:	4401      	add	r1, r0
 8006fcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ff2:	6113      	str	r3, [r2, #16]
 8006ff4:	e036      	b.n	8007064 <USB_EPStartXfer+0x3dc>
 8006ff6:	bf00      	nop
 8006ff8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	695a      	ldr	r2, [r3, #20]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4413      	add	r3, r2
 8007006:	1e5a      	subs	r2, r3, #1
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007010:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	8afb      	ldrh	r3, [r7, #22]
 8007022:	04d9      	lsls	r1, r3, #19
 8007024:	4b39      	ldr	r3, [pc, #228]	; (800710c <USB_EPStartXfer+0x484>)
 8007026:	400b      	ands	r3, r1
 8007028:	69b9      	ldr	r1, [r7, #24]
 800702a:	0148      	lsls	r0, r1, #5
 800702c:	69f9      	ldr	r1, [r7, #28]
 800702e:	4401      	add	r1, r0
 8007030:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007034:	4313      	orrs	r3, r2
 8007036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007044:	691a      	ldr	r2, [r3, #16]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	8af9      	ldrh	r1, [r7, #22]
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007054:	69b9      	ldr	r1, [r7, #24]
 8007056:	0148      	lsls	r0, r1, #5
 8007058:	69f9      	ldr	r1, [r7, #28]
 800705a:	4401      	add	r1, r0
 800705c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007060:	4313      	orrs	r3, r2
 8007062:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d10d      	bne.n	8007086 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	68d9      	ldr	r1, [r3, #12]
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	460a      	mov	r2, r1
 8007084:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	78db      	ldrb	r3, [r3, #3]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d128      	bne.n	80070e0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709a:	2b00      	cmp	r3, #0
 800709c:	d110      	bne.n	80070c0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	e00f      	b.n	80070e0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3720      	adds	r7, #32
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	1ff80000 	.word	0x1ff80000

08007110 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b01      	cmp	r3, #1
 800712e:	f040 80cd 	bne.w	80072cc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d132      	bne.n	80071a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007154:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007158:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800715c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	440a      	add	r2, r1
 8007174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800717c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	440a      	add	r2, r1
 8007194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007198:	0cdb      	lsrs	r3, r3, #19
 800719a:	04db      	lsls	r3, r3, #19
 800719c:	6113      	str	r3, [r2, #16]
 800719e:	e04e      	b.n	800723e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ba:	0cdb      	lsrs	r3, r3, #19
 80071bc:	04db      	lsls	r3, r3, #19
 80071be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	695a      	ldr	r2, [r3, #20]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d903      	bls.n	80071f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	440a      	add	r2, r1
 800720e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800722e:	6939      	ldr	r1, [r7, #16]
 8007230:	0148      	lsls	r0, r1, #5
 8007232:	6979      	ldr	r1, [r7, #20]
 8007234:	4401      	add	r1, r0
 8007236:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800723a:	4313      	orrs	r3, r2
 800723c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d11e      	bne.n	8007282 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d009      	beq.n	8007260 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007258:	461a      	mov	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	e092      	b.n	80073a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d07e      	beq.n	80073a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	2101      	movs	r1, #1
 80072bc:	fa01 f303 	lsl.w	r3, r1, r3
 80072c0:	6979      	ldr	r1, [r7, #20]
 80072c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c6:	4313      	orrs	r3, r2
 80072c8:	634b      	str	r3, [r1, #52]	; 0x34
 80072ca:	e06d      	b.n	80073a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	0151      	lsls	r1, r2, #5
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	440a      	add	r2, r1
 80072e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e6:	0cdb      	lsrs	r3, r3, #19
 80072e8:	04db      	lsls	r3, r3, #19
 80072ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007306:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800730a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800730e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800733e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007356:	6939      	ldr	r1, [r7, #16]
 8007358:	0148      	lsls	r0, r1, #5
 800735a:	6979      	ldr	r1, [r7, #20]
 800735c:	4401      	add	r1, r0
 800735e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007362:	4313      	orrs	r3, r2
 8007364:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007366:	79fb      	ldrb	r3, [r7, #7]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d10d      	bne.n	8007388 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d009      	beq.n	8007388 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	68d9      	ldr	r1, [r3, #12]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007384:	460a      	mov	r2, r1
 8007386:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	0151      	lsls	r1, r2, #5
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	440a      	add	r2, r1
 800739e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b089      	sub	sp, #36	; 0x24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	4611      	mov	r1, r2
 80073c2:	461a      	mov	r2, r3
 80073c4:	460b      	mov	r3, r1
 80073c6:	71fb      	strb	r3, [r7, #7]
 80073c8:	4613      	mov	r3, r2
 80073ca:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80073d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11a      	bne.n	8007412 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073dc:	88bb      	ldrh	r3, [r7, #4]
 80073de:	3303      	adds	r3, #3
 80073e0:	089b      	lsrs	r3, r3, #2
 80073e2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073e4:	2300      	movs	r3, #0
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	e00f      	b.n	800740a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	031a      	lsls	r2, r3, #12
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f6:	461a      	mov	r2, r3
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	3304      	adds	r3, #4
 8007402:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	3301      	adds	r3, #1
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	429a      	cmp	r2, r3
 8007410:	d3eb      	bcc.n	80073ea <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3724      	adds	r7, #36	; 0x24
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007420:	b480      	push	{r7}
 8007422:	b089      	sub	sp, #36	; 0x24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4613      	mov	r3, r2
 800742c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007436:	88fb      	ldrh	r3, [r7, #6]
 8007438:	3303      	adds	r3, #3
 800743a:	089b      	lsrs	r3, r3, #2
 800743c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800743e:	2300      	movs	r3, #0
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	e00b      	b.n	800745c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	3304      	adds	r3, #4
 8007454:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	3301      	adds	r3, #1
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	429a      	cmp	r2, r3
 8007462:	d3ef      	bcc.n	8007444 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007464:	69fb      	ldr	r3, [r7, #28]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3724      	adds	r7, #36	; 0x24
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d12c      	bne.n	80074e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	db12      	blt.n	80074c6 <USB_EPSetStall+0x54>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00f      	beq.n	80074c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	e02b      	b.n	8007540 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	db12      	blt.n	8007520 <USB_EPSetStall+0xae>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00f      	beq.n	8007520 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800751e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	0151      	lsls	r1, r2, #5
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	440a      	add	r2, r1
 8007536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800753a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800753e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d128      	bne.n	80075bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007584:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007588:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	78db      	ldrb	r3, [r3, #3]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d003      	beq.n	800759a <USB_EPClearStall+0x4c>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	78db      	ldrb	r3, [r3, #3]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d138      	bne.n	800760c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	e027      	b.n	800760c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	78db      	ldrb	r3, [r3, #3]
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d003      	beq.n	80075ec <USB_EPClearStall+0x9e>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d10f      	bne.n	800760c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800761a:	b480      	push	{r7}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007638:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800763c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800764e:	68f9      	ldr	r1, [r7, #12]
 8007650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007654:	4313      	orrs	r3, r2
 8007656:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007694:	f023 0302 	bic.w	r3, r3, #2
 8007698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d6:	f043 0302 	orr.w	r3, r3, #2
 80076da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4013      	ands	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007702:	68fb      	ldr	r3, [r7, #12]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4013      	ands	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	0c1b      	lsrs	r3, r3, #16
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	4013      	ands	r3, r2
 8007766:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	b29b      	uxth	r3, r3
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	4013      	ands	r3, r2
 80077a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077a6:	68bb      	ldr	r3, [r7, #8]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	fa22 f303 	lsr.w	r3, r2, r3
 80077e4:	01db      	lsls	r3, r3, #7
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4013      	ands	r3, r2
 8007800:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007802:	68bb      	ldr	r3, [r7, #8]
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	f003 0301 	and.w	r3, r3, #1
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007846:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800784a:	f023 0307 	bic.w	r3, r3, #7
 800784e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800785e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007862:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
	...

08007874 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	460b      	mov	r3, r1
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	333c      	adds	r3, #60	; 0x3c
 800788a:	3304      	adds	r3, #4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4a26      	ldr	r2, [pc, #152]	; (800792c <USB_EP0_OutStart+0xb8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d90a      	bls.n	80078ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a8:	d101      	bne.n	80078ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e037      	b.n	800791e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	461a      	mov	r2, r3
 80078b6:	2300      	movs	r3, #0
 80078b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078dc:	f043 0318 	orr.w	r3, r3, #24
 80078e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80078f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078f6:	7afb      	ldrb	r3, [r7, #11]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d10f      	bne.n	800791c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007916:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800791a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	4f54300a 	.word	0x4f54300a

08007930 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a13      	ldr	r2, [pc, #76]	; (8007994 <USB_CoreReset+0x64>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e01b      	b.n	8007986 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	daf2      	bge.n	800793c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f043 0201 	orr.w	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4a09      	ldr	r2, [pc, #36]	; (8007994 <USB_CoreReset+0x64>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d901      	bls.n	8007978 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e006      	b.n	8007986 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b01      	cmp	r3, #1
 8007982:	d0f0      	beq.n	8007966 <USB_CoreReset+0x36>

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	00030d40 	.word	0x00030d40

08007998 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80079a8:	f004 fe76 	bl	800c698 <malloc>
 80079ac:	4603      	mov	r3, r0
 80079ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80079be:	2302      	movs	r3, #2
 80079c0:	e066      	b.n	8007a90 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7c1b      	ldrb	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d119      	bne.n	8007a06 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d6:	2202      	movs	r2, #2
 80079d8:	2181      	movs	r1, #129	; 0x81
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f004 fce3 	bl	800c3a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ea:	2202      	movs	r2, #2
 80079ec:	2101      	movs	r1, #1
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f004 fcd9 	bl	800c3a6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2210      	movs	r2, #16
 8007a00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007a04:	e016      	b.n	8007a34 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a06:	2340      	movs	r3, #64	; 0x40
 8007a08:	2202      	movs	r2, #2
 8007a0a:	2181      	movs	r1, #129	; 0x81
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f004 fcca 	bl	800c3a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a18:	2340      	movs	r3, #64	; 0x40
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f004 fcc1 	bl	800c3a6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a34:	2308      	movs	r3, #8
 8007a36:	2203      	movs	r2, #3
 8007a38:	2182      	movs	r1, #130	; 0x82
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f004 fcb3 	bl	800c3a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7c1b      	ldrb	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d109      	bne.n	8007a7e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a74:	2101      	movs	r1, #1
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f004 fd84 	bl	800c584 <USBD_LL_PrepareReceive>
 8007a7c:	e007      	b.n	8007a8e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a84:	2340      	movs	r3, #64	; 0x40
 8007a86:	2101      	movs	r1, #1
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f004 fd7b 	bl	800c584 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007aa8:	2181      	movs	r1, #129	; 0x81
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f004 fca1 	bl	800c3f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f004 fc9a 	bl	800c3f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ac6:	2182      	movs	r1, #130	; 0x82
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f004 fc92 	bl	800c3f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00e      	beq.n	8007b06 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af8:	4618      	mov	r0, r3
 8007afa:	f004 fdd5 	bl	800c6a8 <free>
    pdev->pClassData = NULL;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b20:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d03a      	beq.n	8007bb0 <USBD_CDC_Setup+0xa0>
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	f040 8097 	bne.w	8007c6e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	88db      	ldrh	r3, [r3, #6]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d029      	beq.n	8007b9c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	b25b      	sxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da11      	bge.n	8007b76 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007b5e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	88d2      	ldrh	r2, [r2, #6]
 8007b64:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b66:	6939      	ldr	r1, [r7, #16]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	88db      	ldrh	r3, [r3, #6]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 fa9d 	bl	80090ae <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007b74:	e082      	b.n	8007c7c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	785a      	ldrb	r2, [r3, #1]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	88db      	ldrh	r3, [r3, #6]
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b8c:	6939      	ldr	r1, [r7, #16]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	88db      	ldrh	r3, [r3, #6]
 8007b92:	461a      	mov	r2, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fab6 	bl	8009106 <USBD_CtlPrepareRx>
    break;
 8007b9a:	e06f      	b.n	8007c7c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	7850      	ldrb	r0, [r2, #1]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	4798      	blx	r3
    break;
 8007bae:	e065      	b.n	8007c7c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	785b      	ldrb	r3, [r3, #1]
 8007bb4:	2b0b      	cmp	r3, #11
 8007bb6:	d84f      	bhi.n	8007c58 <USBD_CDC_Setup+0x148>
 8007bb8:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <USBD_CDC_Setup+0xb0>)
 8007bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbe:	bf00      	nop
 8007bc0:	08007bf1 	.word	0x08007bf1
 8007bc4:	08007c67 	.word	0x08007c67
 8007bc8:	08007c59 	.word	0x08007c59
 8007bcc:	08007c59 	.word	0x08007c59
 8007bd0:	08007c59 	.word	0x08007c59
 8007bd4:	08007c59 	.word	0x08007c59
 8007bd8:	08007c59 	.word	0x08007c59
 8007bdc:	08007c59 	.word	0x08007c59
 8007be0:	08007c59 	.word	0x08007c59
 8007be4:	08007c59 	.word	0x08007c59
 8007be8:	08007c19 	.word	0x08007c19
 8007bec:	08007c41 	.word	0x08007c41
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d107      	bne.n	8007c0a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007bfa:	f107 030c 	add.w	r3, r7, #12
 8007bfe:	2202      	movs	r2, #2
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 fa53 	bl	80090ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007c08:	e030      	b.n	8007c6c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 f9dd 	bl	8008fcc <USBD_CtlError>
        ret = USBD_FAIL;
 8007c12:	2303      	movs	r3, #3
 8007c14:	75fb      	strb	r3, [r7, #23]
      break;
 8007c16:	e029      	b.n	8007c6c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d107      	bne.n	8007c32 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c22:	f107 030f 	add.w	r3, r7, #15
 8007c26:	2201      	movs	r2, #1
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 fa3f 	bl	80090ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007c30:	e01c      	b.n	8007c6c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 f9c9 	bl	8008fcc <USBD_CtlError>
        ret = USBD_FAIL;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c3e:	e015      	b.n	8007c6c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d00f      	beq.n	8007c6a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f9bd 	bl	8008fcc <USBD_CtlError>
        ret = USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007c56:	e008      	b.n	8007c6a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 f9b6 	bl	8008fcc <USBD_CtlError>
      ret = USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	75fb      	strb	r3, [r7, #23]
      break;
 8007c64:	e002      	b.n	8007c6c <USBD_CDC_Setup+0x15c>
      break;
 8007c66:	bf00      	nop
 8007c68:	e008      	b.n	8007c7c <USBD_CDC_Setup+0x16c>
      break;
 8007c6a:	bf00      	nop
    }
    break;
 8007c6c:	e006      	b.n	8007c7c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 f9ab 	bl	8008fcc <USBD_CtlError>
    ret = USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	75fb      	strb	r3, [r7, #23]
    break;
 8007c7a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop

08007c88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e049      	b.n	8007d3e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3318      	adds	r3, #24
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d029      	beq.n	8007d1c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	3318      	adds	r3, #24
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	78f9      	ldrb	r1, [r7, #3]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	1a5b      	subs	r3, r3, r1
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4403      	add	r3, r0
 8007ce8:	3344      	adds	r3, #68	; 0x44
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cf0:	fb03 f301 	mul.w	r3, r3, r1
 8007cf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d110      	bne.n	8007d1c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	440b      	add	r3, r1
 8007d08:	3318      	adds	r3, #24
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d0e:	78f9      	ldrb	r1, [r7, #3]
 8007d10:	2300      	movs	r3, #0
 8007d12:	2200      	movs	r2, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f004 fc14 	bl	800c542 <USBD_LL_Transmit>
 8007d1a:	e00f      	b.n	8007d3c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e015      	b.n	8007d94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f004 fc2a 	bl	800c5c6 <USBD_LL_GetRxDataSize>
 8007d72:	4602      	mov	r2, r0
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d8e:	4611      	mov	r1, r2
 8007d90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007daa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d015      	beq.n	8007de2 <USBD_CDC_EP0_RxReady+0x46>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007dbc:	2bff      	cmp	r3, #255	; 0xff
 8007dbe:	d010      	beq.n	8007de2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007dce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	22ff      	movs	r2, #255	; 0xff
 8007dde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2243      	movs	r2, #67	; 0x43
 8007df8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007dfa:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	20000094 	.word	0x20000094

08007e0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2243      	movs	r2, #67	; 0x43
 8007e18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007e1a:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	20000050 	.word	0x20000050

08007e2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2243      	movs	r2, #67	; 0x43
 8007e38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007e3a:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	200000d8 	.word	0x200000d8

08007e4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	220a      	movs	r2, #10
 8007e58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e5a:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	2000000c 	.word	0x2000000c

08007e6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e004      	b.n	8007e8a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ed8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007efe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f00:	2301      	movs	r3, #1
 8007f02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e01a      	b.n	8007f48 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d114      	bne.n	8007f46 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f3a:	2181      	movs	r1, #129	; 0x81
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f004 fb00 	bl	800c542 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e016      	b.n	8007f9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7c1b      	ldrb	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d109      	bne.n	8007f8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f80:	2101      	movs	r1, #1
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f004 fafe 	bl	800c584 <USBD_LL_PrepareReceive>
 8007f88:	e007      	b.n	8007f9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f90:	2340      	movs	r3, #64	; 0x40
 8007f92:	2101      	movs	r1, #1
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f004 faf5 	bl	800c584 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e025      	b.n	8008008 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	79fa      	ldrb	r2, [r7, #7]
 8007ffa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f004 f96b 	bl	800c2d8 <USBD_LL_Init>
 8008002:	4603      	mov	r3, r0
 8008004:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	e010      	b.n	800804a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	f107 020e 	add.w	r2, r7, #14
 800803c:	4610      	mov	r0, r2
 800803e:	4798      	blx	r3
 8008040:	4602      	mov	r2, r0
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f004 f988 	bl	800c370 <USBD_LL_Start>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800808c:	2303      	movs	r3, #3
 800808e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	4611      	mov	r1, r2
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
 80080aa:	4603      	mov	r3, r0
 80080ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	4611      	mov	r1, r2
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
  }

  return USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 ff2c 	bl	8008f58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800811c:	f003 031f 	and.w	r3, r3, #31
 8008120:	2b01      	cmp	r3, #1
 8008122:	d00e      	beq.n	8008142 <USBD_LL_SetupStage+0x5a>
 8008124:	2b01      	cmp	r3, #1
 8008126:	d302      	bcc.n	800812e <USBD_LL_SetupStage+0x46>
 8008128:	2b02      	cmp	r3, #2
 800812a:	d014      	beq.n	8008156 <USBD_LL_SetupStage+0x6e>
 800812c:	e01d      	b.n	800816a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa18 	bl	800856c <USBD_StdDevReq>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]
      break;
 8008140:	e020      	b.n	8008184 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa7c 	bl	8008648 <USBD_StdItfReq>
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]
      break;
 8008154:	e016      	b.n	8008184 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fab8 	bl	80086d4 <USBD_StdEPReq>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
      break;
 8008168:	e00c      	b.n	8008184 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008170:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008174:	b2db      	uxtb	r3, r3
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f004 f959 	bl	800c430 <USBD_LL_StallEP>
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]
      break;
 8008182:	bf00      	nop
  }

  return ret;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b086      	sub	sp, #24
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	460b      	mov	r3, r1
 8008198:	607a      	str	r2, [r7, #4]
 800819a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d137      	bne.n	8008212 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80081a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d14a      	bne.n	800824a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d913      	bls.n	80081e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	4293      	cmp	r3, r2
 80081d8:	bf28      	it	cs
 80081da:	4613      	movcs	r3, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 ffad 	bl	8009140 <USBD_CtlContinueRx>
 80081e6:	e030      	b.n	800824a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00a      	beq.n	800820a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d105      	bne.n	800820a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 ffa9 	bl	8009162 <USBD_CtlSendStatus>
 8008210:	e01b      	b.n	800824a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d013      	beq.n	8008246 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008224:	2b03      	cmp	r3, #3
 8008226:	d10e      	bne.n	8008246 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	7afa      	ldrb	r2, [r7, #11]
 8008232:	4611      	mov	r1, r2
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	4798      	blx	r3
 8008238:	4603      	mov	r3, r0
 800823a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	e002      	b.n	800824c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008246:	2303      	movs	r3, #3
 8008248:	e000      	b.n	800824c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	460b      	mov	r3, r1
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008262:	7afb      	ldrb	r3, [r7, #11]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d16a      	bne.n	800833e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3314      	adds	r3, #20
 800826c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008274:	2b02      	cmp	r3, #2
 8008276:	d155      	bne.n	8008324 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	429a      	cmp	r2, r3
 8008282:	d914      	bls.n	80082ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	1ad2      	subs	r2, r2, r3
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	461a      	mov	r2, r3
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 ff22 	bl	80090e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082a0:	2300      	movs	r3, #0
 80082a2:	2200      	movs	r2, #0
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f004 f96c 	bl	800c584 <USBD_LL_PrepareReceive>
 80082ac:	e03a      	b.n	8008324 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d11c      	bne.n	80082f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d316      	bcc.n	80082f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d20f      	bcs.n	80082f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082d4:	2200      	movs	r2, #0
 80082d6:	2100      	movs	r1, #0
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 ff03 	bl	80090e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082e6:	2300      	movs	r3, #0
 80082e8:	2200      	movs	r2, #0
 80082ea:	2100      	movs	r1, #0
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f004 f949 	bl	800c584 <USBD_LL_PrepareReceive>
 80082f2:	e017      	b.n	8008324 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008306:	2b03      	cmp	r3, #3
 8008308:	d105      	bne.n	8008316 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008316:	2180      	movs	r1, #128	; 0x80
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f004 f889 	bl	800c430 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 ff32 	bl	8009188 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800832a:	2b01      	cmp	r3, #1
 800832c:	d123      	bne.n	8008376 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fe9b 	bl	800806a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800833c:	e01b      	b.n	8008376 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d013      	beq.n	8008372 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008350:	2b03      	cmp	r3, #3
 8008352:	d10e      	bne.n	8008372 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	7afa      	ldrb	r2, [r7, #11]
 800835e:	4611      	mov	r1, r2
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	4798      	blx	r3
 8008364:	4603      	mov	r3, r0
 8008366:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	e002      	b.n	8008378 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008372:	2303      	movs	r3, #3
 8008374:	e000      	b.n	8008378 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6852      	ldr	r2, [r2, #4]
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	4611      	mov	r1, r2
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083c4:	2340      	movs	r3, #64	; 0x40
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f003 ffeb 	bl	800c3a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2240      	movs	r2, #64	; 0x40
 80083dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083e0:	2340      	movs	r3, #64	; 0x40
 80083e2:	2200      	movs	r2, #0
 80083e4:	2180      	movs	r1, #128	; 0x80
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f003 ffdd 	bl	800c3a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2240      	movs	r2, #64	; 0x40
 80083f6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2204      	movs	r2, #4
 800843a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845a:	2b04      	cmp	r3, #4
 800845c:	d105      	bne.n	800846a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008486:	2b03      	cmp	r3, #3
 8008488:	d10b      	bne.n	80084a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850c:	2b00      	cmp	r3, #0
 800850e:	d009      	beq.n	8008524 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6852      	ldr	r2, [r2, #4]
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	4611      	mov	r1, r2
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	4798      	blx	r3
  }

  return USBD_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800852e:	b480      	push	{r7}
 8008530:	b087      	sub	sp, #28
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	3301      	adds	r3, #1
 8008544:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800854c:	8a3b      	ldrh	r3, [r7, #16]
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	b21a      	sxth	r2, r3
 8008552:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008556:	4313      	orrs	r3, r2
 8008558:	b21b      	sxth	r3, r3
 800855a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800855c:	89fb      	ldrh	r3, [r7, #14]
}
 800855e:	4618      	mov	r0, r3
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
	...

0800856c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008582:	2b20      	cmp	r3, #32
 8008584:	d004      	beq.n	8008590 <USBD_StdDevReq+0x24>
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d002      	beq.n	8008590 <USBD_StdDevReq+0x24>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <USBD_StdDevReq+0x38>
 800858e:	e050      	b.n	8008632 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
    break;
 80085a2:	e04b      	b.n	800863c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	2b09      	cmp	r3, #9
 80085aa:	d83c      	bhi.n	8008626 <USBD_StdDevReq+0xba>
 80085ac:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <USBD_StdDevReq+0x48>)
 80085ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b2:	bf00      	nop
 80085b4:	08008609 	.word	0x08008609
 80085b8:	0800861d 	.word	0x0800861d
 80085bc:	08008627 	.word	0x08008627
 80085c0:	08008613 	.word	0x08008613
 80085c4:	08008627 	.word	0x08008627
 80085c8:	080085e7 	.word	0x080085e7
 80085cc:	080085dd 	.word	0x080085dd
 80085d0:	08008627 	.word	0x08008627
 80085d4:	080085ff 	.word	0x080085ff
 80085d8:	080085f1 	.word	0x080085f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f9ce 	bl	8008980 <USBD_GetDescriptor>
      break;
 80085e4:	e024      	b.n	8008630 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fb33 	bl	8008c54 <USBD_SetAddress>
      break;
 80085ee:	e01f      	b.n	8008630 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fb70 	bl	8008cd8 <USBD_SetConfig>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
      break;
 80085fc:	e018      	b.n	8008630 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fc0d 	bl	8008e20 <USBD_GetConfig>
      break;
 8008606:	e013      	b.n	8008630 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fc3c 	bl	8008e88 <USBD_GetStatus>
      break;
 8008610:	e00e      	b.n	8008630 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc6a 	bl	8008eee <USBD_SetFeature>
      break;
 800861a:	e009      	b.n	8008630 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fc79 	bl	8008f16 <USBD_ClrFeature>
      break;
 8008624:	e004      	b.n	8008630 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fccf 	bl	8008fcc <USBD_CtlError>
      break;
 800862e:	bf00      	nop
    }
    break;
 8008630:	e004      	b.n	800863c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fcc9 	bl	8008fcc <USBD_CtlError>
    break;
 800863a:	bf00      	nop
  }

  return ret;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop

08008648 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800865e:	2b20      	cmp	r3, #32
 8008660:	d003      	beq.n	800866a <USBD_StdItfReq+0x22>
 8008662:	2b40      	cmp	r3, #64	; 0x40
 8008664:	d001      	beq.n	800866a <USBD_StdItfReq+0x22>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d12a      	bne.n	80086c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008670:	3b01      	subs	r3, #1
 8008672:	2b02      	cmp	r3, #2
 8008674:	d81d      	bhi.n	80086b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	889b      	ldrh	r3, [r3, #4]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b01      	cmp	r3, #1
 800867e:	d813      	bhi.n	80086a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	88db      	ldrh	r3, [r3, #6]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d110      	bne.n	80086bc <USBD_StdItfReq+0x74>
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10d      	bne.n	80086bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fd5e 	bl	8009162 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80086a6:	e009      	b.n	80086bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fc8e 	bl	8008fcc <USBD_CtlError>
      break;
 80086b0:	e004      	b.n	80086bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc89 	bl	8008fcc <USBD_CtlError>
      break;
 80086ba:	e000      	b.n	80086be <USBD_StdItfReq+0x76>
      break;
 80086bc:	bf00      	nop
    }
    break;
 80086be:	e004      	b.n	80086ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fc82 	bl	8008fcc <USBD_CtlError>
    break;
 80086c8:	bf00      	nop
  }

  return ret;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	889b      	ldrh	r3, [r3, #4]
 80086e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d004      	beq.n	80086fe <USBD_StdEPReq+0x2a>
 80086f4:	2b40      	cmp	r3, #64	; 0x40
 80086f6:	d002      	beq.n	80086fe <USBD_StdEPReq+0x2a>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <USBD_StdEPReq+0x3e>
 80086fc:	e135      	b.n	800896a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]
    break;
 8008710:	e130      	b.n	8008974 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d03e      	beq.n	8008798 <USBD_StdEPReq+0xc4>
 800871a:	2b03      	cmp	r3, #3
 800871c:	d002      	beq.n	8008724 <USBD_StdEPReq+0x50>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d077      	beq.n	8008812 <USBD_StdEPReq+0x13e>
 8008722:	e11c      	b.n	800895e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872a:	2b02      	cmp	r3, #2
 800872c:	d002      	beq.n	8008734 <USBD_StdEPReq+0x60>
 800872e:	2b03      	cmp	r3, #3
 8008730:	d015      	beq.n	800875e <USBD_StdEPReq+0x8a>
 8008732:	e02b      	b.n	800878c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00c      	beq.n	8008754 <USBD_StdEPReq+0x80>
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b80      	cmp	r3, #128	; 0x80
 800873e:	d009      	beq.n	8008754 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f003 fe73 	bl	800c430 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800874a:	2180      	movs	r1, #128	; 0x80
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f003 fe6f 	bl	800c430 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008752:	e020      	b.n	8008796 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fc38 	bl	8008fcc <USBD_CtlError>
        break;
 800875c:	e01b      	b.n	8008796 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10e      	bne.n	8008784 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <USBD_StdEPReq+0xb0>
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	2b80      	cmp	r3, #128	; 0x80
 8008770:	d008      	beq.n	8008784 <USBD_StdEPReq+0xb0>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88db      	ldrh	r3, [r3, #6]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d104      	bne.n	8008784 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f003 fe56 	bl	800c430 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fcec 	bl	8009162 <USBD_CtlSendStatus>

        break;
 800878a:	e004      	b.n	8008796 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fc1c 	bl	8008fcc <USBD_CtlError>
        break;
 8008794:	bf00      	nop
      }
      break;
 8008796:	e0e7      	b.n	8008968 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d002      	beq.n	80087a8 <USBD_StdEPReq+0xd4>
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d015      	beq.n	80087d2 <USBD_StdEPReq+0xfe>
 80087a6:	e02d      	b.n	8008804 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <USBD_StdEPReq+0xf4>
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	2b80      	cmp	r3, #128	; 0x80
 80087b2:	d009      	beq.n	80087c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f003 fe39 	bl	800c430 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087be:	2180      	movs	r1, #128	; 0x80
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f003 fe35 	bl	800c430 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80087c6:	e023      	b.n	8008810 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fbfe 	bl	8008fcc <USBD_CtlError>
        break;
 80087d0:	e01e      	b.n	8008810 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d119      	bne.n	800880e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f003 fe40 	bl	800c46e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fcb7 	bl	8009162 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
        }
        break;
 8008802:	e004      	b.n	800880e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fbe0 	bl	8008fcc <USBD_CtlError>
        break;
 800880c:	e000      	b.n	8008810 <USBD_StdEPReq+0x13c>
        break;
 800880e:	bf00      	nop
      }
      break;
 8008810:	e0aa      	b.n	8008968 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008818:	2b02      	cmp	r3, #2
 800881a:	d002      	beq.n	8008822 <USBD_StdEPReq+0x14e>
 800881c:	2b03      	cmp	r3, #3
 800881e:	d032      	beq.n	8008886 <USBD_StdEPReq+0x1b2>
 8008820:	e097      	b.n	8008952 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <USBD_StdEPReq+0x164>
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	2b80      	cmp	r3, #128	; 0x80
 800882c:	d004      	beq.n	8008838 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fbcb 	bl	8008fcc <USBD_CtlError>
          break;
 8008836:	e091      	b.n	800895c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883c:	2b00      	cmp	r3, #0
 800883e:	da0b      	bge.n	8008858 <USBD_StdEPReq+0x184>
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	3310      	adds	r3, #16
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	4413      	add	r3, r2
 8008854:	3304      	adds	r3, #4
 8008856:	e00b      	b.n	8008870 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	4413      	add	r3, r2
 800886e:	3304      	adds	r3, #4
 8008870:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2202      	movs	r2, #2
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fc15 	bl	80090ae <USBD_CtlSendData>
        break;
 8008884:	e06a      	b.n	800895c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800888a:	2b00      	cmp	r3, #0
 800888c:	da11      	bge.n	80088b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	f003 020f 	and.w	r2, r3, #15
 8008894:	6879      	ldr	r1, [r7, #4]
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	440b      	add	r3, r1
 80088a0:	3324      	adds	r3, #36	; 0x24
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d117      	bne.n	80088d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fb8e 	bl	8008fcc <USBD_CtlError>
            break;
 80088b0:	e054      	b.n	800895c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	f003 020f 	and.w	r2, r3, #15
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fb7b 	bl	8008fcc <USBD_CtlError>
            break;
 80088d6:	e041      	b.n	800895c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	da0b      	bge.n	80088f8 <USBD_StdEPReq+0x224>
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	3310      	adds	r3, #16
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	4413      	add	r3, r2
 80088f4:	3304      	adds	r3, #4
 80088f6:	e00b      	b.n	8008910 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	4413      	add	r3, r2
 800890e:	3304      	adds	r3, #4
 8008910:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <USBD_StdEPReq+0x24a>
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d103      	bne.n	8008926 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e00e      	b.n	8008944 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f003 fdbe 	bl	800c4ac <USBD_LL_IsStallEP>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2201      	movs	r2, #1
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e002      	b.n	8008944 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2202      	movs	r2, #2
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fbaf 	bl	80090ae <USBD_CtlSendData>
          break;
 8008950:	e004      	b.n	800895c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fb39 	bl	8008fcc <USBD_CtlError>
        break;
 800895a:	bf00      	nop
      }
      break;
 800895c:	e004      	b.n	8008968 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fb33 	bl	8008fcc <USBD_CtlError>
      break;
 8008966:	bf00      	nop
    }
    break;
 8008968:	e004      	b.n	8008974 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fb2d 	bl	8008fcc <USBD_CtlError>
    break;
 8008972:	bf00      	nop
  }

  return ret;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	885b      	ldrh	r3, [r3, #2]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	2b06      	cmp	r3, #6
 80089a2:	f200 8128 	bhi.w	8008bf6 <USBD_GetDescriptor+0x276>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <USBD_GetDescriptor+0x2c>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089e1 	.word	0x080089e1
 80089b4:	08008a21 	.word	0x08008a21
 80089b8:	08008bf7 	.word	0x08008bf7
 80089bc:	08008bf7 	.word	0x08008bf7
 80089c0:	08008b97 	.word	0x08008b97
 80089c4:	08008bc3 	.word	0x08008bc3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	7c12      	ldrb	r2, [r2, #16]
 80089d4:	f107 0108 	add.w	r1, r7, #8
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
    break;
 80089de:	e112      	b.n	8008c06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7c1b      	ldrb	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10d      	bne.n	8008a04 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	f107 0208 	add.w	r2, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3301      	adds	r3, #1
 80089fe:	2202      	movs	r2, #2
 8008a00:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008a02:	e100      	b.n	8008c06 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	f107 0208 	add.w	r2, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	701a      	strb	r2, [r3, #0]
    break;
 8008a1e:	e0f2      	b.n	8008c06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	885b      	ldrh	r3, [r3, #2]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	f200 80ac 	bhi.w	8008b84 <USBD_GetDescriptor+0x204>
 8008a2c:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <USBD_GetDescriptor+0xb4>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a4d 	.word	0x08008a4d
 8008a38:	08008a81 	.word	0x08008a81
 8008a3c:	08008ab5 	.word	0x08008ab5
 8008a40:	08008ae9 	.word	0x08008ae9
 8008a44:	08008b1d 	.word	0x08008b1d
 8008a48:	08008b51 	.word	0x08008b51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 0108 	add.w	r1, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a6e:	e091      	b.n	8008b94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 faaa 	bl	8008fcc <USBD_CtlError>
        err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a7e:	e089      	b.n	8008b94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7c12      	ldrb	r2, [r2, #16]
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aa2:	e077      	b.n	8008b94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa90 	bl	8008fcc <USBD_CtlError>
        err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab2:	e06f      	b.n	8008b94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	7c12      	ldrb	r2, [r2, #16]
 8008acc:	f107 0108 	add.w	r1, r7, #8
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad6:	e05d      	b.n	8008b94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa76 	bl	8008fcc <USBD_CtlError>
        err++;
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae6:	e055      	b.n	8008b94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	7c12      	ldrb	r2, [r2, #16]
 8008b00:	f107 0108 	add.w	r1, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b0a:	e043      	b.n	8008b94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa5c 	bl	8008fcc <USBD_CtlError>
        err++;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	3301      	adds	r3, #1
 8008b18:	72fb      	strb	r3, [r7, #11]
      break;
 8008b1a:	e03b      	b.n	8008b94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7c12      	ldrb	r2, [r2, #16]
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b3e:	e029      	b.n	8008b94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa42 	bl	8008fcc <USBD_CtlError>
        err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b4e:	e021      	b.n	8008b94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b72:	e00f      	b.n	8008b94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa28 	bl	8008fcc <USBD_CtlError>
        err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
      break;
 8008b82:	e007      	b.n	8008b94 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa20 	bl	8008fcc <USBD_CtlError>
      err++;
 8008b8c:	7afb      	ldrb	r3, [r7, #11]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008b92:	bf00      	nop
    }
    break;
 8008b94:	e037      	b.n	8008c06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7c1b      	ldrb	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba6:	f107 0208 	add.w	r2, r7, #8
 8008baa:	4610      	mov	r0, r2
 8008bac:	4798      	blx	r3
 8008bae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008bb0:	e029      	b.n	8008c06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa09 	bl	8008fcc <USBD_CtlError>
      err++;
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	72fb      	strb	r3, [r7, #11]
    break;
 8008bc0:	e021      	b.n	8008c06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7c1b      	ldrb	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10d      	bne.n	8008be6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	f107 0208 	add.w	r2, r7, #8
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	4798      	blx	r3
 8008bda:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3301      	adds	r3, #1
 8008be0:	2207      	movs	r2, #7
 8008be2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008be4:	e00f      	b.n	8008c06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f9ef 	bl	8008fcc <USBD_CtlError>
      err++;
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	72fb      	strb	r3, [r7, #11]
    break;
 8008bf4:	e007      	b.n	8008c06 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f9e7 	bl	8008fcc <USBD_CtlError>
    err++;
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
 8008c00:	3301      	adds	r3, #1
 8008c02:	72fb      	strb	r3, [r7, #11]
    break;
 8008c04:	bf00      	nop
  }

  if (err != 0U)
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11e      	bne.n	8008c4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	88db      	ldrh	r3, [r3, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d016      	beq.n	8008c42 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008c14:	893b      	ldrh	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00e      	beq.n	8008c38 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	88da      	ldrh	r2, [r3, #6]
 8008c1e:	893b      	ldrh	r3, [r7, #8]
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bf28      	it	cs
 8008c24:	4613      	movcs	r3, r2
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c2a:	893b      	ldrh	r3, [r7, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa3c 	bl	80090ae <USBD_CtlSendData>
 8008c36:	e009      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9c6 	bl	8008fcc <USBD_CtlError>
 8008c40:	e004      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa8d 	bl	8009162 <USBD_CtlSendStatus>
 8008c48:	e000      	b.n	8008c4c <USBD_GetDescriptor+0x2cc>
    return;
 8008c4a:	bf00      	nop
    }
  }
}
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop

08008c54 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	889b      	ldrh	r3, [r3, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d130      	bne.n	8008cc8 <USBD_SetAddress+0x74>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d12c      	bne.n	8008cc8 <USBD_SetAddress+0x74>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	2b7f      	cmp	r3, #127	; 0x7f
 8008c74:	d828      	bhi.n	8008cc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d104      	bne.n	8008c96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f99c 	bl	8008fcc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c94:	e01c      	b.n	8008cd0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	7bfa      	ldrb	r2, [r7, #15]
 8008c9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f003 fc2e 	bl	800c504 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa5a 	bl	8009162 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbc:	e008      	b.n	8008cd0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc6:	e003      	b.n	8008cd0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f97e 	bl	8008fcc <USBD_CtlError>
  }
}
 8008cd0:	bf00      	nop
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	4b4b      	ldr	r3, [pc, #300]	; (8008e1c <USBD_SetConfig+0x144>)
 8008cee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cf0:	4b4a      	ldr	r3, [pc, #296]	; (8008e1c <USBD_SetConfig+0x144>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d905      	bls.n	8008d04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f966 	bl	8008fcc <USBD_CtlError>
    return USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e087      	b.n	8008e14 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d002      	beq.n	8008d14 <USBD_SetConfig+0x3c>
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d025      	beq.n	8008d5e <USBD_SetConfig+0x86>
 8008d12:	e071      	b.n	8008df8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008d14:	4b41      	ldr	r3, [pc, #260]	; (8008e1c <USBD_SetConfig+0x144>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01c      	beq.n	8008d56 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008d1c:	4b3f      	ldr	r3, [pc, #252]	; (8008e1c <USBD_SetConfig+0x144>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d26:	4b3d      	ldr	r3, [pc, #244]	; (8008e1c <USBD_SetConfig+0x144>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff f9a7 	bl	8008080 <USBD_SetClassConfig>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f944 	bl	8008fcc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d44:	e065      	b.n	8008e12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa0b 	bl	8009162 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2203      	movs	r2, #3
 8008d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d54:	e05d      	b.n	8008e12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa03 	bl	8009162 <USBD_CtlSendStatus>
    break;
 8008d5c:	e059      	b.n	8008e12 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008d5e:	4b2f      	ldr	r3, [pc, #188]	; (8008e1c <USBD_SetConfig+0x144>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d112      	bne.n	8008d8c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008d6e:	4b2b      	ldr	r3, [pc, #172]	; (8008e1c <USBD_SetConfig+0x144>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d78:	4b28      	ldr	r3, [pc, #160]	; (8008e1c <USBD_SetConfig+0x144>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff f99a 	bl	80080b8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9ec 	bl	8009162 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d8a:	e042      	b.n	8008e12 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008d8c:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <USBD_SetConfig+0x144>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	461a      	mov	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d02a      	beq.n	8008df0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff f988 	bl	80080b8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008da8:	4b1c      	ldr	r3, [pc, #112]	; (8008e1c <USBD_SetConfig+0x144>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008db2:	4b1a      	ldr	r3, [pc, #104]	; (8008e1c <USBD_SetConfig+0x144>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff f961 	bl	8008080 <USBD_SetClassConfig>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00f      	beq.n	8008de8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f8fe 	bl	8008fcc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff f96d 	bl	80080b8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2202      	movs	r2, #2
 8008de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008de6:	e014      	b.n	8008e12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f9ba 	bl	8009162 <USBD_CtlSendStatus>
    break;
 8008dee:	e010      	b.n	8008e12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f9b6 	bl	8009162 <USBD_CtlSendStatus>
    break;
 8008df6:	e00c      	b.n	8008e12 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f8e6 	bl	8008fcc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e00:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <USBD_SetConfig+0x144>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff f956 	bl	80080b8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e10:	bf00      	nop
  }

  return ret;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000384 	.word	0x20000384

08008e20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	88db      	ldrh	r3, [r3, #6]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d004      	beq.n	8008e3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f8c9 	bl	8008fcc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008e3a:	e021      	b.n	8008e80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	db17      	blt.n	8008e76 <USBD_GetConfig+0x56>
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	dd02      	ble.n	8008e50 <USBD_GetConfig+0x30>
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d00b      	beq.n	8008e66 <USBD_GetConfig+0x46>
 8008e4e:	e012      	b.n	8008e76 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f925 	bl	80090ae <USBD_CtlSendData>
      break;
 8008e64:	e00c      	b.n	8008e80 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f91d 	bl	80090ae <USBD_CtlSendData>
      break;
 8008e74:	e004      	b.n	8008e80 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f8a7 	bl	8008fcc <USBD_CtlError>
      break;
 8008e7e:	bf00      	nop
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d81e      	bhi.n	8008edc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	88db      	ldrh	r3, [r3, #6]
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d004      	beq.n	8008eb0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f88f 	bl	8008fcc <USBD_CtlError>
      break;
 8008eae:	e01a      	b.n	8008ee6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f043 0202 	orr.w	r2, r3, #2
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	330c      	adds	r3, #12
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f8ea 	bl	80090ae <USBD_CtlSendData>
    break;
 8008eda:	e004      	b.n	8008ee6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f874 	bl	8008fcc <USBD_CtlError>
    break;
 8008ee4:	bf00      	nop
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	885b      	ldrh	r3, [r3, #2]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d106      	bne.n	8008f0e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f92a 	bl	8009162 <USBD_CtlSendStatus>
  }
}
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f26:	3b01      	subs	r3, #1
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d80b      	bhi.n	8008f44 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d10c      	bne.n	8008f4e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f910 	bl	8009162 <USBD_CtlSendStatus>
      }
      break;
 8008f42:	e004      	b.n	8008f4e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f840 	bl	8008fcc <USBD_CtlError>
      break;
 8008f4c:	e000      	b.n	8008f50 <USBD_ClrFeature+0x3a>
      break;
 8008f4e:	bf00      	nop
  }
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	781a      	ldrb	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3301      	adds	r3, #1
 8008f72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7ff fad3 	bl	800852e <SWAPBYTE>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff fac6 	bl	800852e <SWAPBYTE>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f7ff fab9 	bl	800852e <SWAPBYTE>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	80da      	strh	r2, [r3, #6]
}
 8008fc4:	bf00      	nop
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fd6:	2180      	movs	r1, #128	; 0x80
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f003 fa29 	bl	800c430 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fde:	2100      	movs	r1, #0
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f003 fa25 	bl	800c430 <USBD_LL_StallEP>
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d036      	beq.n	8009072 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009008:	6938      	ldr	r0, [r7, #16]
 800900a:	f000 f836 	bl	800907a <USBD_GetLen>
 800900e:	4603      	mov	r3, r0
 8009010:	3301      	adds	r3, #1
 8009012:	b29b      	uxth	r3, r3
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	4413      	add	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	7812      	ldrb	r2, [r2, #0]
 8009026:	701a      	strb	r2, [r3, #0]
  idx++;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	3301      	adds	r3, #1
 800902c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	4413      	add	r3, r2
 8009034:	2203      	movs	r2, #3
 8009036:	701a      	strb	r2, [r3, #0]
  idx++;
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	3301      	adds	r3, #1
 800903c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800903e:	e013      	b.n	8009068 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009040:	7dfb      	ldrb	r3, [r7, #23]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	4413      	add	r3, r2
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	7812      	ldrb	r2, [r2, #0]
 800904a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	3301      	adds	r3, #1
 8009050:	613b      	str	r3, [r7, #16]
    idx++;
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	3301      	adds	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4413      	add	r3, r2
 800905e:	2200      	movs	r2, #0
 8009060:	701a      	strb	r2, [r3, #0]
    idx++;
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	3301      	adds	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e7      	bne.n	8009040 <USBD_GetString+0x52>
 8009070:	e000      	b.n	8009074 <USBD_GetString+0x86>
    return;
 8009072:	bf00      	nop
  }
}
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800908a:	e005      	b.n	8009098 <USBD_GetLen+0x1e>
  {
    len++;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	3301      	adds	r3, #1
 8009090:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	3301      	adds	r3, #1
 8009096:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1f5      	bne.n	800908c <USBD_GetLen+0x12>
  }

  return len;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2202      	movs	r2, #2
 80090be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	2100      	movs	r1, #0
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f003 fa34 	bl	800c542 <USBD_LL_Transmit>

  return USBD_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	2100      	movs	r1, #0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f003 fa23 	bl	800c542 <USBD_LL_Transmit>

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2203      	movs	r2, #3
 8009116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	2100      	movs	r1, #0
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f003 fa27 	bl	800c584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	2100      	movs	r1, #0
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f003 fa16 	bl	800c584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b082      	sub	sp, #8
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2204      	movs	r2, #4
 800916e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009172:	2300      	movs	r3, #0
 8009174:	2200      	movs	r2, #0
 8009176:	2100      	movs	r1, #0
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f003 f9e2 	bl	800c542 <USBD_LL_Transmit>

  return USBD_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2205      	movs	r2, #5
 8009194:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009198:	2300      	movs	r3, #0
 800919a:	2200      	movs	r2, #0
 800919c:	2100      	movs	r1, #0
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f003 f9f0 	bl	800c584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <osKernelInitialize>:
#endif
}

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091b6:	f3ef 8305 	mrs	r3, IPSR
 80091ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80091bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10f      	bne.n	80091e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c2:	f3ef 8310 	mrs	r3, PRIMASK
 80091c6:	607b      	str	r3, [r7, #4]
  return(result);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d105      	bne.n	80091da <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091ce:	f3ef 8311 	mrs	r3, BASEPRI
 80091d2:	603b      	str	r3, [r7, #0]
  return(result);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <osKernelInitialize+0x3a>
 80091da:	4b0e      	ldr	r3, [pc, #56]	; (8009214 <osKernelInitialize+0x64>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d103      	bne.n	80091ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80091e2:	f06f 0305 	mvn.w	r3, #5
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	e00c      	b.n	8009204 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80091ea:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <osKernelInitialize+0x64>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d105      	bne.n	80091fe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80091f2:	4b08      	ldr	r3, [pc, #32]	; (8009214 <osKernelInitialize+0x64>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	e002      	b.n	8009204 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009202:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009204:	68fb      	ldr	r3, [r7, #12]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20000388 	.word	0x20000388

08009218 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009218:	b580      	push	{r7, lr}
 800921a:	b090      	sub	sp, #64	; 0x40
 800921c:	af04      	add	r7, sp, #16
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009228:	f3ef 8305 	mrs	r3, IPSR
 800922c:	61fb      	str	r3, [r7, #28]
  return(result);
 800922e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 808f 	bne.w	8009354 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009236:	f3ef 8310 	mrs	r3, PRIMASK
 800923a:	61bb      	str	r3, [r7, #24]
  return(result);
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d105      	bne.n	800924e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009242:	f3ef 8311 	mrs	r3, BASEPRI
 8009246:	617b      	str	r3, [r7, #20]
  return(result);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <osThreadNew+0x3e>
 800924e:	4b44      	ldr	r3, [pc, #272]	; (8009360 <osThreadNew+0x148>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b02      	cmp	r3, #2
 8009254:	d07e      	beq.n	8009354 <osThreadNew+0x13c>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d07b      	beq.n	8009354 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800925c:	2380      	movs	r3, #128	; 0x80
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009260:	2318      	movs	r3, #24
 8009262:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800926c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d045      	beq.n	8009300 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <osThreadNew+0x6a>
        name = attr->name;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d008      	beq.n	80092a8 <osThreadNew+0x90>
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	2b38      	cmp	r3, #56	; 0x38
 800929a:	d805      	bhi.n	80092a8 <osThreadNew+0x90>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <osThreadNew+0x94>
        return (NULL);
 80092a8:	2300      	movs	r3, #0
 80092aa:	e054      	b.n	8009356 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	089b      	lsrs	r3, r3, #2
 80092ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00e      	beq.n	80092e2 <osThreadNew+0xca>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b5b      	cmp	r3, #91	; 0x5b
 80092ca:	d90a      	bls.n	80092e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d006      	beq.n	80092e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <osThreadNew+0xca>
        mem = 1;
 80092dc:	2301      	movs	r3, #1
 80092de:	623b      	str	r3, [r7, #32]
 80092e0:	e010      	b.n	8009304 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10c      	bne.n	8009304 <osThreadNew+0xec>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d108      	bne.n	8009304 <osThreadNew+0xec>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d104      	bne.n	8009304 <osThreadNew+0xec>
          mem = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	623b      	str	r3, [r7, #32]
 80092fe:	e001      	b.n	8009304 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d110      	bne.n	800932c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009312:	9202      	str	r2, [sp, #8]
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800931e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 fe49 	bl	8009fb8 <xTaskCreateStatic>
 8009326:	4603      	mov	r3, r0
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	e013      	b.n	8009354 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d110      	bne.n	8009354 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	b29a      	uxth	r2, r3
 8009336:	f107 0310 	add.w	r3, r7, #16
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fe91 	bl	800a06c <xTaskCreate>
 800934a:	4603      	mov	r3, r0
 800934c:	2b01      	cmp	r3, #1
 800934e:	d001      	beq.n	8009354 <osThreadNew+0x13c>
          hTask = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009354:	693b      	ldr	r3, [r7, #16]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3730      	adds	r7, #48	; 0x30
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000388 	.word	0x20000388

08009364 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800936c:	f3ef 8305 	mrs	r3, IPSR
 8009370:	613b      	str	r3, [r7, #16]
  return(result);
 8009372:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10f      	bne.n	8009398 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009378:	f3ef 8310 	mrs	r3, PRIMASK
 800937c:	60fb      	str	r3, [r7, #12]
  return(result);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d105      	bne.n	8009390 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009384:	f3ef 8311 	mrs	r3, BASEPRI
 8009388:	60bb      	str	r3, [r7, #8]
  return(result);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d007      	beq.n	80093a0 <osDelay+0x3c>
 8009390:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <osDelay+0x58>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d103      	bne.n	80093a0 <osDelay+0x3c>
    stat = osErrorISR;
 8009398:	f06f 0305 	mvn.w	r3, #5
 800939c:	617b      	str	r3, [r7, #20]
 800939e:	e007      	b.n	80093b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 ffa2 	bl	800a2f4 <vTaskDelay>
    }
  }

  return (stat);
 80093b0:	697b      	ldr	r3, [r7, #20]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000388 	.word	0x20000388

080093c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4a07      	ldr	r2, [pc, #28]	; (80093ec <vApplicationGetIdleTaskMemory+0x2c>)
 80093d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4a06      	ldr	r2, [pc, #24]	; (80093f0 <vApplicationGetIdleTaskMemory+0x30>)
 80093d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2280      	movs	r2, #128	; 0x80
 80093dc:	601a      	str	r2, [r3, #0]
}
 80093de:	bf00      	nop
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	2000038c 	.word	0x2000038c
 80093f0:	200003e8 	.word	0x200003e8

080093f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a07      	ldr	r2, [pc, #28]	; (8009420 <vApplicationGetTimerTaskMemory+0x2c>)
 8009404:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4a06      	ldr	r2, [pc, #24]	; (8009424 <vApplicationGetTimerTaskMemory+0x30>)
 800940a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009412:	601a      	str	r2, [r3, #0]
}
 8009414:	bf00      	nop
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	200005e8 	.word	0x200005e8
 8009424:	20000644 	.word	0x20000644

08009428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f103 0208 	add.w	r2, r3, #8
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f103 0208 	add.w	r2, r3, #8
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f103 0208 	add.w	r2, r3, #8
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	601a      	str	r2, [r3, #0]
}
 80094be:	bf00      	nop
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e0:	d103      	bne.n	80094ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e00c      	b.n	8009504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	3308      	adds	r3, #8
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e002      	b.n	80094f8 <vListInsert+0x2e>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	429a      	cmp	r2, r3
 8009502:	d2f6      	bcs.n	80094f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	601a      	str	r2, [r3, #0]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6892      	ldr	r2, [r2, #8]
 8009552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	6852      	ldr	r2, [r2, #4]
 800955c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d103      	bne.n	8009570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	1e5a      	subs	r2, r3, #1
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d109      	bne.n	80095b8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	60bb      	str	r3, [r7, #8]
 80095b6:	e7fe      	b.n	80095b6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80095b8:	f002 f850 	bl	800b65c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c4:	68f9      	ldr	r1, [r7, #12]
 80095c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	441a      	add	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e8:	3b01      	subs	r3, #1
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095ee:	fb01 f303 	mul.w	r3, r1, r3
 80095f2:	441a      	add	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	22ff      	movs	r2, #255	; 0xff
 80095fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	22ff      	movs	r2, #255	; 0xff
 8009604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d114      	bne.n	8009638 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01a      	beq.n	800964c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3310      	adds	r3, #16
 800961a:	4618      	mov	r0, r3
 800961c:	f001 f91e 	bl	800a85c <xTaskRemoveFromEventList>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d012      	beq.n	800964c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009626:	4b0d      	ldr	r3, [pc, #52]	; (800965c <xQueueGenericReset+0xcc>)
 8009628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	e009      	b.n	800964c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3310      	adds	r3, #16
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fef3 	bl	8009428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3324      	adds	r3, #36	; 0x24
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff feee 	bl	8009428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800964c:	f002 f834 	bl	800b6b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009650:	2301      	movs	r3, #1
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	e000ed04 	.word	0xe000ed04

08009660 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08e      	sub	sp, #56	; 0x38
 8009664:	af02      	add	r7, sp, #8
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
 800966c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d109      	bne.n	8009688 <xQueueGenericCreateStatic+0x28>
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	62bb      	str	r3, [r7, #40]	; 0x28
 8009686:	e7fe      	b.n	8009686 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d109      	bne.n	80096a2 <xQueueGenericCreateStatic+0x42>
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
 80096a0:	e7fe      	b.n	80096a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <xQueueGenericCreateStatic+0x4e>
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <xQueueGenericCreateStatic+0x52>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e000      	b.n	80096b4 <xQueueGenericCreateStatic+0x54>
 80096b2:	2300      	movs	r3, #0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d109      	bne.n	80096cc <xQueueGenericCreateStatic+0x6c>
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	623b      	str	r3, [r7, #32]
 80096ca:	e7fe      	b.n	80096ca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d102      	bne.n	80096d8 <xQueueGenericCreateStatic+0x78>
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <xQueueGenericCreateStatic+0x7c>
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <xQueueGenericCreateStatic+0x7e>
 80096dc:	2300      	movs	r3, #0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <xQueueGenericCreateStatic+0x96>
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	e7fe      	b.n	80096f4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096f6:	2350      	movs	r3, #80	; 0x50
 80096f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b50      	cmp	r3, #80	; 0x50
 80096fe:	d009      	beq.n	8009714 <xQueueGenericCreateStatic+0xb4>
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	e7fe      	b.n	8009712 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009714:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00d      	beq.n	800973c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009728:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	4613      	mov	r3, r2
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	68b9      	ldr	r1, [r7, #8]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f844 	bl	80097c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800973e:	4618      	mov	r0, r3
 8009740:	3730      	adds	r7, #48	; 0x30
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009746:	b580      	push	{r7, lr}
 8009748:	b08a      	sub	sp, #40	; 0x28
 800974a:	af02      	add	r7, sp, #8
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	4613      	mov	r3, r2
 8009752:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <xQueueGenericCreate+0x28>
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	e7fe      	b.n	800976c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009774:	2300      	movs	r3, #0
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	e004      	b.n	8009784 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
 8009782:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	3350      	adds	r3, #80	; 0x50
 8009788:	4618      	mov	r0, r3
 800978a:	f002 f881 	bl	800b890 <pvPortMalloc>
 800978e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d011      	beq.n	80097ba <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	3350      	adds	r3, #80	; 0x50
 800979e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097a8:	79fa      	ldrb	r2, [r7, #7]
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4613      	mov	r3, r2
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 f805 	bl	80097c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097ba:	69bb      	ldr	r3, [r7, #24]
	}
 80097bc:	4618      	mov	r0, r3
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d103      	bne.n	80097e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	e002      	b.n	80097e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097f2:	2101      	movs	r1, #1
 80097f4:	69b8      	ldr	r0, [r7, #24]
 80097f6:	f7ff fecb 	bl	8009590 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	78fa      	ldrb	r2, [r7, #3]
 80097fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08e      	sub	sp, #56	; 0x38
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800981a:	2300      	movs	r3, #0
 800981c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	2b00      	cmp	r3, #0
 8009826:	d109      	bne.n	800983c <xQueueGenericSend+0x30>
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
 800983a:	e7fe      	b.n	800983a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d103      	bne.n	800984a <xQueueGenericSend+0x3e>
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <xQueueGenericSend+0x42>
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <xQueueGenericSend+0x44>
 800984e:	2300      	movs	r3, #0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d109      	bne.n	8009868 <xQueueGenericSend+0x5c>
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
 8009866:	e7fe      	b.n	8009866 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d103      	bne.n	8009876 <xQueueGenericSend+0x6a>
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009872:	2b01      	cmp	r3, #1
 8009874:	d101      	bne.n	800987a <xQueueGenericSend+0x6e>
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <xQueueGenericSend+0x70>
 800987a:	2300      	movs	r3, #0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d109      	bne.n	8009894 <xQueueGenericSend+0x88>
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	623b      	str	r3, [r7, #32]
 8009892:	e7fe      	b.n	8009892 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009894:	f001 f998 	bl	800abc8 <xTaskGetSchedulerState>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d102      	bne.n	80098a4 <xQueueGenericSend+0x98>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <xQueueGenericSend+0x9c>
 80098a4:	2301      	movs	r3, #1
 80098a6:	e000      	b.n	80098aa <xQueueGenericSend+0x9e>
 80098a8:	2300      	movs	r3, #0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d109      	bne.n	80098c2 <xQueueGenericSend+0xb6>
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	e7fe      	b.n	80098c0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098c2:	f001 fecb 	bl	800b65c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d302      	bcc.n	80098d8 <xQueueGenericSend+0xcc>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d129      	bne.n	800992c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098de:	f000 f9ff 	bl	8009ce0 <prvCopyDataToQueue>
 80098e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d010      	beq.n	800990e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	3324      	adds	r3, #36	; 0x24
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 ffb3 	bl	800a85c <xTaskRemoveFromEventList>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d013      	beq.n	8009924 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098fc:	4b3f      	ldr	r3, [pc, #252]	; (80099fc <xQueueGenericSend+0x1f0>)
 80098fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	e00a      	b.n	8009924 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009914:	4b39      	ldr	r3, [pc, #228]	; (80099fc <xQueueGenericSend+0x1f0>)
 8009916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009924:	f001 fec8 	bl	800b6b8 <vPortExitCritical>
				return pdPASS;
 8009928:	2301      	movs	r3, #1
 800992a:	e063      	b.n	80099f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009932:	f001 fec1 	bl	800b6b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009936:	2300      	movs	r3, #0
 8009938:	e05c      	b.n	80099f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d106      	bne.n	800994e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009940:	f107 0314 	add.w	r3, r7, #20
 8009944:	4618      	mov	r0, r3
 8009946:	f000 ffeb 	bl	800a920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800994e:	f001 feb3 	bl	800b6b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009952:	f000 fd67 	bl	800a424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009956:	f001 fe81 	bl	800b65c <vPortEnterCritical>
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009960:	b25b      	sxtb	r3, r3
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009966:	d103      	bne.n	8009970 <xQueueGenericSend+0x164>
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009976:	b25b      	sxtb	r3, r3
 8009978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800997c:	d103      	bne.n	8009986 <xQueueGenericSend+0x17a>
 800997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009986:	f001 fe97 	bl	800b6b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800998a:	1d3a      	adds	r2, r7, #4
 800998c:	f107 0314 	add.w	r3, r7, #20
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f000 ffda 	bl	800a94c <xTaskCheckForTimeOut>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d124      	bne.n	80099e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800999e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099a0:	f000 fa96 	bl	8009ed0 <prvIsQueueFull>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d018      	beq.n	80099dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	3310      	adds	r3, #16
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 ff04 	bl	800a7c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80099b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ba:	f000 fa21 	bl	8009e00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80099be:	f000 fd3f 	bl	800a440 <xTaskResumeAll>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f47f af7c 	bne.w	80098c2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80099ca:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <xQueueGenericSend+0x1f0>)
 80099cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	e772      	b.n	80098c2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099de:	f000 fa0f 	bl	8009e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099e2:	f000 fd2d 	bl	800a440 <xTaskResumeAll>
 80099e6:	e76c      	b.n	80098c2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ea:	f000 fa09 	bl	8009e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ee:	f000 fd27 	bl	800a440 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3738      	adds	r7, #56	; 0x38
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	e000ed04 	.word	0xe000ed04

08009a00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08e      	sub	sp, #56	; 0x38
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <xQueueGenericSendFromISR+0x2c>
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2a:	e7fe      	b.n	8009a2a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSendFromISR+0x3a>
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <xQueueGenericSendFromISR+0x3e>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <xQueueGenericSendFromISR+0x40>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d109      	bne.n	8009a58 <xQueueGenericSendFromISR+0x58>
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	623b      	str	r3, [r7, #32]
 8009a56:	e7fe      	b.n	8009a56 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d103      	bne.n	8009a66 <xQueueGenericSendFromISR+0x66>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d101      	bne.n	8009a6a <xQueueGenericSendFromISR+0x6a>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <xQueueGenericSendFromISR+0x6c>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d109      	bne.n	8009a84 <xQueueGenericSendFromISR+0x84>
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	e7fe      	b.n	8009a82 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a84:	f001 fec6 	bl	800b814 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a88:	f3ef 8211 	mrs	r2, BASEPRI
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	61ba      	str	r2, [r7, #24]
 8009a9e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009aa0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d302      	bcc.n	8009ab6 <xQueueGenericSendFromISR+0xb6>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d12c      	bne.n	8009b10 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ac6:	f000 f90b 	bl	8009ce0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009aca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ad2:	d112      	bne.n	8009afa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d016      	beq.n	8009b0a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	3324      	adds	r3, #36	; 0x24
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 febb 	bl	800a85c <xTaskRemoveFromEventList>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00e      	beq.n	8009b0a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00b      	beq.n	8009b0a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	e007      	b.n	8009b0a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009afa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009afe:	3301      	adds	r3, #1
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	b25a      	sxtb	r2, r3
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009b0e:	e001      	b.n	8009b14 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	637b      	str	r3, [r7, #52]	; 0x34
 8009b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b16:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3738      	adds	r7, #56	; 0x38
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08c      	sub	sp, #48	; 0x30
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b34:	2300      	movs	r3, #0
 8009b36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d109      	bne.n	8009b56 <xQueueReceive+0x2e>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	623b      	str	r3, [r7, #32]
 8009b54:	e7fe      	b.n	8009b54 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d103      	bne.n	8009b64 <xQueueReceive+0x3c>
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <xQueueReceive+0x40>
 8009b64:	2301      	movs	r3, #1
 8009b66:	e000      	b.n	8009b6a <xQueueReceive+0x42>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d109      	bne.n	8009b82 <xQueueReceive+0x5a>
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	61fb      	str	r3, [r7, #28]
 8009b80:	e7fe      	b.n	8009b80 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b82:	f001 f821 	bl	800abc8 <xTaskGetSchedulerState>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <xQueueReceive+0x6a>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <xQueueReceive+0x6e>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e000      	b.n	8009b98 <xQueueReceive+0x70>
 8009b96:	2300      	movs	r3, #0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <xQueueReceive+0x88>
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	61bb      	str	r3, [r7, #24]
 8009bae:	e7fe      	b.n	8009bae <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bb0:	f001 fd54 	bl	800b65c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d01f      	beq.n	8009c00 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc4:	f000 f8f6 	bl	8009db4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	1e5a      	subs	r2, r3, #1
 8009bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00f      	beq.n	8009bf8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	3310      	adds	r3, #16
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fe3d 	bl	800a85c <xTaskRemoveFromEventList>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009be8:	4b3c      	ldr	r3, [pc, #240]	; (8009cdc <xQueueReceive+0x1b4>)
 8009bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bf8:	f001 fd5e 	bl	800b6b8 <vPortExitCritical>
				return pdPASS;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e069      	b.n	8009cd4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d103      	bne.n	8009c0e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c06:	f001 fd57 	bl	800b6b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e062      	b.n	8009cd4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c14:	f107 0310 	add.w	r3, r7, #16
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 fe81 	bl	800a920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c22:	f001 fd49 	bl	800b6b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c26:	f000 fbfd 	bl	800a424 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c2a:	f001 fd17 	bl	800b65c <vPortEnterCritical>
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c34:	b25b      	sxtb	r3, r3
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c3a:	d103      	bne.n	8009c44 <xQueueReceive+0x11c>
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c4a:	b25b      	sxtb	r3, r3
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c50:	d103      	bne.n	8009c5a <xQueueReceive+0x132>
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c5a:	f001 fd2d 	bl	800b6b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c5e:	1d3a      	adds	r2, r7, #4
 8009c60:	f107 0310 	add.w	r3, r7, #16
 8009c64:	4611      	mov	r1, r2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fe70 	bl	800a94c <xTaskCheckForTimeOut>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d123      	bne.n	8009cba <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c74:	f000 f916 	bl	8009ea4 <prvIsQueueEmpty>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d017      	beq.n	8009cae <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	3324      	adds	r3, #36	; 0x24
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fd9a 	bl	800a7c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c8e:	f000 f8b7 	bl	8009e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c92:	f000 fbd5 	bl	800a440 <xTaskResumeAll>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d189      	bne.n	8009bb0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009c9c:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <xQueueReceive+0x1b4>)
 8009c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	e780      	b.n	8009bb0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb0:	f000 f8a6 	bl	8009e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cb4:	f000 fbc4 	bl	800a440 <xTaskResumeAll>
 8009cb8:	e77a      	b.n	8009bb0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cbc:	f000 f8a0 	bl	8009e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cc0:	f000 fbbe 	bl	800a440 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc6:	f000 f8ed 	bl	8009ea4 <prvIsQueueEmpty>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f43f af6f 	beq.w	8009bb0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3730      	adds	r7, #48	; 0x30
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cec:	2300      	movs	r3, #0
 8009cee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10d      	bne.n	8009d1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d14d      	bne.n	8009da2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 ff7a 	bl	800ac04 <xTaskPriorityDisinherit>
 8009d10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	609a      	str	r2, [r3, #8]
 8009d18:	e043      	b.n	8009da2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d119      	bne.n	8009d54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6858      	ldr	r0, [r3, #4]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	f002 fcc4 	bl	800c6b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	441a      	add	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685a      	ldr	r2, [r3, #4]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d32b      	bcc.n	8009da2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	e026      	b.n	8009da2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68d8      	ldr	r0, [r3, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	f002 fcaa 	bl	800c6b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	425b      	negs	r3, r3
 8009d6e:	441a      	add	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d207      	bcs.n	8009d90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	689a      	ldr	r2, [r3, #8]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	425b      	negs	r3, r3
 8009d8a:	441a      	add	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d105      	bne.n	8009da2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009daa:	697b      	ldr	r3, [r7, #20]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d018      	beq.n	8009df8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	441a      	add	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68da      	ldr	r2, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d303      	bcc.n	8009de8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68d9      	ldr	r1, [r3, #12]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df0:	461a      	mov	r2, r3
 8009df2:	6838      	ldr	r0, [r7, #0]
 8009df4:	f002 fc60 	bl	800c6b8 <memcpy>
	}
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009e08:	f001 fc28 	bl	800b65c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e14:	e011      	b.n	8009e3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d012      	beq.n	8009e44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3324      	adds	r3, #36	; 0x24
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fd1a 	bl	800a85c <xTaskRemoveFromEventList>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e2e:	f000 fded 	bl	800aa0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	dce9      	bgt.n	8009e16 <prvUnlockQueue+0x16>
 8009e42:	e000      	b.n	8009e46 <prvUnlockQueue+0x46>
					break;
 8009e44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	22ff      	movs	r2, #255	; 0xff
 8009e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e4e:	f001 fc33 	bl	800b6b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e52:	f001 fc03 	bl	800b65c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e5e:	e011      	b.n	8009e84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d012      	beq.n	8009e8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3310      	adds	r3, #16
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 fcf5 	bl	800a85c <xTaskRemoveFromEventList>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e78:	f000 fdc8 	bl	800aa0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	dce9      	bgt.n	8009e60 <prvUnlockQueue+0x60>
 8009e8c:	e000      	b.n	8009e90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	22ff      	movs	r2, #255	; 0xff
 8009e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e98:	f001 fc0e 	bl	800b6b8 <vPortExitCritical>
}
 8009e9c:	bf00      	nop
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eac:	f001 fbd6 	bl	800b65c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e001      	b.n	8009ec2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ec2:	f001 fbf9 	bl	800b6b8 <vPortExitCritical>

	return xReturn;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ed8:	f001 fbc0 	bl	800b65c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d102      	bne.n	8009eee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	e001      	b.n	8009ef2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ef2:	f001 fbe1 	bl	800b6b8 <vPortExitCritical>

	return xReturn;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	e014      	b.n	8009f3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f10:	4a0e      	ldr	r2, [pc, #56]	; (8009f4c <vQueueAddToRegistry+0x4c>)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10b      	bne.n	8009f34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f1c:	490b      	ldr	r1, [pc, #44]	; (8009f4c <vQueueAddToRegistry+0x4c>)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f26:	4a09      	ldr	r2, [pc, #36]	; (8009f4c <vQueueAddToRegistry+0x4c>)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	4413      	add	r3, r2
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f32:	e005      	b.n	8009f40 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b07      	cmp	r3, #7
 8009f3e:	d9e7      	bls.n	8009f10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f40:	bf00      	nop
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	2000503c 	.word	0x2000503c

08009f50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f60:	f001 fb7c 	bl	800b65c <vPortEnterCritical>
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f6a:	b25b      	sxtb	r3, r3
 8009f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f70:	d103      	bne.n	8009f7a <vQueueWaitForMessageRestricted+0x2a>
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f80:	b25b      	sxtb	r3, r3
 8009f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f86:	d103      	bne.n	8009f90 <vQueueWaitForMessageRestricted+0x40>
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f90:	f001 fb92 	bl	800b6b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d106      	bne.n	8009faa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	3324      	adds	r3, #36	; 0x24
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	68b9      	ldr	r1, [r7, #8]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 fc2f 	bl	800a808 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009faa:	6978      	ldr	r0, [r7, #20]
 8009fac:	f7ff ff28 	bl	8009e00 <prvUnlockQueue>
	}
 8009fb0:	bf00      	nop
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08e      	sub	sp, #56	; 0x38
 8009fbc:	af04      	add	r7, sp, #16
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d109      	bne.n	8009fe0 <xTaskCreateStatic+0x28>
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	623b      	str	r3, [r7, #32]
 8009fde:	e7fe      	b.n	8009fde <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d109      	bne.n	8009ffa <xTaskCreateStatic+0x42>
 8009fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	61fb      	str	r3, [r7, #28]
 8009ff8:	e7fe      	b.n	8009ff8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ffa:	235c      	movs	r3, #92	; 0x5c
 8009ffc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2b5c      	cmp	r3, #92	; 0x5c
 800a002:	d009      	beq.n	800a018 <xTaskCreateStatic+0x60>
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	61bb      	str	r3, [r7, #24]
 800a016:	e7fe      	b.n	800a016 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a018:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01e      	beq.n	800a05e <xTaskCreateStatic+0xa6>
 800a020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a022:	2b00      	cmp	r3, #0
 800a024:	d01b      	beq.n	800a05e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a02e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	2202      	movs	r2, #2
 800a034:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a038:	2300      	movs	r3, #0
 800a03a:	9303      	str	r3, [sp, #12]
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	9302      	str	r3, [sp, #8]
 800a040:	f107 0314 	add.w	r3, r7, #20
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	68b9      	ldr	r1, [r7, #8]
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 f850 	bl	800a0f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a056:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a058:	f000 f8dc 	bl	800a214 <prvAddNewTaskToReadyList>
 800a05c:	e001      	b.n	800a062 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a05e:	2300      	movs	r3, #0
 800a060:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a062:	697b      	ldr	r3, [r7, #20]
	}
 800a064:	4618      	mov	r0, r3
 800a066:	3728      	adds	r7, #40	; 0x28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08c      	sub	sp, #48	; 0x30
 800a070:	af04      	add	r7, sp, #16
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	4613      	mov	r3, r2
 800a07a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a07c:	88fb      	ldrh	r3, [r7, #6]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4618      	mov	r0, r3
 800a082:	f001 fc05 	bl	800b890 <pvPortMalloc>
 800a086:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00e      	beq.n	800a0ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a08e:	205c      	movs	r0, #92	; 0x5c
 800a090:	f001 fbfe 	bl	800b890 <pvPortMalloc>
 800a094:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	631a      	str	r2, [r3, #48]	; 0x30
 800a0a2:	e005      	b.n	800a0b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0a4:	6978      	ldr	r0, [r7, #20]
 800a0a6:	f001 fcb5 	bl	800ba14 <vPortFree>
 800a0aa:	e001      	b.n	800a0b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d017      	beq.n	800a0e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0be:	88fa      	ldrh	r2, [r7, #6]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9303      	str	r3, [sp, #12]
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	9302      	str	r3, [sp, #8]
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	9301      	str	r3, [sp, #4]
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	68b9      	ldr	r1, [r7, #8]
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f80e 	bl	800a0f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0da:	69f8      	ldr	r0, [r7, #28]
 800a0dc:	f000 f89a 	bl	800a214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	61bb      	str	r3, [r7, #24]
 800a0e4:	e002      	b.n	800a0ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
	}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b088      	sub	sp, #32
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	60b9      	str	r1, [r7, #8]
 800a100:	607a      	str	r2, [r7, #4]
 800a102:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a106:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	461a      	mov	r2, r3
 800a10e:	21a5      	movs	r1, #165	; 0xa5
 800a110:	f002 fadd 	bl	800c6ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a11e:	3b01      	subs	r3, #1
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f023 0307 	bic.w	r3, r3, #7
 800a12c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	f003 0307 	and.w	r3, r3, #7
 800a134:	2b00      	cmp	r3, #0
 800a136:	d009      	beq.n	800a14c <prvInitialiseNewTask+0x56>
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	e7fe      	b.n	800a14a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d01f      	beq.n	800a192 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a152:	2300      	movs	r3, #0
 800a154:	61fb      	str	r3, [r7, #28]
 800a156:	e012      	b.n	800a17e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	4413      	add	r3, r2
 800a15e:	7819      	ldrb	r1, [r3, #0]
 800a160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	3334      	adds	r3, #52	; 0x34
 800a168:	460a      	mov	r2, r1
 800a16a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	4413      	add	r3, r2
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d006      	beq.n	800a186 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	3301      	adds	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	2b0f      	cmp	r3, #15
 800a182:	d9e9      	bls.n	800a158 <prvInitialiseNewTask+0x62>
 800a184:	e000      	b.n	800a188 <prvInitialiseNewTask+0x92>
			{
				break;
 800a186:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a190:	e003      	b.n	800a19a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	2b37      	cmp	r3, #55	; 0x37
 800a19e:	d901      	bls.n	800a1a4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1a0:	2337      	movs	r3, #55	; 0x37
 800a1a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff f954 	bl	8009468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	3318      	adds	r3, #24
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff f94f 	bl	8009468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	68f9      	ldr	r1, [r7, #12]
 800a1f2:	69b8      	ldr	r0, [r7, #24]
 800a1f4:	f001 f90c 	bl	800b410 <pxPortInitialiseStack>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a20a:	bf00      	nop
 800a20c:	3720      	adds	r7, #32
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a21c:	f001 fa1e 	bl	800b65c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a220:	4b2d      	ldr	r3, [pc, #180]	; (800a2d8 <prvAddNewTaskToReadyList+0xc4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	4a2c      	ldr	r2, [pc, #176]	; (800a2d8 <prvAddNewTaskToReadyList+0xc4>)
 800a228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a22a:	4b2c      	ldr	r3, [pc, #176]	; (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d109      	bne.n	800a246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a232:	4a2a      	ldr	r2, [pc, #168]	; (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a238:	4b27      	ldr	r3, [pc, #156]	; (800a2d8 <prvAddNewTaskToReadyList+0xc4>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d110      	bne.n	800a262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a240:	f000 fc08 	bl	800aa54 <prvInitialiseTaskLists>
 800a244:	e00d      	b.n	800a262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a246:	4b26      	ldr	r3, [pc, #152]	; (800a2e0 <prvAddNewTaskToReadyList+0xcc>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d109      	bne.n	800a262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a24e:	4b23      	ldr	r3, [pc, #140]	; (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d802      	bhi.n	800a262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a25c:	4a1f      	ldr	r2, [pc, #124]	; (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a262:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <prvAddNewTaskToReadyList+0xd0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3301      	adds	r3, #1
 800a268:	4a1e      	ldr	r2, [pc, #120]	; (800a2e4 <prvAddNewTaskToReadyList+0xd0>)
 800a26a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a26c:	4b1d      	ldr	r3, [pc, #116]	; (800a2e4 <prvAddNewTaskToReadyList+0xd0>)
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	4b1b      	ldr	r3, [pc, #108]	; (800a2e8 <prvAddNewTaskToReadyList+0xd4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d903      	bls.n	800a288 <prvAddNewTaskToReadyList+0x74>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	4a18      	ldr	r2, [pc, #96]	; (800a2e8 <prvAddNewTaskToReadyList+0xd4>)
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4a15      	ldr	r2, [pc, #84]	; (800a2ec <prvAddNewTaskToReadyList+0xd8>)
 800a296:	441a      	add	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7ff f8ef 	bl	8009482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2a4:	f001 fa08 	bl	800b6b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2a8:	4b0d      	ldr	r3, [pc, #52]	; (800a2e0 <prvAddNewTaskToReadyList+0xcc>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00e      	beq.n	800a2ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2b0:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <prvAddNewTaskToReadyList+0xc8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d207      	bcs.n	800a2ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2be:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <prvAddNewTaskToReadyList+0xdc>)
 800a2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000f18 	.word	0x20000f18
 800a2dc:	20000a44 	.word	0x20000a44
 800a2e0:	20000f24 	.word	0x20000f24
 800a2e4:	20000f34 	.word	0x20000f34
 800a2e8:	20000f20 	.word	0x20000f20
 800a2ec:	20000a48 	.word	0x20000a48
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d016      	beq.n	800a334 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a306:	4b13      	ldr	r3, [pc, #76]	; (800a354 <vTaskDelay+0x60>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d009      	beq.n	800a322 <vTaskDelay+0x2e>
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	60bb      	str	r3, [r7, #8]
 800a320:	e7fe      	b.n	800a320 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a322:	f000 f87f 	bl	800a424 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a326:	2100      	movs	r1, #0
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fcd7 	bl	800acdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a32e:	f000 f887 	bl	800a440 <xTaskResumeAll>
 800a332:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d107      	bne.n	800a34a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a33a:	4b07      	ldr	r3, [pc, #28]	; (800a358 <vTaskDelay+0x64>)
 800a33c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000f40 	.word	0x20000f40
 800a358:	e000ed04 	.word	0xe000ed04

0800a35c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08a      	sub	sp, #40	; 0x28
 800a360:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a366:	2300      	movs	r3, #0
 800a368:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a36a:	463a      	mov	r2, r7
 800a36c:	1d39      	adds	r1, r7, #4
 800a36e:	f107 0308 	add.w	r3, r7, #8
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff f824 	bl	80093c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	9202      	str	r2, [sp, #8]
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	2300      	movs	r3, #0
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	2300      	movs	r3, #0
 800a388:	460a      	mov	r2, r1
 800a38a:	4920      	ldr	r1, [pc, #128]	; (800a40c <vTaskStartScheduler+0xb0>)
 800a38c:	4820      	ldr	r0, [pc, #128]	; (800a410 <vTaskStartScheduler+0xb4>)
 800a38e:	f7ff fe13 	bl	8009fb8 <xTaskCreateStatic>
 800a392:	4602      	mov	r2, r0
 800a394:	4b1f      	ldr	r3, [pc, #124]	; (800a414 <vTaskStartScheduler+0xb8>)
 800a396:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a398:	4b1e      	ldr	r3, [pc, #120]	; (800a414 <vTaskStartScheduler+0xb8>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	e001      	b.n	800a3aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d102      	bne.n	800a3b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3b0:	f000 fce8 	bl	800ad84 <xTimerCreateTimerTask>
 800a3b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d115      	bne.n	800a3e8 <vTaskStartScheduler+0x8c>
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3ce:	4b12      	ldr	r3, [pc, #72]	; (800a418 <vTaskStartScheduler+0xbc>)
 800a3d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3d6:	4b11      	ldr	r3, [pc, #68]	; (800a41c <vTaskStartScheduler+0xc0>)
 800a3d8:	2201      	movs	r2, #1
 800a3da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3dc:	4b10      	ldr	r3, [pc, #64]	; (800a420 <vTaskStartScheduler+0xc4>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3e2:	f001 f89d 	bl	800b520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3e6:	e00d      	b.n	800a404 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3ee:	d109      	bne.n	800a404 <vTaskStartScheduler+0xa8>
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	e7fe      	b.n	800a402 <vTaskStartScheduler+0xa6>
}
 800a404:	bf00      	nop
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	0800e7e0 	.word	0x0800e7e0
 800a410:	0800aa25 	.word	0x0800aa25
 800a414:	20000f3c 	.word	0x20000f3c
 800a418:	20000f38 	.word	0x20000f38
 800a41c:	20000f24 	.word	0x20000f24
 800a420:	20000f1c 	.word	0x20000f1c

0800a424 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a428:	4b04      	ldr	r3, [pc, #16]	; (800a43c <vTaskSuspendAll+0x18>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3301      	adds	r3, #1
 800a42e:	4a03      	ldr	r2, [pc, #12]	; (800a43c <vTaskSuspendAll+0x18>)
 800a430:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a432:	bf00      	nop
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20000f40 	.word	0x20000f40

0800a440 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a44a:	2300      	movs	r3, #0
 800a44c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a44e:	4b41      	ldr	r3, [pc, #260]	; (800a554 <xTaskResumeAll+0x114>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d109      	bne.n	800a46a <xTaskResumeAll+0x2a>
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	603b      	str	r3, [r7, #0]
 800a468:	e7fe      	b.n	800a468 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a46a:	f001 f8f7 	bl	800b65c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a46e:	4b39      	ldr	r3, [pc, #228]	; (800a554 <xTaskResumeAll+0x114>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3b01      	subs	r3, #1
 800a474:	4a37      	ldr	r2, [pc, #220]	; (800a554 <xTaskResumeAll+0x114>)
 800a476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a478:	4b36      	ldr	r3, [pc, #216]	; (800a554 <xTaskResumeAll+0x114>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d162      	bne.n	800a546 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a480:	4b35      	ldr	r3, [pc, #212]	; (800a558 <xTaskResumeAll+0x118>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d05e      	beq.n	800a546 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a488:	e02f      	b.n	800a4ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48a:	4b34      	ldr	r3, [pc, #208]	; (800a55c <xTaskResumeAll+0x11c>)
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3318      	adds	r3, #24
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff f850 	bl	800953c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff f84b 	bl	800953c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4aa:	4b2d      	ldr	r3, [pc, #180]	; (800a560 <xTaskResumeAll+0x120>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d903      	bls.n	800a4ba <xTaskResumeAll+0x7a>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	4a2a      	ldr	r2, [pc, #168]	; (800a560 <xTaskResumeAll+0x120>)
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4be:	4613      	mov	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4a27      	ldr	r2, [pc, #156]	; (800a564 <xTaskResumeAll+0x124>)
 800a4c8:	441a      	add	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	f7fe ffd6 	bl	8009482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4da:	4b23      	ldr	r3, [pc, #140]	; (800a568 <xTaskResumeAll+0x128>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d302      	bcc.n	800a4ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a4e4:	4b21      	ldr	r3, [pc, #132]	; (800a56c <xTaskResumeAll+0x12c>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4ea:	4b1c      	ldr	r3, [pc, #112]	; (800a55c <xTaskResumeAll+0x11c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1cb      	bne.n	800a48a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4f8:	f000 fb46 	bl	800ab88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a4fc:	4b1c      	ldr	r3, [pc, #112]	; (800a570 <xTaskResumeAll+0x130>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d010      	beq.n	800a52a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a508:	f000 f846 	bl	800a598 <xTaskIncrementTick>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a512:	4b16      	ldr	r3, [pc, #88]	; (800a56c <xTaskResumeAll+0x12c>)
 800a514:	2201      	movs	r2, #1
 800a516:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3b01      	subs	r3, #1
 800a51c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1f1      	bne.n	800a508 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a524:	4b12      	ldr	r3, [pc, #72]	; (800a570 <xTaskResumeAll+0x130>)
 800a526:	2200      	movs	r2, #0
 800a528:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a52a:	4b10      	ldr	r3, [pc, #64]	; (800a56c <xTaskResumeAll+0x12c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a532:	2301      	movs	r3, #1
 800a534:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a536:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <xTaskResumeAll+0x134>)
 800a538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a546:	f001 f8b7 	bl	800b6b8 <vPortExitCritical>

	return xAlreadyYielded;
 800a54a:	68bb      	ldr	r3, [r7, #8]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20000f40 	.word	0x20000f40
 800a558:	20000f18 	.word	0x20000f18
 800a55c:	20000ed8 	.word	0x20000ed8
 800a560:	20000f20 	.word	0x20000f20
 800a564:	20000a48 	.word	0x20000a48
 800a568:	20000a44 	.word	0x20000a44
 800a56c:	20000f2c 	.word	0x20000f2c
 800a570:	20000f28 	.word	0x20000f28
 800a574:	e000ed04 	.word	0xe000ed04

0800a578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <xTaskGetTickCount+0x1c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a584:	687b      	ldr	r3, [r7, #4]
}
 800a586:	4618      	mov	r0, r3
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	20000f1c 	.word	0x20000f1c

0800a598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5a2:	4b4e      	ldr	r3, [pc, #312]	; (800a6dc <xTaskIncrementTick+0x144>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f040 8088 	bne.w	800a6bc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5ac:	4b4c      	ldr	r3, [pc, #304]	; (800a6e0 <xTaskIncrementTick+0x148>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5b4:	4a4a      	ldr	r2, [pc, #296]	; (800a6e0 <xTaskIncrementTick+0x148>)
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d11f      	bne.n	800a600 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5c0:	4b48      	ldr	r3, [pc, #288]	; (800a6e4 <xTaskIncrementTick+0x14c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d009      	beq.n	800a5de <xTaskIncrementTick+0x46>
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	e7fe      	b.n	800a5dc <xTaskIncrementTick+0x44>
 800a5de:	4b41      	ldr	r3, [pc, #260]	; (800a6e4 <xTaskIncrementTick+0x14c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	4b40      	ldr	r3, [pc, #256]	; (800a6e8 <xTaskIncrementTick+0x150>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a3e      	ldr	r2, [pc, #248]	; (800a6e4 <xTaskIncrementTick+0x14c>)
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	4a3e      	ldr	r2, [pc, #248]	; (800a6e8 <xTaskIncrementTick+0x150>)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	4b3e      	ldr	r3, [pc, #248]	; (800a6ec <xTaskIncrementTick+0x154>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	4a3c      	ldr	r2, [pc, #240]	; (800a6ec <xTaskIncrementTick+0x154>)
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	f000 fac4 	bl	800ab88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a600:	4b3b      	ldr	r3, [pc, #236]	; (800a6f0 <xTaskIncrementTick+0x158>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	429a      	cmp	r2, r3
 800a608:	d349      	bcc.n	800a69e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a60a:	4b36      	ldr	r3, [pc, #216]	; (800a6e4 <xTaskIncrementTick+0x14c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d104      	bne.n	800a61e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a614:	4b36      	ldr	r3, [pc, #216]	; (800a6f0 <xTaskIncrementTick+0x158>)
 800a616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a61a:	601a      	str	r2, [r3, #0]
					break;
 800a61c:	e03f      	b.n	800a69e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a61e:	4b31      	ldr	r3, [pc, #196]	; (800a6e4 <xTaskIncrementTick+0x14c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	429a      	cmp	r2, r3
 800a634:	d203      	bcs.n	800a63e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a636:	4a2e      	ldr	r2, [pc, #184]	; (800a6f0 <xTaskIncrementTick+0x158>)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a63c:	e02f      	b.n	800a69e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	3304      	adds	r3, #4
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe ff7a 	bl	800953c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d004      	beq.n	800a65a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	3318      	adds	r3, #24
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe ff71 	bl	800953c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65e:	4b25      	ldr	r3, [pc, #148]	; (800a6f4 <xTaskIncrementTick+0x15c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	d903      	bls.n	800a66e <xTaskIncrementTick+0xd6>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66a:	4a22      	ldr	r2, [pc, #136]	; (800a6f4 <xTaskIncrementTick+0x15c>)
 800a66c:	6013      	str	r3, [r2, #0]
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4a1f      	ldr	r2, [pc, #124]	; (800a6f8 <xTaskIncrementTick+0x160>)
 800a67c:	441a      	add	r2, r3
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	3304      	adds	r3, #4
 800a682:	4619      	mov	r1, r3
 800a684:	4610      	mov	r0, r2
 800a686:	f7fe fefc 	bl	8009482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68e:	4b1b      	ldr	r3, [pc, #108]	; (800a6fc <xTaskIncrementTick+0x164>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	429a      	cmp	r2, r3
 800a696:	d3b8      	bcc.n	800a60a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a698:	2301      	movs	r3, #1
 800a69a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a69c:	e7b5      	b.n	800a60a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a69e:	4b17      	ldr	r3, [pc, #92]	; (800a6fc <xTaskIncrementTick+0x164>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a4:	4914      	ldr	r1, [pc, #80]	; (800a6f8 <xTaskIncrementTick+0x160>)
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	440b      	add	r3, r1
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d907      	bls.n	800a6c6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	617b      	str	r3, [r7, #20]
 800a6ba:	e004      	b.n	800a6c6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a6bc:	4b10      	ldr	r3, [pc, #64]	; (800a700 <xTaskIncrementTick+0x168>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	4a0f      	ldr	r2, [pc, #60]	; (800a700 <xTaskIncrementTick+0x168>)
 800a6c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a6c6:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <xTaskIncrementTick+0x16c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a6d2:	697b      	ldr	r3, [r7, #20]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	20000f40 	.word	0x20000f40
 800a6e0:	20000f1c 	.word	0x20000f1c
 800a6e4:	20000ed0 	.word	0x20000ed0
 800a6e8:	20000ed4 	.word	0x20000ed4
 800a6ec:	20000f30 	.word	0x20000f30
 800a6f0:	20000f38 	.word	0x20000f38
 800a6f4:	20000f20 	.word	0x20000f20
 800a6f8:	20000a48 	.word	0x20000a48
 800a6fc:	20000a44 	.word	0x20000a44
 800a700:	20000f28 	.word	0x20000f28
 800a704:	20000f2c 	.word	0x20000f2c

0800a708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a70e:	4b27      	ldr	r3, [pc, #156]	; (800a7ac <vTaskSwitchContext+0xa4>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a716:	4b26      	ldr	r3, [pc, #152]	; (800a7b0 <vTaskSwitchContext+0xa8>)
 800a718:	2201      	movs	r2, #1
 800a71a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a71c:	e040      	b.n	800a7a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a71e:	4b24      	ldr	r3, [pc, #144]	; (800a7b0 <vTaskSwitchContext+0xa8>)
 800a720:	2200      	movs	r2, #0
 800a722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a724:	4b23      	ldr	r3, [pc, #140]	; (800a7b4 <vTaskSwitchContext+0xac>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e00f      	b.n	800a74c <vTaskSwitchContext+0x44>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <vTaskSwitchContext+0x3e>
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	607b      	str	r3, [r7, #4]
 800a744:	e7fe      	b.n	800a744 <vTaskSwitchContext+0x3c>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3b01      	subs	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	491a      	ldr	r1, [pc, #104]	; (800a7b8 <vTaskSwitchContext+0xb0>)
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	440b      	add	r3, r1
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d0e5      	beq.n	800a72c <vTaskSwitchContext+0x24>
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4613      	mov	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4a13      	ldr	r2, [pc, #76]	; (800a7b8 <vTaskSwitchContext+0xb0>)
 800a76c:	4413      	add	r3, r2
 800a76e:	60bb      	str	r3, [r7, #8]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	605a      	str	r2, [r3, #4]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	3308      	adds	r3, #8
 800a782:	429a      	cmp	r2, r3
 800a784:	d104      	bne.n	800a790 <vTaskSwitchContext+0x88>
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	605a      	str	r2, [r3, #4]
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	4a09      	ldr	r2, [pc, #36]	; (800a7bc <vTaskSwitchContext+0xb4>)
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	4a06      	ldr	r2, [pc, #24]	; (800a7b4 <vTaskSwitchContext+0xac>)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6013      	str	r3, [r2, #0]
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	20000f40 	.word	0x20000f40
 800a7b0:	20000f2c 	.word	0x20000f2c
 800a7b4:	20000f20 	.word	0x20000f20
 800a7b8:	20000a48 	.word	0x20000a48
 800a7bc:	20000a44 	.word	0x20000a44

0800a7c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d109      	bne.n	800a7e4 <vTaskPlaceOnEventList+0x24>
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60fb      	str	r3, [r7, #12]
 800a7e2:	e7fe      	b.n	800a7e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7e4:	4b07      	ldr	r3, [pc, #28]	; (800a804 <vTaskPlaceOnEventList+0x44>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3318      	adds	r3, #24
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7fe fe6c 	bl	80094ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	6838      	ldr	r0, [r7, #0]
 800a7f6:	f000 fa71 	bl	800acdc <prvAddCurrentTaskToDelayedList>
}
 800a7fa:	bf00      	nop
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	20000a44 	.word	0x20000a44

0800a808 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <vTaskPlaceOnEventListRestricted+0x26>
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	617b      	str	r3, [r7, #20]
 800a82c:	e7fe      	b.n	800a82c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a82e:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <vTaskPlaceOnEventListRestricted+0x50>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3318      	adds	r3, #24
 800a834:	4619      	mov	r1, r3
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7fe fe23 	bl	8009482 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a846:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	68b8      	ldr	r0, [r7, #8]
 800a84c:	f000 fa46 	bl	800acdc <prvAddCurrentTaskToDelayedList>
	}
 800a850:	bf00      	nop
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20000a44 	.word	0x20000a44

0800a85c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <xTaskRemoveFromEventList+0x2a>
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	e7fe      	b.n	800a884 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	3318      	adds	r3, #24
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fe fe56 	bl	800953c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a890:	4b1d      	ldr	r3, [pc, #116]	; (800a908 <xTaskRemoveFromEventList+0xac>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d11d      	bne.n	800a8d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	3304      	adds	r3, #4
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fe fe4d 	bl	800953c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a6:	4b19      	ldr	r3, [pc, #100]	; (800a90c <xTaskRemoveFromEventList+0xb0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d903      	bls.n	800a8b6 <xTaskRemoveFromEventList+0x5a>
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b2:	4a16      	ldr	r2, [pc, #88]	; (800a90c <xTaskRemoveFromEventList+0xb0>)
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4a13      	ldr	r2, [pc, #76]	; (800a910 <xTaskRemoveFromEventList+0xb4>)
 800a8c4:	441a      	add	r2, r3
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f7fe fdd8 	bl	8009482 <vListInsertEnd>
 800a8d2:	e005      	b.n	800a8e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	3318      	adds	r3, #24
 800a8d8:	4619      	mov	r1, r3
 800a8da:	480e      	ldr	r0, [pc, #56]	; (800a914 <xTaskRemoveFromEventList+0xb8>)
 800a8dc:	f7fe fdd1 	bl	8009482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <xTaskRemoveFromEventList+0xbc>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d905      	bls.n	800a8fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8f2:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <xTaskRemoveFromEventList+0xc0>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	e001      	b.n	800a8fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a8fe:	697b      	ldr	r3, [r7, #20]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3718      	adds	r7, #24
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	20000f40 	.word	0x20000f40
 800a90c:	20000f20 	.word	0x20000f20
 800a910:	20000a48 	.word	0x20000a48
 800a914:	20000ed8 	.word	0x20000ed8
 800a918:	20000a44 	.word	0x20000a44
 800a91c:	20000f2c 	.word	0x20000f2c

0800a920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <vTaskInternalSetTimeOutState+0x24>)
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <vTaskInternalSetTimeOutState+0x28>)
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	605a      	str	r2, [r3, #4]
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	20000f30 	.word	0x20000f30
 800a948:	20000f1c 	.word	0x20000f1c

0800a94c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d109      	bne.n	800a970 <xTaskCheckForTimeOut+0x24>
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	613b      	str	r3, [r7, #16]
 800a96e:	e7fe      	b.n	800a96e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d109      	bne.n	800a98a <xTaskCheckForTimeOut+0x3e>
 800a976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	e7fe      	b.n	800a988 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a98a:	f000 fe67 	bl	800b65c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a98e:	4b1d      	ldr	r3, [pc, #116]	; (800aa04 <xTaskCheckForTimeOut+0xb8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9a6:	d102      	bne.n	800a9ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	61fb      	str	r3, [r7, #28]
 800a9ac:	e023      	b.n	800a9f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	4b15      	ldr	r3, [pc, #84]	; (800aa08 <xTaskCheckForTimeOut+0xbc>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d007      	beq.n	800a9ca <xTaskCheckForTimeOut+0x7e>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d302      	bcc.n	800a9ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	61fb      	str	r3, [r7, #28]
 800a9c8:	e015      	b.n	800a9f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d20b      	bcs.n	800a9ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	1ad2      	subs	r2, r2, r3
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff ff9d 	bl	800a920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	61fb      	str	r3, [r7, #28]
 800a9ea:	e004      	b.n	800a9f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a9f6:	f000 fe5f 	bl	800b6b8 <vPortExitCritical>

	return xReturn;
 800a9fa:	69fb      	ldr	r3, [r7, #28]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3720      	adds	r7, #32
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	20000f1c 	.word	0x20000f1c
 800aa08:	20000f30 	.word	0x20000f30

0800aa0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa10:	4b03      	ldr	r3, [pc, #12]	; (800aa20 <vTaskMissedYield+0x14>)
 800aa12:	2201      	movs	r2, #1
 800aa14:	601a      	str	r2, [r3, #0]
}
 800aa16:	bf00      	nop
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	20000f2c 	.word	0x20000f2c

0800aa24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa2c:	f000 f852 	bl	800aad4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa30:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <prvIdleTask+0x28>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d9f9      	bls.n	800aa2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <prvIdleTask+0x2c>)
 800aa3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa48:	e7f0      	b.n	800aa2c <prvIdleTask+0x8>
 800aa4a:	bf00      	nop
 800aa4c:	20000a48 	.word	0x20000a48
 800aa50:	e000ed04 	.word	0xe000ed04

0800aa54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	607b      	str	r3, [r7, #4]
 800aa5e:	e00c      	b.n	800aa7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4a12      	ldr	r2, [pc, #72]	; (800aab4 <prvInitialiseTaskLists+0x60>)
 800aa6c:	4413      	add	r3, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fcda 	bl	8009428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3301      	adds	r3, #1
 800aa78:	607b      	str	r3, [r7, #4]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b37      	cmp	r3, #55	; 0x37
 800aa7e:	d9ef      	bls.n	800aa60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa80:	480d      	ldr	r0, [pc, #52]	; (800aab8 <prvInitialiseTaskLists+0x64>)
 800aa82:	f7fe fcd1 	bl	8009428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa86:	480d      	ldr	r0, [pc, #52]	; (800aabc <prvInitialiseTaskLists+0x68>)
 800aa88:	f7fe fcce 	bl	8009428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa8c:	480c      	ldr	r0, [pc, #48]	; (800aac0 <prvInitialiseTaskLists+0x6c>)
 800aa8e:	f7fe fccb 	bl	8009428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa92:	480c      	ldr	r0, [pc, #48]	; (800aac4 <prvInitialiseTaskLists+0x70>)
 800aa94:	f7fe fcc8 	bl	8009428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa98:	480b      	ldr	r0, [pc, #44]	; (800aac8 <prvInitialiseTaskLists+0x74>)
 800aa9a:	f7fe fcc5 	bl	8009428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa9e:	4b0b      	ldr	r3, [pc, #44]	; (800aacc <prvInitialiseTaskLists+0x78>)
 800aaa0:	4a05      	ldr	r2, [pc, #20]	; (800aab8 <prvInitialiseTaskLists+0x64>)
 800aaa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aaa4:	4b0a      	ldr	r3, [pc, #40]	; (800aad0 <prvInitialiseTaskLists+0x7c>)
 800aaa6:	4a05      	ldr	r2, [pc, #20]	; (800aabc <prvInitialiseTaskLists+0x68>)
 800aaa8:	601a      	str	r2, [r3, #0]
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20000a48 	.word	0x20000a48
 800aab8:	20000ea8 	.word	0x20000ea8
 800aabc:	20000ebc 	.word	0x20000ebc
 800aac0:	20000ed8 	.word	0x20000ed8
 800aac4:	20000eec 	.word	0x20000eec
 800aac8:	20000f04 	.word	0x20000f04
 800aacc:	20000ed0 	.word	0x20000ed0
 800aad0:	20000ed4 	.word	0x20000ed4

0800aad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aada:	e019      	b.n	800ab10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aadc:	f000 fdbe 	bl	800b65c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae0:	4b0f      	ldr	r3, [pc, #60]	; (800ab20 <prvCheckTasksWaitingTermination+0x4c>)
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fd25 	bl	800953c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <prvCheckTasksWaitingTermination+0x50>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	4a0a      	ldr	r2, [pc, #40]	; (800ab24 <prvCheckTasksWaitingTermination+0x50>)
 800aafa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aafc:	4b0a      	ldr	r3, [pc, #40]	; (800ab28 <prvCheckTasksWaitingTermination+0x54>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	4a09      	ldr	r2, [pc, #36]	; (800ab28 <prvCheckTasksWaitingTermination+0x54>)
 800ab04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab06:	f000 fdd7 	bl	800b6b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f80e 	bl	800ab2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab10:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <prvCheckTasksWaitingTermination+0x54>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1e1      	bne.n	800aadc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20000eec 	.word	0x20000eec
 800ab24:	20000f18 	.word	0x20000f18
 800ab28:	20000f00 	.word	0x20000f00

0800ab2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d108      	bne.n	800ab50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 ff66 	bl	800ba14 <vPortFree>
				vPortFree( pxTCB );
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 ff63 	bl	800ba14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab4e:	e017      	b.n	800ab80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d103      	bne.n	800ab62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 ff5a 	bl	800ba14 <vPortFree>
	}
 800ab60:	e00e      	b.n	800ab80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d009      	beq.n	800ab80 <prvDeleteTCB+0x54>
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	e7fe      	b.n	800ab7e <prvDeleteTCB+0x52>
	}
 800ab80:	bf00      	nop
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab8e:	4b0c      	ldr	r3, [pc, #48]	; (800abc0 <prvResetNextTaskUnblockTime+0x38>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d104      	bne.n	800aba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab98:	4b0a      	ldr	r3, [pc, #40]	; (800abc4 <prvResetNextTaskUnblockTime+0x3c>)
 800ab9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aba0:	e008      	b.n	800abb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aba2:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <prvResetNextTaskUnblockTime+0x38>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	4a04      	ldr	r2, [pc, #16]	; (800abc4 <prvResetNextTaskUnblockTime+0x3c>)
 800abb2:	6013      	str	r3, [r2, #0]
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	20000ed0 	.word	0x20000ed0
 800abc4:	20000f38 	.word	0x20000f38

0800abc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abce:	4b0b      	ldr	r3, [pc, #44]	; (800abfc <xTaskGetSchedulerState+0x34>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abd6:	2301      	movs	r3, #1
 800abd8:	607b      	str	r3, [r7, #4]
 800abda:	e008      	b.n	800abee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abdc:	4b08      	ldr	r3, [pc, #32]	; (800ac00 <xTaskGetSchedulerState+0x38>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abe4:	2302      	movs	r3, #2
 800abe6:	607b      	str	r3, [r7, #4]
 800abe8:	e001      	b.n	800abee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abea:	2300      	movs	r3, #0
 800abec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abee:	687b      	ldr	r3, [r7, #4]
	}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	20000f24 	.word	0x20000f24
 800ac00:	20000f40 	.word	0x20000f40

0800ac04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d054      	beq.n	800acc4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac1a:	4b2d      	ldr	r3, [pc, #180]	; (800acd0 <xTaskPriorityDisinherit+0xcc>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d009      	beq.n	800ac38 <xTaskPriorityDisinherit+0x34>
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	e7fe      	b.n	800ac36 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d109      	bne.n	800ac54 <xTaskPriorityDisinherit+0x50>
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	60bb      	str	r3, [r7, #8]
 800ac52:	e7fe      	b.n	800ac52 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac58:	1e5a      	subs	r2, r3, #1
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d02c      	beq.n	800acc4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d128      	bne.n	800acc4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	3304      	adds	r3, #4
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe fc60 	bl	800953c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac94:	4b0f      	ldr	r3, [pc, #60]	; (800acd4 <xTaskPriorityDisinherit+0xd0>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d903      	bls.n	800aca4 <xTaskPriorityDisinherit+0xa0>
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	4a0c      	ldr	r2, [pc, #48]	; (800acd4 <xTaskPriorityDisinherit+0xd0>)
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4a09      	ldr	r2, [pc, #36]	; (800acd8 <xTaskPriorityDisinherit+0xd4>)
 800acb2:	441a      	add	r2, r3
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	3304      	adds	r3, #4
 800acb8:	4619      	mov	r1, r3
 800acba:	4610      	mov	r0, r2
 800acbc:	f7fe fbe1 	bl	8009482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acc0:	2301      	movs	r3, #1
 800acc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acc4:	697b      	ldr	r3, [r7, #20]
	}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20000a44 	.word	0x20000a44
 800acd4:	20000f20 	.word	0x20000f20
 800acd8:	20000a48 	.word	0x20000a48

0800acdc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ace6:	4b21      	ldr	r3, [pc, #132]	; (800ad6c <prvAddCurrentTaskToDelayedList+0x90>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acec:	4b20      	ldr	r3, [pc, #128]	; (800ad70 <prvAddCurrentTaskToDelayedList+0x94>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	3304      	adds	r3, #4
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe fc22 	bl	800953c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acfe:	d10a      	bne.n	800ad16 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d007      	beq.n	800ad16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad06:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4819      	ldr	r0, [pc, #100]	; (800ad74 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad10:	f7fe fbb7 	bl	8009482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad14:	e026      	b.n	800ad64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad1e:	4b14      	ldr	r3, [pc, #80]	; (800ad70 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d209      	bcs.n	800ad42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad2e:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3304      	adds	r3, #4
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	f7fe fbc5 	bl	80094ca <vListInsert>
}
 800ad40:	e010      	b.n	800ad64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad42:	4b0e      	ldr	r3, [pc, #56]	; (800ad7c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	f7fe fbbb 	bl	80094ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad54:	4b0a      	ldr	r3, [pc, #40]	; (800ad80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d202      	bcs.n	800ad64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad5e:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	6013      	str	r3, [r2, #0]
}
 800ad64:	bf00      	nop
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20000f1c 	.word	0x20000f1c
 800ad70:	20000a44 	.word	0x20000a44
 800ad74:	20000f04 	.word	0x20000f04
 800ad78:	20000ed4 	.word	0x20000ed4
 800ad7c:	20000ed0 	.word	0x20000ed0
 800ad80:	20000f38 	.word	0x20000f38

0800ad84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08a      	sub	sp, #40	; 0x28
 800ad88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad8e:	f000 faff 	bl	800b390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad92:	4b1c      	ldr	r3, [pc, #112]	; (800ae04 <xTimerCreateTimerTask+0x80>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d021      	beq.n	800adde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ada2:	1d3a      	adds	r2, r7, #4
 800ada4:	f107 0108 	add.w	r1, r7, #8
 800ada8:	f107 030c 	add.w	r3, r7, #12
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fb21 	bl	80093f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	9202      	str	r2, [sp, #8]
 800adba:	9301      	str	r3, [sp, #4]
 800adbc:	2302      	movs	r3, #2
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	2300      	movs	r3, #0
 800adc2:	460a      	mov	r2, r1
 800adc4:	4910      	ldr	r1, [pc, #64]	; (800ae08 <xTimerCreateTimerTask+0x84>)
 800adc6:	4811      	ldr	r0, [pc, #68]	; (800ae0c <xTimerCreateTimerTask+0x88>)
 800adc8:	f7ff f8f6 	bl	8009fb8 <xTaskCreateStatic>
 800adcc:	4602      	mov	r2, r0
 800adce:	4b10      	ldr	r3, [pc, #64]	; (800ae10 <xTimerCreateTimerTask+0x8c>)
 800add0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800add2:	4b0f      	ldr	r3, [pc, #60]	; (800ae10 <xTimerCreateTimerTask+0x8c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800adda:	2301      	movs	r3, #1
 800addc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d109      	bne.n	800adf8 <xTimerCreateTimerTask+0x74>
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	613b      	str	r3, [r7, #16]
 800adf6:	e7fe      	b.n	800adf6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800adf8:	697b      	ldr	r3, [r7, #20]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	20000f74 	.word	0x20000f74
 800ae08:	0800e7e8 	.word	0x0800e7e8
 800ae0c:	0800af45 	.word	0x0800af45
 800ae10:	20000f78 	.word	0x20000f78

0800ae14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	; 0x28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d109      	bne.n	800ae40 <xTimerGenericCommand+0x2c>
 800ae2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	623b      	str	r3, [r7, #32]
 800ae3e:	e7fe      	b.n	800ae3e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae40:	4b19      	ldr	r3, [pc, #100]	; (800aea8 <xTimerGenericCommand+0x94>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d02a      	beq.n	800ae9e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2b05      	cmp	r3, #5
 800ae58:	dc18      	bgt.n	800ae8c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae5a:	f7ff feb5 	bl	800abc8 <xTaskGetSchedulerState>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d109      	bne.n	800ae78 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae64:	4b10      	ldr	r3, [pc, #64]	; (800aea8 <xTimerGenericCommand+0x94>)
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	f107 0110 	add.w	r1, r7, #16
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae70:	f7fe fccc 	bl	800980c <xQueueGenericSend>
 800ae74:	6278      	str	r0, [r7, #36]	; 0x24
 800ae76:	e012      	b.n	800ae9e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <xTimerGenericCommand+0x94>)
 800ae7a:	6818      	ldr	r0, [r3, #0]
 800ae7c:	f107 0110 	add.w	r1, r7, #16
 800ae80:	2300      	movs	r3, #0
 800ae82:	2200      	movs	r2, #0
 800ae84:	f7fe fcc2 	bl	800980c <xQueueGenericSend>
 800ae88:	6278      	str	r0, [r7, #36]	; 0x24
 800ae8a:	e008      	b.n	800ae9e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae8c:	4b06      	ldr	r3, [pc, #24]	; (800aea8 <xTimerGenericCommand+0x94>)
 800ae8e:	6818      	ldr	r0, [r3, #0]
 800ae90:	f107 0110 	add.w	r1, r7, #16
 800ae94:	2300      	movs	r3, #0
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	f7fe fdb2 	bl	8009a00 <xQueueGenericSendFromISR>
 800ae9c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3728      	adds	r7, #40	; 0x28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	20000f74 	.word	0x20000f74

0800aeac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb6:	4b22      	ldr	r3, [pc, #136]	; (800af40 <prvProcessExpiredTimer+0x94>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	3304      	adds	r3, #4
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fe fb39 	bl	800953c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d021      	beq.n	800af1c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	699a      	ldr	r2, [r3, #24]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	18d1      	adds	r1, r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	6978      	ldr	r0, [r7, #20]
 800aee6:	f000 f8d1 	bl	800b08c <prvInsertTimerInActiveList>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01e      	beq.n	800af2e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aef0:	2300      	movs	r3, #0
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	2300      	movs	r3, #0
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	2100      	movs	r1, #0
 800aefa:	6978      	ldr	r0, [r7, #20]
 800aefc:	f7ff ff8a 	bl	800ae14 <xTimerGenericCommand>
 800af00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d112      	bne.n	800af2e <prvProcessExpiredTimer+0x82>
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	e7fe      	b.n	800af1a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af22:	f023 0301 	bic.w	r3, r3, #1
 800af26:	b2da      	uxtb	r2, r3
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	6978      	ldr	r0, [r7, #20]
 800af34:	4798      	blx	r3
}
 800af36:	bf00      	nop
 800af38:	3718      	adds	r7, #24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	20000f6c 	.word	0x20000f6c

0800af44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af4c:	f107 0308 	add.w	r3, r7, #8
 800af50:	4618      	mov	r0, r3
 800af52:	f000 f857 	bl	800b004 <prvGetNextExpireTime>
 800af56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	4619      	mov	r1, r3
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f000 f803 	bl	800af68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af62:	f000 f8d5 	bl	800b110 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af66:	e7f1      	b.n	800af4c <prvTimerTask+0x8>

0800af68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af72:	f7ff fa57 	bl	800a424 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af76:	f107 0308 	add.w	r3, r7, #8
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 f866 	bl	800b04c <prvSampleTimeNow>
 800af80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d130      	bne.n	800afea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10a      	bne.n	800afa4 <prvProcessTimerOrBlockTask+0x3c>
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	429a      	cmp	r2, r3
 800af94:	d806      	bhi.n	800afa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af96:	f7ff fa53 	bl	800a440 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af9a:	68f9      	ldr	r1, [r7, #12]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7ff ff85 	bl	800aeac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afa2:	e024      	b.n	800afee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d008      	beq.n	800afbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afaa:	4b13      	ldr	r3, [pc, #76]	; (800aff8 <prvProcessTimerOrBlockTask+0x90>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <prvProcessTimerOrBlockTask+0x50>
 800afb4:	2301      	movs	r3, #1
 800afb6:	e000      	b.n	800afba <prvProcessTimerOrBlockTask+0x52>
 800afb8:	2300      	movs	r3, #0
 800afba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800afbc:	4b0f      	ldr	r3, [pc, #60]	; (800affc <prvProcessTimerOrBlockTask+0x94>)
 800afbe:	6818      	ldr	r0, [r3, #0]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	4619      	mov	r1, r3
 800afca:	f7fe ffc1 	bl	8009f50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800afce:	f7ff fa37 	bl	800a440 <xTaskResumeAll>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10a      	bne.n	800afee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800afd8:	4b09      	ldr	r3, [pc, #36]	; (800b000 <prvProcessTimerOrBlockTask+0x98>)
 800afda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	f3bf 8f6f 	isb	sy
}
 800afe8:	e001      	b.n	800afee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800afea:	f7ff fa29 	bl	800a440 <xTaskResumeAll>
}
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000f70 	.word	0x20000f70
 800affc:	20000f74 	.word	0x20000f74
 800b000:	e000ed04 	.word	0xe000ed04

0800b004 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b00c:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <prvGetNextExpireTime+0x44>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <prvGetNextExpireTime+0x16>
 800b016:	2201      	movs	r2, #1
 800b018:	e000      	b.n	800b01c <prvGetNextExpireTime+0x18>
 800b01a:	2200      	movs	r2, #0
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d105      	bne.n	800b034 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b028:	4b07      	ldr	r3, [pc, #28]	; (800b048 <prvGetNextExpireTime+0x44>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	e001      	b.n	800b038 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b038:	68fb      	ldr	r3, [r7, #12]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	20000f6c 	.word	0x20000f6c

0800b04c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b054:	f7ff fa90 	bl	800a578 <xTaskGetTickCount>
 800b058:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b05a:	4b0b      	ldr	r3, [pc, #44]	; (800b088 <prvSampleTimeNow+0x3c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	429a      	cmp	r2, r3
 800b062:	d205      	bcs.n	800b070 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b064:	f000 f930 	bl	800b2c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	e002      	b.n	800b076 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b076:	4a04      	ldr	r2, [pc, #16]	; (800b088 <prvSampleTimeNow+0x3c>)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b07c:	68fb      	ldr	r3, [r7, #12]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20000f7c 	.word	0x20000f7c

0800b08c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
 800b098:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d812      	bhi.n	800b0d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	1ad2      	subs	r2, r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d302      	bcc.n	800b0c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
 800b0c4:	e01b      	b.n	800b0fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0c6:	4b10      	ldr	r3, [pc, #64]	; (800b108 <prvInsertTimerInActiveList+0x7c>)
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7fe f9fa 	bl	80094ca <vListInsert>
 800b0d6:	e012      	b.n	800b0fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d206      	bcs.n	800b0ee <prvInsertTimerInActiveList+0x62>
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d302      	bcc.n	800b0ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	e007      	b.n	800b0fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <prvInsertTimerInActiveList+0x80>)
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	f7fe f9e6 	bl	80094ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0fe:	697b      	ldr	r3, [r7, #20]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20000f70 	.word	0x20000f70
 800b10c:	20000f6c 	.word	0x20000f6c

0800b110 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b08e      	sub	sp, #56	; 0x38
 800b114:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b116:	e0c6      	b.n	800b2a6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	da17      	bge.n	800b14e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b11e:	1d3b      	adds	r3, r7, #4
 800b120:	3304      	adds	r3, #4
 800b122:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <prvProcessReceivedCommands+0x2e>
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	61fb      	str	r3, [r7, #28]
 800b13c:	e7fe      	b.n	800b13c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b144:	6850      	ldr	r0, [r2, #4]
 800b146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b148:	6892      	ldr	r2, [r2, #8]
 800b14a:	4611      	mov	r1, r2
 800b14c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	f2c0 80a7 	blt.w	800b2a4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	3304      	adds	r3, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f7fe f9e8 	bl	800953c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b16c:	463b      	mov	r3, r7
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff ff6c 	bl	800b04c <prvSampleTimeNow>
 800b174:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b09      	cmp	r3, #9
 800b17a:	f200 8094 	bhi.w	800b2a6 <prvProcessReceivedCommands+0x196>
 800b17e:	a201      	add	r2, pc, #4	; (adr r2, 800b184 <prvProcessReceivedCommands+0x74>)
 800b180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b184:	0800b1ad 	.word	0x0800b1ad
 800b188:	0800b1ad 	.word	0x0800b1ad
 800b18c:	0800b1ad 	.word	0x0800b1ad
 800b190:	0800b21f 	.word	0x0800b21f
 800b194:	0800b233 	.word	0x0800b233
 800b198:	0800b27b 	.word	0x0800b27b
 800b19c:	0800b1ad 	.word	0x0800b1ad
 800b1a0:	0800b1ad 	.word	0x0800b1ad
 800b1a4:	0800b21f 	.word	0x0800b21f
 800b1a8:	0800b233 	.word	0x0800b233
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	18d1      	adds	r1, r2, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1cc:	f7ff ff5e 	bl	800b08c <prvInsertTimerInActiveList>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d067      	beq.n	800b2a6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d05c      	beq.n	800b2a6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	441a      	add	r2, r3
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1fe:	f7ff fe09 	bl	800ae14 <xTimerGenericCommand>
 800b202:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d14d      	bne.n	800b2a6 <prvProcessReceivedCommands+0x196>
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	61bb      	str	r3, [r7, #24]
 800b21c:	e7fe      	b.n	800b21c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b224:	f023 0301 	bic.w	r3, r3, #1
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b230:	e039      	b.n	800b2a6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b238:	f043 0301 	orr.w	r3, r3, #1
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d109      	bne.n	800b266 <prvProcessReceivedCommands+0x156>
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	617b      	str	r3, [r7, #20]
 800b264:	e7fe      	b.n	800b264 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	699a      	ldr	r2, [r3, #24]
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	18d1      	adds	r1, r2, r3
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b274:	f7ff ff0a 	bl	800b08c <prvInsertTimerInActiveList>
					break;
 800b278:	e015      	b.n	800b2a6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d103      	bne.n	800b290 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b28a:	f000 fbc3 	bl	800ba14 <vPortFree>
 800b28e:	e00a      	b.n	800b2a6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b296:	f023 0301 	bic.w	r3, r3, #1
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2a2:	e000      	b.n	800b2a6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b2a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2a6:	4b07      	ldr	r3, [pc, #28]	; (800b2c4 <prvProcessReceivedCommands+0x1b4>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	1d39      	adds	r1, r7, #4
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fc3a 	bl	8009b28 <xQueueReceive>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f47f af2e 	bne.w	800b118 <prvProcessReceivedCommands+0x8>
	}
}
 800b2bc:	bf00      	nop
 800b2be:	3730      	adds	r7, #48	; 0x30
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20000f74 	.word	0x20000f74

0800b2c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2ce:	e047      	b.n	800b360 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2d0:	4b2d      	ldr	r3, [pc, #180]	; (800b388 <prvSwitchTimerLists+0xc0>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2da:	4b2b      	ldr	r3, [pc, #172]	; (800b388 <prvSwitchTimerLists+0xc0>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe f927 	bl	800953c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b00      	cmp	r3, #0
 800b302:	d02d      	beq.n	800b360 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4413      	add	r3, r2
 800b30c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	429a      	cmp	r2, r3
 800b314:	d90e      	bls.n	800b334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b322:	4b19      	ldr	r3, [pc, #100]	; (800b388 <prvSwitchTimerLists+0xc0>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3304      	adds	r3, #4
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7fe f8cc 	bl	80094ca <vListInsert>
 800b332:	e015      	b.n	800b360 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b334:	2300      	movs	r3, #0
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	2300      	movs	r3, #0
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	2100      	movs	r1, #0
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7ff fd68 	bl	800ae14 <xTimerGenericCommand>
 800b344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d109      	bne.n	800b360 <prvSwitchTimerLists+0x98>
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	603b      	str	r3, [r7, #0]
 800b35e:	e7fe      	b.n	800b35e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b360:	4b09      	ldr	r3, [pc, #36]	; (800b388 <prvSwitchTimerLists+0xc0>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1b2      	bne.n	800b2d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b36a:	4b07      	ldr	r3, [pc, #28]	; (800b388 <prvSwitchTimerLists+0xc0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b370:	4b06      	ldr	r3, [pc, #24]	; (800b38c <prvSwitchTimerLists+0xc4>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a04      	ldr	r2, [pc, #16]	; (800b388 <prvSwitchTimerLists+0xc0>)
 800b376:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b378:	4a04      	ldr	r2, [pc, #16]	; (800b38c <prvSwitchTimerLists+0xc4>)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	6013      	str	r3, [r2, #0]
}
 800b37e:	bf00      	nop
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20000f6c 	.word	0x20000f6c
 800b38c:	20000f70 	.word	0x20000f70

0800b390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b396:	f000 f961 	bl	800b65c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b39a:	4b15      	ldr	r3, [pc, #84]	; (800b3f0 <prvCheckForValidListAndQueue+0x60>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d120      	bne.n	800b3e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3a2:	4814      	ldr	r0, [pc, #80]	; (800b3f4 <prvCheckForValidListAndQueue+0x64>)
 800b3a4:	f7fe f840 	bl	8009428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3a8:	4813      	ldr	r0, [pc, #76]	; (800b3f8 <prvCheckForValidListAndQueue+0x68>)
 800b3aa:	f7fe f83d 	bl	8009428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3ae:	4b13      	ldr	r3, [pc, #76]	; (800b3fc <prvCheckForValidListAndQueue+0x6c>)
 800b3b0:	4a10      	ldr	r2, [pc, #64]	; (800b3f4 <prvCheckForValidListAndQueue+0x64>)
 800b3b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3b4:	4b12      	ldr	r3, [pc, #72]	; (800b400 <prvCheckForValidListAndQueue+0x70>)
 800b3b6:	4a10      	ldr	r2, [pc, #64]	; (800b3f8 <prvCheckForValidListAndQueue+0x68>)
 800b3b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	4b11      	ldr	r3, [pc, #68]	; (800b404 <prvCheckForValidListAndQueue+0x74>)
 800b3c0:	4a11      	ldr	r2, [pc, #68]	; (800b408 <prvCheckForValidListAndQueue+0x78>)
 800b3c2:	2110      	movs	r1, #16
 800b3c4:	200a      	movs	r0, #10
 800b3c6:	f7fe f94b 	bl	8009660 <xQueueGenericCreateStatic>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	4b08      	ldr	r3, [pc, #32]	; (800b3f0 <prvCheckForValidListAndQueue+0x60>)
 800b3ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <prvCheckForValidListAndQueue+0x60>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d005      	beq.n	800b3e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <prvCheckForValidListAndQueue+0x60>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	490b      	ldr	r1, [pc, #44]	; (800b40c <prvCheckForValidListAndQueue+0x7c>)
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fe fd8e 	bl	8009f00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3e4:	f000 f968 	bl	800b6b8 <vPortExitCritical>
}
 800b3e8:	bf00      	nop
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000f74 	.word	0x20000f74
 800b3f4:	20000f44 	.word	0x20000f44
 800b3f8:	20000f58 	.word	0x20000f58
 800b3fc:	20000f6c 	.word	0x20000f6c
 800b400:	20000f70 	.word	0x20000f70
 800b404:	20001020 	.word	0x20001020
 800b408:	20000f80 	.word	0x20000f80
 800b40c:	0800e7f0 	.word	0x0800e7f0

0800b410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3b04      	subs	r3, #4
 800b420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3b04      	subs	r3, #4
 800b42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	f023 0201 	bic.w	r2, r3, #1
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3b04      	subs	r3, #4
 800b43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b440:	4a0c      	ldr	r2, [pc, #48]	; (800b474 <pxPortInitialiseStack+0x64>)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3b14      	subs	r3, #20
 800b44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3b04      	subs	r3, #4
 800b456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f06f 0202 	mvn.w	r2, #2
 800b45e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3b20      	subs	r3, #32
 800b464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b466:	68fb      	ldr	r3, [r7, #12]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	0800b479 	.word	0x0800b479

0800b478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b482:	4b11      	ldr	r3, [pc, #68]	; (800b4c8 <prvTaskExitError+0x50>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b48a:	d009      	beq.n	800b4a0 <prvTaskExitError+0x28>
 800b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	60fb      	str	r3, [r7, #12]
 800b49e:	e7fe      	b.n	800b49e <prvTaskExitError+0x26>
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4b2:	bf00      	nop
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d0fc      	beq.n	800b4b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4ba:	bf00      	nop
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	2000011c 	.word	0x2000011c
 800b4cc:	00000000 	.word	0x00000000

0800b4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4d0:	4b07      	ldr	r3, [pc, #28]	; (800b4f0 <pxCurrentTCBConst2>)
 800b4d2:	6819      	ldr	r1, [r3, #0]
 800b4d4:	6808      	ldr	r0, [r1, #0]
 800b4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4da:	f380 8809 	msr	PSP, r0
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f04f 0000 	mov.w	r0, #0
 800b4e6:	f380 8811 	msr	BASEPRI, r0
 800b4ea:	4770      	bx	lr
 800b4ec:	f3af 8000 	nop.w

0800b4f0 <pxCurrentTCBConst2>:
 800b4f0:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop

0800b4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4f8:	4808      	ldr	r0, [pc, #32]	; (800b51c <prvPortStartFirstTask+0x24>)
 800b4fa:	6800      	ldr	r0, [r0, #0]
 800b4fc:	6800      	ldr	r0, [r0, #0]
 800b4fe:	f380 8808 	msr	MSP, r0
 800b502:	f04f 0000 	mov.w	r0, #0
 800b506:	f380 8814 	msr	CONTROL, r0
 800b50a:	b662      	cpsie	i
 800b50c:	b661      	cpsie	f
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	df00      	svc	0
 800b518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b51a:	bf00      	nop
 800b51c:	e000ed08 	.word	0xe000ed08

0800b520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b526:	4b44      	ldr	r3, [pc, #272]	; (800b638 <xPortStartScheduler+0x118>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a44      	ldr	r2, [pc, #272]	; (800b63c <xPortStartScheduler+0x11c>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d109      	bne.n	800b544 <xPortStartScheduler+0x24>
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	613b      	str	r3, [r7, #16]
 800b542:	e7fe      	b.n	800b542 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b544:	4b3c      	ldr	r3, [pc, #240]	; (800b638 <xPortStartScheduler+0x118>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a3d      	ldr	r2, [pc, #244]	; (800b640 <xPortStartScheduler+0x120>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d109      	bne.n	800b562 <xPortStartScheduler+0x42>
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	e7fe      	b.n	800b560 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b562:	4b38      	ldr	r3, [pc, #224]	; (800b644 <xPortStartScheduler+0x124>)
 800b564:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	22ff      	movs	r2, #255	; 0xff
 800b572:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b584:	b2da      	uxtb	r2, r3
 800b586:	4b30      	ldr	r3, [pc, #192]	; (800b648 <xPortStartScheduler+0x128>)
 800b588:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b58a:	4b30      	ldr	r3, [pc, #192]	; (800b64c <xPortStartScheduler+0x12c>)
 800b58c:	2207      	movs	r2, #7
 800b58e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b590:	e009      	b.n	800b5a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b592:	4b2e      	ldr	r3, [pc, #184]	; (800b64c <xPortStartScheduler+0x12c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3b01      	subs	r3, #1
 800b598:	4a2c      	ldr	r2, [pc, #176]	; (800b64c <xPortStartScheduler+0x12c>)
 800b59a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b59c:	78fb      	ldrb	r3, [r7, #3]
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	005b      	lsls	r3, r3, #1
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ae:	2b80      	cmp	r3, #128	; 0x80
 800b5b0:	d0ef      	beq.n	800b592 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5b2:	4b26      	ldr	r3, [pc, #152]	; (800b64c <xPortStartScheduler+0x12c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f1c3 0307 	rsb	r3, r3, #7
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d009      	beq.n	800b5d2 <xPortStartScheduler+0xb2>
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	60bb      	str	r3, [r7, #8]
 800b5d0:	e7fe      	b.n	800b5d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5d2:	4b1e      	ldr	r3, [pc, #120]	; (800b64c <xPortStartScheduler+0x12c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	021b      	lsls	r3, r3, #8
 800b5d8:	4a1c      	ldr	r2, [pc, #112]	; (800b64c <xPortStartScheduler+0x12c>)
 800b5da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5dc:	4b1b      	ldr	r3, [pc, #108]	; (800b64c <xPortStartScheduler+0x12c>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5e4:	4a19      	ldr	r2, [pc, #100]	; (800b64c <xPortStartScheduler+0x12c>)
 800b5e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5f0:	4b17      	ldr	r3, [pc, #92]	; (800b650 <xPortStartScheduler+0x130>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a16      	ldr	r2, [pc, #88]	; (800b650 <xPortStartScheduler+0x130>)
 800b5f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5fc:	4b14      	ldr	r3, [pc, #80]	; (800b650 <xPortStartScheduler+0x130>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a13      	ldr	r2, [pc, #76]	; (800b650 <xPortStartScheduler+0x130>)
 800b602:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b606:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b608:	f000 f8d6 	bl	800b7b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <xPortStartScheduler+0x134>)
 800b60e:	2200      	movs	r2, #0
 800b610:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b612:	f000 f8f5 	bl	800b800 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b616:	4b10      	ldr	r3, [pc, #64]	; (800b658 <xPortStartScheduler+0x138>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a0f      	ldr	r2, [pc, #60]	; (800b658 <xPortStartScheduler+0x138>)
 800b61c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b620:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b622:	f7ff ff69 	bl	800b4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b626:	f7ff f86f 	bl	800a708 <vTaskSwitchContext>
	prvTaskExitError();
 800b62a:	f7ff ff25 	bl	800b478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	e000ed00 	.word	0xe000ed00
 800b63c:	410fc271 	.word	0x410fc271
 800b640:	410fc270 	.word	0x410fc270
 800b644:	e000e400 	.word	0xe000e400
 800b648:	20001070 	.word	0x20001070
 800b64c:	20001074 	.word	0x20001074
 800b650:	e000ed20 	.word	0xe000ed20
 800b654:	2000011c 	.word	0x2000011c
 800b658:	e000ef34 	.word	0xe000ef34

0800b65c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b674:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <vPortEnterCritical+0x54>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3301      	adds	r3, #1
 800b67a:	4a0d      	ldr	r2, [pc, #52]	; (800b6b0 <vPortEnterCritical+0x54>)
 800b67c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b67e:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <vPortEnterCritical+0x54>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d10e      	bne.n	800b6a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b686:	4b0b      	ldr	r3, [pc, #44]	; (800b6b4 <vPortEnterCritical+0x58>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d009      	beq.n	800b6a4 <vPortEnterCritical+0x48>
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	603b      	str	r3, [r7, #0]
 800b6a2:	e7fe      	b.n	800b6a2 <vPortEnterCritical+0x46>
	}
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	2000011c 	.word	0x2000011c
 800b6b4:	e000ed04 	.word	0xe000ed04

0800b6b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6be:	4b11      	ldr	r3, [pc, #68]	; (800b704 <vPortExitCritical+0x4c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d109      	bne.n	800b6da <vPortExitCritical+0x22>
 800b6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	607b      	str	r3, [r7, #4]
 800b6d8:	e7fe      	b.n	800b6d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b6da:	4b0a      	ldr	r3, [pc, #40]	; (800b704 <vPortExitCritical+0x4c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	4a08      	ldr	r2, [pc, #32]	; (800b704 <vPortExitCritical+0x4c>)
 800b6e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6e4:	4b07      	ldr	r3, [pc, #28]	; (800b704 <vPortExitCritical+0x4c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d104      	bne.n	800b6f6 <vPortExitCritical+0x3e>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	2000011c 	.word	0x2000011c
	...

0800b710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b710:	f3ef 8009 	mrs	r0, PSP
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4b15      	ldr	r3, [pc, #84]	; (800b770 <pxCurrentTCBConst>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	f01e 0f10 	tst.w	lr, #16
 800b720:	bf08      	it	eq
 800b722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	6010      	str	r0, [r2, #0]
 800b72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b730:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b734:	f380 8811 	msr	BASEPRI, r0
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f7fe ffe2 	bl	800a708 <vTaskSwitchContext>
 800b744:	f04f 0000 	mov.w	r0, #0
 800b748:	f380 8811 	msr	BASEPRI, r0
 800b74c:	bc09      	pop	{r0, r3}
 800b74e:	6819      	ldr	r1, [r3, #0]
 800b750:	6808      	ldr	r0, [r1, #0]
 800b752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b756:	f01e 0f10 	tst.w	lr, #16
 800b75a:	bf08      	it	eq
 800b75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b760:	f380 8809 	msr	PSP, r0
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w

0800b770 <pxCurrentTCBConst>:
 800b770:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b790:	f7fe ff02 	bl	800a598 <xTaskIncrementTick>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b79a:	4b06      	ldr	r3, [pc, #24]	; (800b7b4 <xPortSysTickHandler+0x3c>)
 800b79c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	e000ed04 	.word	0xe000ed04

0800b7b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7bc:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <vPortSetupTimerInterrupt+0x34>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <vPortSetupTimerInterrupt+0x38>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <vPortSetupTimerInterrupt+0x3c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a0a      	ldr	r2, [pc, #40]	; (800b7f8 <vPortSetupTimerInterrupt+0x40>)
 800b7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d2:	099b      	lsrs	r3, r3, #6
 800b7d4:	4a09      	ldr	r2, [pc, #36]	; (800b7fc <vPortSetupTimerInterrupt+0x44>)
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7da:	4b04      	ldr	r3, [pc, #16]	; (800b7ec <vPortSetupTimerInterrupt+0x34>)
 800b7dc:	2207      	movs	r2, #7
 800b7de:	601a      	str	r2, [r3, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	e000e010 	.word	0xe000e010
 800b7f0:	e000e018 	.word	0xe000e018
 800b7f4:	20000000 	.word	0x20000000
 800b7f8:	10624dd3 	.word	0x10624dd3
 800b7fc:	e000e014 	.word	0xe000e014

0800b800 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b800:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b810 <vPortEnableVFP+0x10>
 800b804:	6801      	ldr	r1, [r0, #0]
 800b806:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b80a:	6001      	str	r1, [r0, #0]
 800b80c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b80e:	bf00      	nop
 800b810:	e000ed88 	.word	0xe000ed88

0800b814 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b81a:	f3ef 8305 	mrs	r3, IPSR
 800b81e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2b0f      	cmp	r3, #15
 800b824:	d913      	bls.n	800b84e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b826:	4a16      	ldr	r2, [pc, #88]	; (800b880 <vPortValidateInterruptPriority+0x6c>)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	4413      	add	r3, r2
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b830:	4b14      	ldr	r3, [pc, #80]	; (800b884 <vPortValidateInterruptPriority+0x70>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	7afa      	ldrb	r2, [r7, #11]
 800b836:	429a      	cmp	r2, r3
 800b838:	d209      	bcs.n	800b84e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83e:	f383 8811 	msr	BASEPRI, r3
 800b842:	f3bf 8f6f 	isb	sy
 800b846:	f3bf 8f4f 	dsb	sy
 800b84a:	607b      	str	r3, [r7, #4]
 800b84c:	e7fe      	b.n	800b84c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b84e:	4b0e      	ldr	r3, [pc, #56]	; (800b888 <vPortValidateInterruptPriority+0x74>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b856:	4b0d      	ldr	r3, [pc, #52]	; (800b88c <vPortValidateInterruptPriority+0x78>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d909      	bls.n	800b872 <vPortValidateInterruptPriority+0x5e>
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	e7fe      	b.n	800b870 <vPortValidateInterruptPriority+0x5c>
	}
 800b872:	bf00      	nop
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	e000e3f0 	.word	0xe000e3f0
 800b884:	20001070 	.word	0x20001070
 800b888:	e000ed0c 	.word	0xe000ed0c
 800b88c:	20001074 	.word	0x20001074

0800b890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b08a      	sub	sp, #40	; 0x28
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b898:	2300      	movs	r3, #0
 800b89a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b89c:	f7fe fdc2 	bl	800a424 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8a0:	4b57      	ldr	r3, [pc, #348]	; (800ba00 <pvPortMalloc+0x170>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8a8:	f000 f90c 	bl	800bac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8ac:	4b55      	ldr	r3, [pc, #340]	; (800ba04 <pvPortMalloc+0x174>)
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f040 808c 	bne.w	800b9d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d01c      	beq.n	800b8fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b8c0:	2208      	movs	r2, #8
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f003 0307 	and.w	r3, r3, #7
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d013      	beq.n	800b8fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f023 0307 	bic.w	r3, r3, #7
 800b8d8:	3308      	adds	r3, #8
 800b8da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f003 0307 	and.w	r3, r3, #7
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d009      	beq.n	800b8fa <pvPortMalloc+0x6a>
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	617b      	str	r3, [r7, #20]
 800b8f8:	e7fe      	b.n	800b8f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d068      	beq.n	800b9d2 <pvPortMalloc+0x142>
 800b900:	4b41      	ldr	r3, [pc, #260]	; (800ba08 <pvPortMalloc+0x178>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	429a      	cmp	r2, r3
 800b908:	d863      	bhi.n	800b9d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b90a:	4b40      	ldr	r3, [pc, #256]	; (800ba0c <pvPortMalloc+0x17c>)
 800b90c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b90e:	4b3f      	ldr	r3, [pc, #252]	; (800ba0c <pvPortMalloc+0x17c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b914:	e004      	b.n	800b920 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	429a      	cmp	r2, r3
 800b928:	d903      	bls.n	800b932 <pvPortMalloc+0xa2>
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1f1      	bne.n	800b916 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b932:	4b33      	ldr	r3, [pc, #204]	; (800ba00 <pvPortMalloc+0x170>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b938:	429a      	cmp	r2, r3
 800b93a:	d04a      	beq.n	800b9d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2208      	movs	r2, #8
 800b942:	4413      	add	r3, r2
 800b944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	1ad2      	subs	r2, r2, r3
 800b956:	2308      	movs	r3, #8
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d91e      	bls.n	800b99c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4413      	add	r3, r2
 800b964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	f003 0307 	and.w	r3, r3, #7
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d009      	beq.n	800b984 <pvPortMalloc+0xf4>
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	613b      	str	r3, [r7, #16]
 800b982:	e7fe      	b.n	800b982 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	1ad2      	subs	r2, r2, r3
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b996:	69b8      	ldr	r0, [r7, #24]
 800b998:	f000 f8f6 	bl	800bb88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b99c:	4b1a      	ldr	r3, [pc, #104]	; (800ba08 <pvPortMalloc+0x178>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	4a18      	ldr	r2, [pc, #96]	; (800ba08 <pvPortMalloc+0x178>)
 800b9a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9aa:	4b17      	ldr	r3, [pc, #92]	; (800ba08 <pvPortMalloc+0x178>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	4b18      	ldr	r3, [pc, #96]	; (800ba10 <pvPortMalloc+0x180>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d203      	bcs.n	800b9be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9b6:	4b14      	ldr	r3, [pc, #80]	; (800ba08 <pvPortMalloc+0x178>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a15      	ldr	r2, [pc, #84]	; (800ba10 <pvPortMalloc+0x180>)
 800b9bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	4b10      	ldr	r3, [pc, #64]	; (800ba04 <pvPortMalloc+0x174>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	431a      	orrs	r2, r3
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9d2:	f7fe fd35 	bl	800a440 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	f003 0307 	and.w	r3, r3, #7
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d009      	beq.n	800b9f4 <pvPortMalloc+0x164>
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	60fb      	str	r3, [r7, #12]
 800b9f2:	e7fe      	b.n	800b9f2 <pvPortMalloc+0x162>
	return pvReturn;
 800b9f4:	69fb      	ldr	r3, [r7, #28]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3728      	adds	r7, #40	; 0x28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20004c80 	.word	0x20004c80
 800ba04:	20004c8c 	.word	0x20004c8c
 800ba08:	20004c84 	.word	0x20004c84
 800ba0c:	20004c78 	.word	0x20004c78
 800ba10:	20004c88 	.word	0x20004c88

0800ba14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d046      	beq.n	800bab4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba26:	2308      	movs	r3, #8
 800ba28:	425b      	negs	r3, r3
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	4b20      	ldr	r3, [pc, #128]	; (800babc <vPortFree+0xa8>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d109      	bne.n	800ba56 <vPortFree+0x42>
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	e7fe      	b.n	800ba54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d009      	beq.n	800ba72 <vPortFree+0x5e>
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	60bb      	str	r3, [r7, #8]
 800ba70:	e7fe      	b.n	800ba70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	4b11      	ldr	r3, [pc, #68]	; (800babc <vPortFree+0xa8>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d019      	beq.n	800bab4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d115      	bne.n	800bab4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	4b0b      	ldr	r3, [pc, #44]	; (800babc <vPortFree+0xa8>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	43db      	mvns	r3, r3
 800ba92:	401a      	ands	r2, r3
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba98:	f7fe fcc4 	bl	800a424 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <vPortFree+0xac>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4413      	add	r3, r2
 800baa6:	4a06      	ldr	r2, [pc, #24]	; (800bac0 <vPortFree+0xac>)
 800baa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800baaa:	6938      	ldr	r0, [r7, #16]
 800baac:	f000 f86c 	bl	800bb88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bab0:	f7fe fcc6 	bl	800a440 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bab4:	bf00      	nop
 800bab6:	3718      	adds	r7, #24
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	20004c8c 	.word	0x20004c8c
 800bac0:	20004c84 	.word	0x20004c84

0800bac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bad0:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <prvHeapInit+0xac>)
 800bad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f003 0307 	and.w	r3, r3, #7
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00c      	beq.n	800baf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3307      	adds	r3, #7
 800bae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 0307 	bic.w	r3, r3, #7
 800baea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	4a1f      	ldr	r2, [pc, #124]	; (800bb70 <prvHeapInit+0xac>)
 800baf4:	4413      	add	r3, r2
 800baf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bafc:	4a1d      	ldr	r2, [pc, #116]	; (800bb74 <prvHeapInit+0xb0>)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb02:	4b1c      	ldr	r3, [pc, #112]	; (800bb74 <prvHeapInit+0xb0>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb10:	2208      	movs	r2, #8
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1a9b      	subs	r3, r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f023 0307 	bic.w	r3, r3, #7
 800bb1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4a15      	ldr	r2, [pc, #84]	; (800bb78 <prvHeapInit+0xb4>)
 800bb24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <prvHeapInit+0xb4>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb2e:	4b12      	ldr	r3, [pc, #72]	; (800bb78 <prvHeapInit+0xb4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	1ad2      	subs	r2, r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb44:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <prvHeapInit+0xb4>)
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <prvHeapInit+0xb8>)
 800bb52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	4a09      	ldr	r2, [pc, #36]	; (800bb80 <prvHeapInit+0xbc>)
 800bb5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb5c:	4b09      	ldr	r3, [pc, #36]	; (800bb84 <prvHeapInit+0xc0>)
 800bb5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb62:	601a      	str	r2, [r3, #0]
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	20001078 	.word	0x20001078
 800bb74:	20004c78 	.word	0x20004c78
 800bb78:	20004c80 	.word	0x20004c80
 800bb7c:	20004c88 	.word	0x20004c88
 800bb80:	20004c84 	.word	0x20004c84
 800bb84:	20004c8c 	.word	0x20004c8c

0800bb88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb90:	4b28      	ldr	r3, [pc, #160]	; (800bc34 <prvInsertBlockIntoFreeList+0xac>)
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	e002      	b.n	800bb9c <prvInsertBlockIntoFreeList+0x14>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d8f7      	bhi.n	800bb96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d108      	bne.n	800bbca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	441a      	add	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	441a      	add	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d118      	bne.n	800bc10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <prvInsertBlockIntoFreeList+0xb0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d00d      	beq.n	800bc06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	441a      	add	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	601a      	str	r2, [r3, #0]
 800bc04:	e008      	b.n	800bc18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc06:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <prvInsertBlockIntoFreeList+0xb0>)
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	601a      	str	r2, [r3, #0]
 800bc0e:	e003      	b.n	800bc18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d002      	beq.n	800bc26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc26:	bf00      	nop
 800bc28:	3714      	adds	r7, #20
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20004c78 	.word	0x20004c78
 800bc38:	20004c80 	.word	0x20004c80

0800bc3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc40:	2200      	movs	r2, #0
 800bc42:	4912      	ldr	r1, [pc, #72]	; (800bc8c <MX_USB_DEVICE_Init+0x50>)
 800bc44:	4812      	ldr	r0, [pc, #72]	; (800bc90 <MX_USB_DEVICE_Init+0x54>)
 800bc46:	f7fc f9ad 	bl	8007fa4 <USBD_Init>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc50:	f7f5 fdc6 	bl	80017e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc54:	490f      	ldr	r1, [pc, #60]	; (800bc94 <MX_USB_DEVICE_Init+0x58>)
 800bc56:	480e      	ldr	r0, [pc, #56]	; (800bc90 <MX_USB_DEVICE_Init+0x54>)
 800bc58:	f7fc f9da 	bl	8008010 <USBD_RegisterClass>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc62:	f7f5 fdbd 	bl	80017e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc66:	490c      	ldr	r1, [pc, #48]	; (800bc98 <MX_USB_DEVICE_Init+0x5c>)
 800bc68:	4809      	ldr	r0, [pc, #36]	; (800bc90 <MX_USB_DEVICE_Init+0x54>)
 800bc6a:	f7fc f8ff 	bl	8007e6c <USBD_CDC_RegisterInterface>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc74:	f7f5 fdb4 	bl	80017e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc78:	4805      	ldr	r0, [pc, #20]	; (800bc90 <MX_USB_DEVICE_Init+0x54>)
 800bc7a:	f7fc f9ea 	bl	8008052 <USBD_Start>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc84:	f7f5 fdac 	bl	80017e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc88:	bf00      	nop
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20000134 	.word	0x20000134
 800bc90:	2000507c 	.word	0x2000507c
 800bc94:	20000018 	.word	0x20000018
 800bc98:	20000120 	.word	0x20000120

0800bc9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bca0:	2200      	movs	r2, #0
 800bca2:	4905      	ldr	r1, [pc, #20]	; (800bcb8 <CDC_Init_FS+0x1c>)
 800bca4:	4805      	ldr	r0, [pc, #20]	; (800bcbc <CDC_Init_FS+0x20>)
 800bca6:	f7fc f8f6 	bl	8007e96 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcaa:	4905      	ldr	r1, [pc, #20]	; (800bcc0 <CDC_Init_FS+0x24>)
 800bcac:	4803      	ldr	r0, [pc, #12]	; (800bcbc <CDC_Init_FS+0x20>)
 800bcae:	f7fc f90b 	bl	8007ec8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	20005b4c 	.word	0x20005b4c
 800bcbc:	2000507c 	.word	0x2000507c
 800bcc0:	2000534c 	.word	0x2000534c

0800bcc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bcc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	6039      	str	r1, [r7, #0]
 800bcde:	71fb      	strb	r3, [r7, #7]
 800bce0:	4613      	mov	r3, r2
 800bce2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	2b23      	cmp	r3, #35	; 0x23
 800bce8:	d84a      	bhi.n	800bd80 <CDC_Control_FS+0xac>
 800bcea:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <CDC_Control_FS+0x1c>)
 800bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf0:	0800bd81 	.word	0x0800bd81
 800bcf4:	0800bd81 	.word	0x0800bd81
 800bcf8:	0800bd81 	.word	0x0800bd81
 800bcfc:	0800bd81 	.word	0x0800bd81
 800bd00:	0800bd81 	.word	0x0800bd81
 800bd04:	0800bd81 	.word	0x0800bd81
 800bd08:	0800bd81 	.word	0x0800bd81
 800bd0c:	0800bd81 	.word	0x0800bd81
 800bd10:	0800bd81 	.word	0x0800bd81
 800bd14:	0800bd81 	.word	0x0800bd81
 800bd18:	0800bd81 	.word	0x0800bd81
 800bd1c:	0800bd81 	.word	0x0800bd81
 800bd20:	0800bd81 	.word	0x0800bd81
 800bd24:	0800bd81 	.word	0x0800bd81
 800bd28:	0800bd81 	.word	0x0800bd81
 800bd2c:	0800bd81 	.word	0x0800bd81
 800bd30:	0800bd81 	.word	0x0800bd81
 800bd34:	0800bd81 	.word	0x0800bd81
 800bd38:	0800bd81 	.word	0x0800bd81
 800bd3c:	0800bd81 	.word	0x0800bd81
 800bd40:	0800bd81 	.word	0x0800bd81
 800bd44:	0800bd81 	.word	0x0800bd81
 800bd48:	0800bd81 	.word	0x0800bd81
 800bd4c:	0800bd81 	.word	0x0800bd81
 800bd50:	0800bd81 	.word	0x0800bd81
 800bd54:	0800bd81 	.word	0x0800bd81
 800bd58:	0800bd81 	.word	0x0800bd81
 800bd5c:	0800bd81 	.word	0x0800bd81
 800bd60:	0800bd81 	.word	0x0800bd81
 800bd64:	0800bd81 	.word	0x0800bd81
 800bd68:	0800bd81 	.word	0x0800bd81
 800bd6c:	0800bd81 	.word	0x0800bd81
 800bd70:	0800bd81 	.word	0x0800bd81
 800bd74:	0800bd81 	.word	0x0800bd81
 800bd78:	0800bd81 	.word	0x0800bd81
 800bd7c:	0800bd81 	.word	0x0800bd81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd80:	bf00      	nop
  }

  return (USBD_OK);
 800bd82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	4805      	ldr	r0, [pc, #20]	; (800bdb4 <CDC_Receive_FS+0x24>)
 800bd9e:	f7fc f893 	bl	8007ec8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bda2:	4804      	ldr	r0, [pc, #16]	; (800bdb4 <CDC_Receive_FS+0x24>)
 800bda4:	f7fc f8d4 	bl	8007f50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bda8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	2000507c 	.word	0x2000507c

0800bdb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bdc8:	4b0d      	ldr	r3, [pc, #52]	; (800be00 <CDC_Transmit_FS+0x48>)
 800bdca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d001      	beq.n	800bdde <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e00b      	b.n	800bdf6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bdde:	887b      	ldrh	r3, [r7, #2]
 800bde0:	461a      	mov	r2, r3
 800bde2:	6879      	ldr	r1, [r7, #4]
 800bde4:	4806      	ldr	r0, [pc, #24]	; (800be00 <CDC_Transmit_FS+0x48>)
 800bde6:	f7fc f856 	bl	8007e96 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bdea:	4805      	ldr	r0, [pc, #20]	; (800be00 <CDC_Transmit_FS+0x48>)
 800bdec:	f7fc f880 	bl	8007ef0 <USBD_CDC_TransmitPacket>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	2000507c 	.word	0x2000507c

0800be04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be04:	b480      	push	{r7}
 800be06:	b087      	sub	sp, #28
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	4613      	mov	r3, r2
 800be10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	371c      	adds	r7, #28
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
	...

0800be28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	6039      	str	r1, [r7, #0]
 800be32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2212      	movs	r2, #18
 800be38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be3a:	4b03      	ldr	r3, [pc, #12]	; (800be48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	20000150 	.word	0x20000150

0800be4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	6039      	str	r1, [r7, #0]
 800be56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2204      	movs	r2, #4
 800be5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be5e:	4b03      	ldr	r3, [pc, #12]	; (800be6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be60:	4618      	mov	r0, r3
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20000164 	.word	0x20000164

0800be70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	6039      	str	r1, [r7, #0]
 800be7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be7c:	79fb      	ldrb	r3, [r7, #7]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d105      	bne.n	800be8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	4907      	ldr	r1, [pc, #28]	; (800bea4 <USBD_FS_ProductStrDescriptor+0x34>)
 800be86:	4808      	ldr	r0, [pc, #32]	; (800bea8 <USBD_FS_ProductStrDescriptor+0x38>)
 800be88:	f7fd f8b1 	bl	8008fee <USBD_GetString>
 800be8c:	e004      	b.n	800be98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	4904      	ldr	r1, [pc, #16]	; (800bea4 <USBD_FS_ProductStrDescriptor+0x34>)
 800be92:	4805      	ldr	r0, [pc, #20]	; (800bea8 <USBD_FS_ProductStrDescriptor+0x38>)
 800be94:	f7fd f8ab 	bl	8008fee <USBD_GetString>
  }
  return USBD_StrDesc;
 800be98:	4b02      	ldr	r3, [pc, #8]	; (800bea4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	2000634c 	.word	0x2000634c
 800bea8:	0800e7f8 	.word	0x0800e7f8

0800beac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	6039      	str	r1, [r7, #0]
 800beb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	4904      	ldr	r1, [pc, #16]	; (800becc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bebc:	4804      	ldr	r0, [pc, #16]	; (800bed0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bebe:	f7fd f896 	bl	8008fee <USBD_GetString>
  return USBD_StrDesc;
 800bec2:	4b02      	ldr	r3, [pc, #8]	; (800becc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	2000634c 	.word	0x2000634c
 800bed0:	0800e808 	.word	0x0800e808

0800bed4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	6039      	str	r1, [r7, #0]
 800bede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	221a      	movs	r2, #26
 800bee4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bee6:	f000 f843 	bl	800bf70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800beea:	4b02      	ldr	r3, [pc, #8]	; (800bef4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	20000168 	.word	0x20000168

0800bef8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	6039      	str	r1, [r7, #0]
 800bf02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf04:	79fb      	ldrb	r3, [r7, #7]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d105      	bne.n	800bf16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	4907      	ldr	r1, [pc, #28]	; (800bf2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf0e:	4808      	ldr	r0, [pc, #32]	; (800bf30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf10:	f7fd f86d 	bl	8008fee <USBD_GetString>
 800bf14:	e004      	b.n	800bf20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	4904      	ldr	r1, [pc, #16]	; (800bf2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf1a:	4805      	ldr	r0, [pc, #20]	; (800bf30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf1c:	f7fd f867 	bl	8008fee <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf20:	4b02      	ldr	r3, [pc, #8]	; (800bf2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	2000634c 	.word	0x2000634c
 800bf30:	0800e81c 	.word	0x0800e81c

0800bf34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	6039      	str	r1, [r7, #0]
 800bf3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d105      	bne.n	800bf52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	4907      	ldr	r1, [pc, #28]	; (800bf68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf4a:	4808      	ldr	r0, [pc, #32]	; (800bf6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf4c:	f7fd f84f 	bl	8008fee <USBD_GetString>
 800bf50:	e004      	b.n	800bf5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	4904      	ldr	r1, [pc, #16]	; (800bf68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf56:	4805      	ldr	r0, [pc, #20]	; (800bf6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf58:	f7fd f849 	bl	8008fee <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf5c:	4b02      	ldr	r3, [pc, #8]	; (800bf68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	2000634c 	.word	0x2000634c
 800bf6c:	0800e828 	.word	0x0800e828

0800bf70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf76:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <Get_SerialNum+0x44>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <Get_SerialNum+0x48>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf82:	4b0e      	ldr	r3, [pc, #56]	; (800bfbc <Get_SerialNum+0x4c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d009      	beq.n	800bfaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf96:	2208      	movs	r2, #8
 800bf98:	4909      	ldr	r1, [pc, #36]	; (800bfc0 <Get_SerialNum+0x50>)
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f000 f814 	bl	800bfc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bfa0:	2204      	movs	r2, #4
 800bfa2:	4908      	ldr	r1, [pc, #32]	; (800bfc4 <Get_SerialNum+0x54>)
 800bfa4:	68b8      	ldr	r0, [r7, #8]
 800bfa6:	f000 f80f 	bl	800bfc8 <IntToUnicode>
  }
}
 800bfaa:	bf00      	nop
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	1fff7a10 	.word	0x1fff7a10
 800bfb8:	1fff7a14 	.word	0x1fff7a14
 800bfbc:	1fff7a18 	.word	0x1fff7a18
 800bfc0:	2000016a 	.word	0x2000016a
 800bfc4:	2000017a 	.word	0x2000017a

0800bfc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfda:	2300      	movs	r3, #0
 800bfdc:	75fb      	strb	r3, [r7, #23]
 800bfde:	e027      	b.n	800c030 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	0f1b      	lsrs	r3, r3, #28
 800bfe4:	2b09      	cmp	r3, #9
 800bfe6:	d80b      	bhi.n	800c000 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	0f1b      	lsrs	r3, r3, #28
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	7dfb      	ldrb	r3, [r7, #23]
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4619      	mov	r1, r3
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	440b      	add	r3, r1
 800bff8:	3230      	adds	r2, #48	; 0x30
 800bffa:	b2d2      	uxtb	r2, r2
 800bffc:	701a      	strb	r2, [r3, #0]
 800bffe:	e00a      	b.n	800c016 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	0f1b      	lsrs	r3, r3, #28
 800c004:	b2da      	uxtb	r2, r3
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	4619      	mov	r1, r3
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	440b      	add	r3, r1
 800c010:	3237      	adds	r2, #55	; 0x37
 800c012:	b2d2      	uxtb	r2, r2
 800c014:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	011b      	lsls	r3, r3, #4
 800c01a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c01c:	7dfb      	ldrb	r3, [r7, #23]
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	3301      	adds	r3, #1
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	4413      	add	r3, r2
 800c026:	2200      	movs	r2, #0
 800c028:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c02a:	7dfb      	ldrb	r3, [r7, #23]
 800c02c:	3301      	adds	r3, #1
 800c02e:	75fb      	strb	r3, [r7, #23]
 800c030:	7dfa      	ldrb	r2, [r7, #23]
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	429a      	cmp	r2, r3
 800c036:	d3d3      	bcc.n	800bfe0 <IntToUnicode+0x18>
  }
}
 800c038:	bf00      	nop
 800c03a:	371c      	adds	r7, #28
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08a      	sub	sp, #40	; 0x28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c04c:	f107 0314 	add.w	r3, r7, #20
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
 800c054:	605a      	str	r2, [r3, #4]
 800c056:	609a      	str	r2, [r3, #8]
 800c058:	60da      	str	r2, [r3, #12]
 800c05a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c064:	d147      	bne.n	800c0f6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c066:	2300      	movs	r3, #0
 800c068:	613b      	str	r3, [r7, #16]
 800c06a:	4b25      	ldr	r3, [pc, #148]	; (800c100 <HAL_PCD_MspInit+0xbc>)
 800c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06e:	4a24      	ldr	r2, [pc, #144]	; (800c100 <HAL_PCD_MspInit+0xbc>)
 800c070:	f043 0301 	orr.w	r3, r3, #1
 800c074:	6313      	str	r3, [r2, #48]	; 0x30
 800c076:	4b22      	ldr	r3, [pc, #136]	; (800c100 <HAL_PCD_MspInit+0xbc>)
 800c078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	613b      	str	r3, [r7, #16]
 800c080:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c082:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c088:	2300      	movs	r3, #0
 800c08a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c08c:	2300      	movs	r3, #0
 800c08e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c090:	f107 0314 	add.w	r3, r7, #20
 800c094:	4619      	mov	r1, r3
 800c096:	481b      	ldr	r0, [pc, #108]	; (800c104 <HAL_PCD_MspInit+0xc0>)
 800c098:	f7f5 ffb2 	bl	8002000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c09c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c0a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0ae:	230a      	movs	r3, #10
 800c0b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0b2:	f107 0314 	add.w	r3, r7, #20
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4812      	ldr	r0, [pc, #72]	; (800c104 <HAL_PCD_MspInit+0xc0>)
 800c0ba:	f7f5 ffa1 	bl	8002000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0be:	4b10      	ldr	r3, [pc, #64]	; (800c100 <HAL_PCD_MspInit+0xbc>)
 800c0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0c2:	4a0f      	ldr	r2, [pc, #60]	; (800c100 <HAL_PCD_MspInit+0xbc>)
 800c0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c8:	6353      	str	r3, [r2, #52]	; 0x34
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60fb      	str	r3, [r7, #12]
 800c0ce:	4b0c      	ldr	r3, [pc, #48]	; (800c100 <HAL_PCD_MspInit+0xbc>)
 800c0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d2:	4a0b      	ldr	r2, [pc, #44]	; (800c100 <HAL_PCD_MspInit+0xbc>)
 800c0d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0d8:	6453      	str	r3, [r2, #68]	; 0x44
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <HAL_PCD_MspInit+0xbc>)
 800c0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2105      	movs	r1, #5
 800c0ea:	2043      	movs	r0, #67	; 0x43
 800c0ec:	f7f5 ff51 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c0f0:	2043      	movs	r0, #67	; 0x43
 800c0f2:	f7f5 ff6a 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c0f6:	bf00      	nop
 800c0f8:	3728      	adds	r7, #40	; 0x28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	40023800 	.word	0x40023800
 800c104:	40020000 	.word	0x40020000

0800c108 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	f7fb ffe2 	bl	80080e8 <USBD_LL_SetupStage>
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c13e:	78fa      	ldrb	r2, [r7, #3]
 800c140:	6879      	ldr	r1, [r7, #4]
 800c142:	4613      	mov	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	440b      	add	r3, r1
 800c14c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	78fb      	ldrb	r3, [r7, #3]
 800c154:	4619      	mov	r1, r3
 800c156:	f7fc f81a 	bl	800818e <USBD_LL_DataOutStage>
}
 800c15a:	bf00      	nop
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	460b      	mov	r3, r1
 800c16c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c174:	78fa      	ldrb	r2, [r7, #3]
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	4613      	mov	r3, r2
 800c17a:	00db      	lsls	r3, r3, #3
 800c17c:	1a9b      	subs	r3, r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	440b      	add	r3, r1
 800c182:	3348      	adds	r3, #72	; 0x48
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	78fb      	ldrb	r3, [r7, #3]
 800c188:	4619      	mov	r1, r3
 800c18a:	f7fc f863 	bl	8008254 <USBD_LL_DataInStage>
}
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fc f967 	bl	8008478 <USBD_LL_SOF>
}
 800c1aa:	bf00      	nop
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d001      	beq.n	800c1ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1c6:	f7f5 fb0b 	bl	80017e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1d0:	7bfa      	ldrb	r2, [r7, #15]
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fc f914 	bl	8008402 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fc f8cd 	bl	8008380 <USBD_LL_Reset>
}
 800c1e6:	bf00      	nop
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fc f90f 	bl	8008422 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	6812      	ldr	r2, [r2, #0]
 800c212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c216:	f043 0301 	orr.w	r3, r3, #1
 800c21a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a1b      	ldr	r3, [r3, #32]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d005      	beq.n	800c230 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c224:	4b04      	ldr	r3, [pc, #16]	; (800c238 <HAL_PCD_SuspendCallback+0x48>)
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	4a03      	ldr	r2, [pc, #12]	; (800c238 <HAL_PCD_SuspendCallback+0x48>)
 800c22a:	f043 0306 	orr.w	r3, r3, #6
 800c22e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	e000ed00 	.word	0xe000ed00

0800c23c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fc f8fe 	bl	800844c <USBD_LL_Resume>
}
 800c250:	bf00      	nop
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c26a:	78fa      	ldrb	r2, [r7, #3]
 800c26c:	4611      	mov	r1, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fc f929 	bl	80084c6 <USBD_LL_IsoOUTIncomplete>
}
 800c274:	bf00      	nop
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	460b      	mov	r3, r1
 800c286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c28e:	78fa      	ldrb	r2, [r7, #3]
 800c290:	4611      	mov	r1, r2
 800c292:	4618      	mov	r0, r3
 800c294:	f7fc f90a 	bl	80084ac <USBD_LL_IsoINIncomplete>
}
 800c298:	bf00      	nop
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fc f916 	bl	80084e0 <USBD_LL_DevConnected>
}
 800c2b4:	bf00      	nop
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fc f913 	bl	80084f6 <USBD_LL_DevDisconnected>
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d13c      	bne.n	800c362 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c2e8:	4a20      	ldr	r2, [pc, #128]	; (800c36c <USBD_LL_Init+0x94>)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a1e      	ldr	r2, [pc, #120]	; (800c36c <USBD_LL_Init+0x94>)
 800c2f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2f8:	4b1c      	ldr	r3, [pc, #112]	; (800c36c <USBD_LL_Init+0x94>)
 800c2fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c300:	4b1a      	ldr	r3, [pc, #104]	; (800c36c <USBD_LL_Init+0x94>)
 800c302:	2204      	movs	r2, #4
 800c304:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c306:	4b19      	ldr	r3, [pc, #100]	; (800c36c <USBD_LL_Init+0x94>)
 800c308:	2202      	movs	r2, #2
 800c30a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c30c:	4b17      	ldr	r3, [pc, #92]	; (800c36c <USBD_LL_Init+0x94>)
 800c30e:	2200      	movs	r2, #0
 800c310:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c312:	4b16      	ldr	r3, [pc, #88]	; (800c36c <USBD_LL_Init+0x94>)
 800c314:	2202      	movs	r2, #2
 800c316:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c318:	4b14      	ldr	r3, [pc, #80]	; (800c36c <USBD_LL_Init+0x94>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c31e:	4b13      	ldr	r3, [pc, #76]	; (800c36c <USBD_LL_Init+0x94>)
 800c320:	2200      	movs	r2, #0
 800c322:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c324:	4b11      	ldr	r3, [pc, #68]	; (800c36c <USBD_LL_Init+0x94>)
 800c326:	2200      	movs	r2, #0
 800c328:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c32a:	4b10      	ldr	r3, [pc, #64]	; (800c36c <USBD_LL_Init+0x94>)
 800c32c:	2201      	movs	r2, #1
 800c32e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c330:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <USBD_LL_Init+0x94>)
 800c332:	2200      	movs	r2, #0
 800c334:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c336:	480d      	ldr	r0, [pc, #52]	; (800c36c <USBD_LL_Init+0x94>)
 800c338:	f7f7 fca8 	bl	8003c8c <HAL_PCD_Init>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c342:	f7f5 fa4d 	bl	80017e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c346:	2180      	movs	r1, #128	; 0x80
 800c348:	4808      	ldr	r0, [pc, #32]	; (800c36c <USBD_LL_Init+0x94>)
 800c34a:	f7f8 fe06 	bl	8004f5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c34e:	2240      	movs	r2, #64	; 0x40
 800c350:	2100      	movs	r1, #0
 800c352:	4806      	ldr	r0, [pc, #24]	; (800c36c <USBD_LL_Init+0x94>)
 800c354:	f7f8 fdba 	bl	8004ecc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c358:	2280      	movs	r2, #128	; 0x80
 800c35a:	2101      	movs	r1, #1
 800c35c:	4803      	ldr	r0, [pc, #12]	; (800c36c <USBD_LL_Init+0x94>)
 800c35e:	f7f8 fdb5 	bl	8004ecc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	2000654c 	.word	0x2000654c

0800c370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c386:	4618      	mov	r0, r3
 800c388:	f7f7 fd9d 	bl	8003ec6 <HAL_PCD_Start>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f92a 	bl	800c5ec <USBD_Get_USB_Status>
 800c398:	4603      	mov	r3, r0
 800c39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	4608      	mov	r0, r1
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	70fb      	strb	r3, [r7, #3]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	70bb      	strb	r3, [r7, #2]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c3ce:	78bb      	ldrb	r3, [r7, #2]
 800c3d0:	883a      	ldrh	r2, [r7, #0]
 800c3d2:	78f9      	ldrb	r1, [r7, #3]
 800c3d4:	f7f8 f981 	bl	80046da <HAL_PCD_EP_Open>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f904 	bl	800c5ec <USBD_Get_USB_Status>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c40c:	78fa      	ldrb	r2, [r7, #3]
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f7f8 f9ca 	bl	80047aa <HAL_PCD_EP_Close>
 800c416:	4603      	mov	r3, r0
 800c418:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 f8e5 	bl	800c5ec <USBD_Get_USB_Status>
 800c422:	4603      	mov	r3, r0
 800c424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c426:	7bbb      	ldrb	r3, [r7, #14]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	460b      	mov	r3, r1
 800c43a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c44a:	78fa      	ldrb	r2, [r7, #3]
 800c44c:	4611      	mov	r1, r2
 800c44e:	4618      	mov	r0, r3
 800c450:	f7f8 faa2 	bl	8004998 <HAL_PCD_EP_SetStall>
 800c454:	4603      	mov	r3, r0
 800c456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c458:	7bfb      	ldrb	r3, [r7, #15]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 f8c6 	bl	800c5ec <USBD_Get_USB_Status>
 800c460:	4603      	mov	r3, r0
 800c462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c464:	7bbb      	ldrb	r3, [r7, #14]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
 800c476:	460b      	mov	r3, r1
 800c478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c488:	78fa      	ldrb	r2, [r7, #3]
 800c48a:	4611      	mov	r1, r2
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7f8 fae7 	bl	8004a60 <HAL_PCD_EP_ClrStall>
 800c492:	4603      	mov	r3, r0
 800c494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 f8a7 	bl	800c5ec <USBD_Get_USB_Status>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	da0b      	bge.n	800c4e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4c8:	78fb      	ldrb	r3, [r7, #3]
 800c4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4ce:	68f9      	ldr	r1, [r7, #12]
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	1a9b      	subs	r3, r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	440b      	add	r3, r1
 800c4da:	333e      	adds	r3, #62	; 0x3e
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	e00b      	b.n	800c4f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4e6:	68f9      	ldr	r1, [r7, #12]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	440b      	add	r3, r1
 800c4f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c51e:	78fa      	ldrb	r2, [r7, #3]
 800c520:	4611      	mov	r1, r2
 800c522:	4618      	mov	r0, r3
 800c524:	f7f8 f8b4 	bl	8004690 <HAL_PCD_SetAddress>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 f85c 	bl	800c5ec <USBD_Get_USB_Status>
 800c534:	4603      	mov	r3, r0
 800c536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c538:	7bbb      	ldrb	r3, [r7, #14]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b086      	sub	sp, #24
 800c546:	af00      	add	r7, sp, #0
 800c548:	60f8      	str	r0, [r7, #12]
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	603b      	str	r3, [r7, #0]
 800c54e:	460b      	mov	r3, r1
 800c550:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c560:	7af9      	ldrb	r1, [r7, #11]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	f7f8 f9cd 	bl	8004904 <HAL_PCD_EP_Transmit>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f83b 	bl	800c5ec <USBD_Get_USB_Status>
 800c576:	4603      	mov	r3, r0
 800c578:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c57a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	607a      	str	r2, [r7, #4]
 800c58e:	603b      	str	r3, [r7, #0]
 800c590:	460b      	mov	r3, r1
 800c592:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c5a2:	7af9      	ldrb	r1, [r7, #11]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	f7f8 f949 	bl	800483e <HAL_PCD_EP_Receive>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5b0:	7dfb      	ldrb	r3, [r7, #23]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 f81a 	bl	800c5ec <USBD_Get_USB_Status>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c5d8:	78fa      	ldrb	r2, [r7, #3]
 800c5da:	4611      	mov	r1, r2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7f8 f979 	bl	80048d4 <HAL_PCD_EP_GetRxCount>
 800c5e2:	4603      	mov	r3, r0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	d817      	bhi.n	800c630 <USBD_Get_USB_Status+0x44>
 800c600:	a201      	add	r2, pc, #4	; (adr r2, 800c608 <USBD_Get_USB_Status+0x1c>)
 800c602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c606:	bf00      	nop
 800c608:	0800c619 	.word	0x0800c619
 800c60c:	0800c61f 	.word	0x0800c61f
 800c610:	0800c625 	.word	0x0800c625
 800c614:	0800c62b 	.word	0x0800c62b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c618:	2300      	movs	r3, #0
 800c61a:	73fb      	strb	r3, [r7, #15]
    break;
 800c61c:	e00b      	b.n	800c636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c61e:	2303      	movs	r3, #3
 800c620:	73fb      	strb	r3, [r7, #15]
    break;
 800c622:	e008      	b.n	800c636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c624:	2301      	movs	r3, #1
 800c626:	73fb      	strb	r3, [r7, #15]
    break;
 800c628:	e005      	b.n	800c636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c62a:	2303      	movs	r3, #3
 800c62c:	73fb      	strb	r3, [r7, #15]
    break;
 800c62e:	e002      	b.n	800c636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c630:	2303      	movs	r3, #3
 800c632:	73fb      	strb	r3, [r7, #15]
    break;
 800c634:	bf00      	nop
  }
  return usb_status;
 800c636:	7bfb      	ldrb	r3, [r7, #15]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <__errno>:
 800c644:	4b01      	ldr	r3, [pc, #4]	; (800c64c <__errno+0x8>)
 800c646:	6818      	ldr	r0, [r3, #0]
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	20000184 	.word	0x20000184

0800c650 <__libc_init_array>:
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	4e0d      	ldr	r6, [pc, #52]	; (800c688 <__libc_init_array+0x38>)
 800c654:	4c0d      	ldr	r4, [pc, #52]	; (800c68c <__libc_init_array+0x3c>)
 800c656:	1ba4      	subs	r4, r4, r6
 800c658:	10a4      	asrs	r4, r4, #2
 800c65a:	2500      	movs	r5, #0
 800c65c:	42a5      	cmp	r5, r4
 800c65e:	d109      	bne.n	800c674 <__libc_init_array+0x24>
 800c660:	4e0b      	ldr	r6, [pc, #44]	; (800c690 <__libc_init_array+0x40>)
 800c662:	4c0c      	ldr	r4, [pc, #48]	; (800c694 <__libc_init_array+0x44>)
 800c664:	f002 f866 	bl	800e734 <_init>
 800c668:	1ba4      	subs	r4, r4, r6
 800c66a:	10a4      	asrs	r4, r4, #2
 800c66c:	2500      	movs	r5, #0
 800c66e:	42a5      	cmp	r5, r4
 800c670:	d105      	bne.n	800c67e <__libc_init_array+0x2e>
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c678:	4798      	blx	r3
 800c67a:	3501      	adds	r5, #1
 800c67c:	e7ee      	b.n	800c65c <__libc_init_array+0xc>
 800c67e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c682:	4798      	blx	r3
 800c684:	3501      	adds	r5, #1
 800c686:	e7f2      	b.n	800c66e <__libc_init_array+0x1e>
 800c688:	0800ead8 	.word	0x0800ead8
 800c68c:	0800ead8 	.word	0x0800ead8
 800c690:	0800ead8 	.word	0x0800ead8
 800c694:	0800eadc 	.word	0x0800eadc

0800c698 <malloc>:
 800c698:	4b02      	ldr	r3, [pc, #8]	; (800c6a4 <malloc+0xc>)
 800c69a:	4601      	mov	r1, r0
 800c69c:	6818      	ldr	r0, [r3, #0]
 800c69e:	f000 b86d 	b.w	800c77c <_malloc_r>
 800c6a2:	bf00      	nop
 800c6a4:	20000184 	.word	0x20000184

0800c6a8 <free>:
 800c6a8:	4b02      	ldr	r3, [pc, #8]	; (800c6b4 <free+0xc>)
 800c6aa:	4601      	mov	r1, r0
 800c6ac:	6818      	ldr	r0, [r3, #0]
 800c6ae:	f000 b817 	b.w	800c6e0 <_free_r>
 800c6b2:	bf00      	nop
 800c6b4:	20000184 	.word	0x20000184

0800c6b8 <memcpy>:
 800c6b8:	b510      	push	{r4, lr}
 800c6ba:	1e43      	subs	r3, r0, #1
 800c6bc:	440a      	add	r2, r1
 800c6be:	4291      	cmp	r1, r2
 800c6c0:	d100      	bne.n	800c6c4 <memcpy+0xc>
 800c6c2:	bd10      	pop	{r4, pc}
 800c6c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6cc:	e7f7      	b.n	800c6be <memcpy+0x6>

0800c6ce <memset>:
 800c6ce:	4402      	add	r2, r0
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d100      	bne.n	800c6d8 <memset+0xa>
 800c6d6:	4770      	bx	lr
 800c6d8:	f803 1b01 	strb.w	r1, [r3], #1
 800c6dc:	e7f9      	b.n	800c6d2 <memset+0x4>
	...

0800c6e0 <_free_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	2900      	cmp	r1, #0
 800c6e6:	d045      	beq.n	800c774 <_free_r+0x94>
 800c6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ec:	1f0c      	subs	r4, r1, #4
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	bfb8      	it	lt
 800c6f2:	18e4      	addlt	r4, r4, r3
 800c6f4:	f001 fb7a 	bl	800ddec <__malloc_lock>
 800c6f8:	4a1f      	ldr	r2, [pc, #124]	; (800c778 <_free_r+0x98>)
 800c6fa:	6813      	ldr	r3, [r2, #0]
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	b933      	cbnz	r3, 800c70e <_free_r+0x2e>
 800c700:	6063      	str	r3, [r4, #4]
 800c702:	6014      	str	r4, [r2, #0]
 800c704:	4628      	mov	r0, r5
 800c706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c70a:	f001 bb70 	b.w	800ddee <__malloc_unlock>
 800c70e:	42a3      	cmp	r3, r4
 800c710:	d90c      	bls.n	800c72c <_free_r+0x4c>
 800c712:	6821      	ldr	r1, [r4, #0]
 800c714:	1862      	adds	r2, r4, r1
 800c716:	4293      	cmp	r3, r2
 800c718:	bf04      	itt	eq
 800c71a:	681a      	ldreq	r2, [r3, #0]
 800c71c:	685b      	ldreq	r3, [r3, #4]
 800c71e:	6063      	str	r3, [r4, #4]
 800c720:	bf04      	itt	eq
 800c722:	1852      	addeq	r2, r2, r1
 800c724:	6022      	streq	r2, [r4, #0]
 800c726:	6004      	str	r4, [r0, #0]
 800c728:	e7ec      	b.n	800c704 <_free_r+0x24>
 800c72a:	4613      	mov	r3, r2
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	b10a      	cbz	r2, 800c734 <_free_r+0x54>
 800c730:	42a2      	cmp	r2, r4
 800c732:	d9fa      	bls.n	800c72a <_free_r+0x4a>
 800c734:	6819      	ldr	r1, [r3, #0]
 800c736:	1858      	adds	r0, r3, r1
 800c738:	42a0      	cmp	r0, r4
 800c73a:	d10b      	bne.n	800c754 <_free_r+0x74>
 800c73c:	6820      	ldr	r0, [r4, #0]
 800c73e:	4401      	add	r1, r0
 800c740:	1858      	adds	r0, r3, r1
 800c742:	4282      	cmp	r2, r0
 800c744:	6019      	str	r1, [r3, #0]
 800c746:	d1dd      	bne.n	800c704 <_free_r+0x24>
 800c748:	6810      	ldr	r0, [r2, #0]
 800c74a:	6852      	ldr	r2, [r2, #4]
 800c74c:	605a      	str	r2, [r3, #4]
 800c74e:	4401      	add	r1, r0
 800c750:	6019      	str	r1, [r3, #0]
 800c752:	e7d7      	b.n	800c704 <_free_r+0x24>
 800c754:	d902      	bls.n	800c75c <_free_r+0x7c>
 800c756:	230c      	movs	r3, #12
 800c758:	602b      	str	r3, [r5, #0]
 800c75a:	e7d3      	b.n	800c704 <_free_r+0x24>
 800c75c:	6820      	ldr	r0, [r4, #0]
 800c75e:	1821      	adds	r1, r4, r0
 800c760:	428a      	cmp	r2, r1
 800c762:	bf04      	itt	eq
 800c764:	6811      	ldreq	r1, [r2, #0]
 800c766:	6852      	ldreq	r2, [r2, #4]
 800c768:	6062      	str	r2, [r4, #4]
 800c76a:	bf04      	itt	eq
 800c76c:	1809      	addeq	r1, r1, r0
 800c76e:	6021      	streq	r1, [r4, #0]
 800c770:	605c      	str	r4, [r3, #4]
 800c772:	e7c7      	b.n	800c704 <_free_r+0x24>
 800c774:	bd38      	pop	{r3, r4, r5, pc}
 800c776:	bf00      	nop
 800c778:	20004c90 	.word	0x20004c90

0800c77c <_malloc_r>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	1ccd      	adds	r5, r1, #3
 800c780:	f025 0503 	bic.w	r5, r5, #3
 800c784:	3508      	adds	r5, #8
 800c786:	2d0c      	cmp	r5, #12
 800c788:	bf38      	it	cc
 800c78a:	250c      	movcc	r5, #12
 800c78c:	2d00      	cmp	r5, #0
 800c78e:	4606      	mov	r6, r0
 800c790:	db01      	blt.n	800c796 <_malloc_r+0x1a>
 800c792:	42a9      	cmp	r1, r5
 800c794:	d903      	bls.n	800c79e <_malloc_r+0x22>
 800c796:	230c      	movs	r3, #12
 800c798:	6033      	str	r3, [r6, #0]
 800c79a:	2000      	movs	r0, #0
 800c79c:	bd70      	pop	{r4, r5, r6, pc}
 800c79e:	f001 fb25 	bl	800ddec <__malloc_lock>
 800c7a2:	4a21      	ldr	r2, [pc, #132]	; (800c828 <_malloc_r+0xac>)
 800c7a4:	6814      	ldr	r4, [r2, #0]
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	b991      	cbnz	r1, 800c7d0 <_malloc_r+0x54>
 800c7aa:	4c20      	ldr	r4, [pc, #128]	; (800c82c <_malloc_r+0xb0>)
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	b91b      	cbnz	r3, 800c7b8 <_malloc_r+0x3c>
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f000 fc99 	bl	800d0e8 <_sbrk_r>
 800c7b6:	6020      	str	r0, [r4, #0]
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f000 fc94 	bl	800d0e8 <_sbrk_r>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d124      	bne.n	800c80e <_malloc_r+0x92>
 800c7c4:	230c      	movs	r3, #12
 800c7c6:	6033      	str	r3, [r6, #0]
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f001 fb10 	bl	800ddee <__malloc_unlock>
 800c7ce:	e7e4      	b.n	800c79a <_malloc_r+0x1e>
 800c7d0:	680b      	ldr	r3, [r1, #0]
 800c7d2:	1b5b      	subs	r3, r3, r5
 800c7d4:	d418      	bmi.n	800c808 <_malloc_r+0x8c>
 800c7d6:	2b0b      	cmp	r3, #11
 800c7d8:	d90f      	bls.n	800c7fa <_malloc_r+0x7e>
 800c7da:	600b      	str	r3, [r1, #0]
 800c7dc:	50cd      	str	r5, [r1, r3]
 800c7de:	18cc      	adds	r4, r1, r3
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f001 fb04 	bl	800ddee <__malloc_unlock>
 800c7e6:	f104 000b 	add.w	r0, r4, #11
 800c7ea:	1d23      	adds	r3, r4, #4
 800c7ec:	f020 0007 	bic.w	r0, r0, #7
 800c7f0:	1ac3      	subs	r3, r0, r3
 800c7f2:	d0d3      	beq.n	800c79c <_malloc_r+0x20>
 800c7f4:	425a      	negs	r2, r3
 800c7f6:	50e2      	str	r2, [r4, r3]
 800c7f8:	e7d0      	b.n	800c79c <_malloc_r+0x20>
 800c7fa:	428c      	cmp	r4, r1
 800c7fc:	684b      	ldr	r3, [r1, #4]
 800c7fe:	bf16      	itet	ne
 800c800:	6063      	strne	r3, [r4, #4]
 800c802:	6013      	streq	r3, [r2, #0]
 800c804:	460c      	movne	r4, r1
 800c806:	e7eb      	b.n	800c7e0 <_malloc_r+0x64>
 800c808:	460c      	mov	r4, r1
 800c80a:	6849      	ldr	r1, [r1, #4]
 800c80c:	e7cc      	b.n	800c7a8 <_malloc_r+0x2c>
 800c80e:	1cc4      	adds	r4, r0, #3
 800c810:	f024 0403 	bic.w	r4, r4, #3
 800c814:	42a0      	cmp	r0, r4
 800c816:	d005      	beq.n	800c824 <_malloc_r+0xa8>
 800c818:	1a21      	subs	r1, r4, r0
 800c81a:	4630      	mov	r0, r6
 800c81c:	f000 fc64 	bl	800d0e8 <_sbrk_r>
 800c820:	3001      	adds	r0, #1
 800c822:	d0cf      	beq.n	800c7c4 <_malloc_r+0x48>
 800c824:	6025      	str	r5, [r4, #0]
 800c826:	e7db      	b.n	800c7e0 <_malloc_r+0x64>
 800c828:	20004c90 	.word	0x20004c90
 800c82c:	20004c94 	.word	0x20004c94

0800c830 <__cvt>:
 800c830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c834:	ec55 4b10 	vmov	r4, r5, d0
 800c838:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c83a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c83e:	2d00      	cmp	r5, #0
 800c840:	460e      	mov	r6, r1
 800c842:	4691      	mov	r9, r2
 800c844:	4619      	mov	r1, r3
 800c846:	bfb8      	it	lt
 800c848:	4622      	movlt	r2, r4
 800c84a:	462b      	mov	r3, r5
 800c84c:	f027 0720 	bic.w	r7, r7, #32
 800c850:	bfbb      	ittet	lt
 800c852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c856:	461d      	movlt	r5, r3
 800c858:	2300      	movge	r3, #0
 800c85a:	232d      	movlt	r3, #45	; 0x2d
 800c85c:	bfb8      	it	lt
 800c85e:	4614      	movlt	r4, r2
 800c860:	2f46      	cmp	r7, #70	; 0x46
 800c862:	700b      	strb	r3, [r1, #0]
 800c864:	d004      	beq.n	800c870 <__cvt+0x40>
 800c866:	2f45      	cmp	r7, #69	; 0x45
 800c868:	d100      	bne.n	800c86c <__cvt+0x3c>
 800c86a:	3601      	adds	r6, #1
 800c86c:	2102      	movs	r1, #2
 800c86e:	e000      	b.n	800c872 <__cvt+0x42>
 800c870:	2103      	movs	r1, #3
 800c872:	ab03      	add	r3, sp, #12
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	ab02      	add	r3, sp, #8
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	4632      	mov	r2, r6
 800c87c:	4653      	mov	r3, sl
 800c87e:	ec45 4b10 	vmov	d0, r4, r5
 800c882:	f000 fced 	bl	800d260 <_dtoa_r>
 800c886:	2f47      	cmp	r7, #71	; 0x47
 800c888:	4680      	mov	r8, r0
 800c88a:	d102      	bne.n	800c892 <__cvt+0x62>
 800c88c:	f019 0f01 	tst.w	r9, #1
 800c890:	d026      	beq.n	800c8e0 <__cvt+0xb0>
 800c892:	2f46      	cmp	r7, #70	; 0x46
 800c894:	eb08 0906 	add.w	r9, r8, r6
 800c898:	d111      	bne.n	800c8be <__cvt+0x8e>
 800c89a:	f898 3000 	ldrb.w	r3, [r8]
 800c89e:	2b30      	cmp	r3, #48	; 0x30
 800c8a0:	d10a      	bne.n	800c8b8 <__cvt+0x88>
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	f7f4 f915 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8ae:	b918      	cbnz	r0, 800c8b8 <__cvt+0x88>
 800c8b0:	f1c6 0601 	rsb	r6, r6, #1
 800c8b4:	f8ca 6000 	str.w	r6, [sl]
 800c8b8:	f8da 3000 	ldr.w	r3, [sl]
 800c8bc:	4499      	add	r9, r3
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f4 f907 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8ca:	b938      	cbnz	r0, 800c8dc <__cvt+0xac>
 800c8cc:	2230      	movs	r2, #48	; 0x30
 800c8ce:	9b03      	ldr	r3, [sp, #12]
 800c8d0:	454b      	cmp	r3, r9
 800c8d2:	d205      	bcs.n	800c8e0 <__cvt+0xb0>
 800c8d4:	1c59      	adds	r1, r3, #1
 800c8d6:	9103      	str	r1, [sp, #12]
 800c8d8:	701a      	strb	r2, [r3, #0]
 800c8da:	e7f8      	b.n	800c8ce <__cvt+0x9e>
 800c8dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8e4:	eba3 0308 	sub.w	r3, r3, r8
 800c8e8:	4640      	mov	r0, r8
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	b004      	add	sp, #16
 800c8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c8f2 <__exponent>:
 800c8f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8f4:	2900      	cmp	r1, #0
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	bfba      	itte	lt
 800c8fa:	4249      	neglt	r1, r1
 800c8fc:	232d      	movlt	r3, #45	; 0x2d
 800c8fe:	232b      	movge	r3, #43	; 0x2b
 800c900:	2909      	cmp	r1, #9
 800c902:	f804 2b02 	strb.w	r2, [r4], #2
 800c906:	7043      	strb	r3, [r0, #1]
 800c908:	dd20      	ble.n	800c94c <__exponent+0x5a>
 800c90a:	f10d 0307 	add.w	r3, sp, #7
 800c90e:	461f      	mov	r7, r3
 800c910:	260a      	movs	r6, #10
 800c912:	fb91 f5f6 	sdiv	r5, r1, r6
 800c916:	fb06 1115 	mls	r1, r6, r5, r1
 800c91a:	3130      	adds	r1, #48	; 0x30
 800c91c:	2d09      	cmp	r5, #9
 800c91e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c922:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c926:	4629      	mov	r1, r5
 800c928:	dc09      	bgt.n	800c93e <__exponent+0x4c>
 800c92a:	3130      	adds	r1, #48	; 0x30
 800c92c:	3b02      	subs	r3, #2
 800c92e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c932:	42bb      	cmp	r3, r7
 800c934:	4622      	mov	r2, r4
 800c936:	d304      	bcc.n	800c942 <__exponent+0x50>
 800c938:	1a10      	subs	r0, r2, r0
 800c93a:	b003      	add	sp, #12
 800c93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c93e:	4613      	mov	r3, r2
 800c940:	e7e7      	b.n	800c912 <__exponent+0x20>
 800c942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c946:	f804 2b01 	strb.w	r2, [r4], #1
 800c94a:	e7f2      	b.n	800c932 <__exponent+0x40>
 800c94c:	2330      	movs	r3, #48	; 0x30
 800c94e:	4419      	add	r1, r3
 800c950:	7083      	strb	r3, [r0, #2]
 800c952:	1d02      	adds	r2, r0, #4
 800c954:	70c1      	strb	r1, [r0, #3]
 800c956:	e7ef      	b.n	800c938 <__exponent+0x46>

0800c958 <_printf_float>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	b08d      	sub	sp, #52	; 0x34
 800c95e:	460c      	mov	r4, r1
 800c960:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c964:	4616      	mov	r6, r2
 800c966:	461f      	mov	r7, r3
 800c968:	4605      	mov	r5, r0
 800c96a:	f001 fa31 	bl	800ddd0 <_localeconv_r>
 800c96e:	6803      	ldr	r3, [r0, #0]
 800c970:	9304      	str	r3, [sp, #16]
 800c972:	4618      	mov	r0, r3
 800c974:	f7f3 fc34 	bl	80001e0 <strlen>
 800c978:	2300      	movs	r3, #0
 800c97a:	930a      	str	r3, [sp, #40]	; 0x28
 800c97c:	f8d8 3000 	ldr.w	r3, [r8]
 800c980:	9005      	str	r0, [sp, #20]
 800c982:	3307      	adds	r3, #7
 800c984:	f023 0307 	bic.w	r3, r3, #7
 800c988:	f103 0208 	add.w	r2, r3, #8
 800c98c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c990:	f8d4 b000 	ldr.w	fp, [r4]
 800c994:	f8c8 2000 	str.w	r2, [r8]
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c9a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c9a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9a8:	9307      	str	r3, [sp, #28]
 800c9aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800c9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9b2:	4ba7      	ldr	r3, [pc, #668]	; (800cc50 <_printf_float+0x2f8>)
 800c9b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9b8:	f7f4 f8c0 	bl	8000b3c <__aeabi_dcmpun>
 800c9bc:	bb70      	cbnz	r0, 800ca1c <_printf_float+0xc4>
 800c9be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9c2:	4ba3      	ldr	r3, [pc, #652]	; (800cc50 <_printf_float+0x2f8>)
 800c9c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9c8:	f7f4 f89a 	bl	8000b00 <__aeabi_dcmple>
 800c9cc:	bb30      	cbnz	r0, 800ca1c <_printf_float+0xc4>
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	f7f4 f889 	bl	8000aec <__aeabi_dcmplt>
 800c9da:	b110      	cbz	r0, 800c9e2 <_printf_float+0x8a>
 800c9dc:	232d      	movs	r3, #45	; 0x2d
 800c9de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e2:	4a9c      	ldr	r2, [pc, #624]	; (800cc54 <_printf_float+0x2fc>)
 800c9e4:	4b9c      	ldr	r3, [pc, #624]	; (800cc58 <_printf_float+0x300>)
 800c9e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c9ea:	bf8c      	ite	hi
 800c9ec:	4690      	movhi	r8, r2
 800c9ee:	4698      	movls	r8, r3
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	f02b 0204 	bic.w	r2, fp, #4
 800c9f6:	6123      	str	r3, [r4, #16]
 800c9f8:	6022      	str	r2, [r4, #0]
 800c9fa:	f04f 0900 	mov.w	r9, #0
 800c9fe:	9700      	str	r7, [sp, #0]
 800ca00:	4633      	mov	r3, r6
 800ca02:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca04:	4621      	mov	r1, r4
 800ca06:	4628      	mov	r0, r5
 800ca08:	f000 f9e6 	bl	800cdd8 <_printf_common>
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	f040 808d 	bne.w	800cb2c <_printf_float+0x1d4>
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca16:	b00d      	add	sp, #52	; 0x34
 800ca18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	464b      	mov	r3, r9
 800ca20:	4640      	mov	r0, r8
 800ca22:	4649      	mov	r1, r9
 800ca24:	f7f4 f88a 	bl	8000b3c <__aeabi_dcmpun>
 800ca28:	b110      	cbz	r0, 800ca30 <_printf_float+0xd8>
 800ca2a:	4a8c      	ldr	r2, [pc, #560]	; (800cc5c <_printf_float+0x304>)
 800ca2c:	4b8c      	ldr	r3, [pc, #560]	; (800cc60 <_printf_float+0x308>)
 800ca2e:	e7da      	b.n	800c9e6 <_printf_float+0x8e>
 800ca30:	6861      	ldr	r1, [r4, #4]
 800ca32:	1c4b      	adds	r3, r1, #1
 800ca34:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ca38:	a80a      	add	r0, sp, #40	; 0x28
 800ca3a:	d13e      	bne.n	800caba <_printf_float+0x162>
 800ca3c:	2306      	movs	r3, #6
 800ca3e:	6063      	str	r3, [r4, #4]
 800ca40:	2300      	movs	r3, #0
 800ca42:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ca46:	ab09      	add	r3, sp, #36	; 0x24
 800ca48:	9300      	str	r3, [sp, #0]
 800ca4a:	ec49 8b10 	vmov	d0, r8, r9
 800ca4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca52:	6022      	str	r2, [r4, #0]
 800ca54:	f8cd a004 	str.w	sl, [sp, #4]
 800ca58:	6861      	ldr	r1, [r4, #4]
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f7ff fee8 	bl	800c830 <__cvt>
 800ca60:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ca64:	2b47      	cmp	r3, #71	; 0x47
 800ca66:	4680      	mov	r8, r0
 800ca68:	d109      	bne.n	800ca7e <_printf_float+0x126>
 800ca6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6c:	1cd8      	adds	r0, r3, #3
 800ca6e:	db02      	blt.n	800ca76 <_printf_float+0x11e>
 800ca70:	6862      	ldr	r2, [r4, #4]
 800ca72:	4293      	cmp	r3, r2
 800ca74:	dd47      	ble.n	800cb06 <_printf_float+0x1ae>
 800ca76:	f1aa 0a02 	sub.w	sl, sl, #2
 800ca7a:	fa5f fa8a 	uxtb.w	sl, sl
 800ca7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ca82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca84:	d824      	bhi.n	800cad0 <_printf_float+0x178>
 800ca86:	3901      	subs	r1, #1
 800ca88:	4652      	mov	r2, sl
 800ca8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca8e:	9109      	str	r1, [sp, #36]	; 0x24
 800ca90:	f7ff ff2f 	bl	800c8f2 <__exponent>
 800ca94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca96:	1813      	adds	r3, r2, r0
 800ca98:	2a01      	cmp	r2, #1
 800ca9a:	4681      	mov	r9, r0
 800ca9c:	6123      	str	r3, [r4, #16]
 800ca9e:	dc02      	bgt.n	800caa6 <_printf_float+0x14e>
 800caa0:	6822      	ldr	r2, [r4, #0]
 800caa2:	07d1      	lsls	r1, r2, #31
 800caa4:	d501      	bpl.n	800caaa <_printf_float+0x152>
 800caa6:	3301      	adds	r3, #1
 800caa8:	6123      	str	r3, [r4, #16]
 800caaa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0a5      	beq.n	800c9fe <_printf_float+0xa6>
 800cab2:	232d      	movs	r3, #45	; 0x2d
 800cab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab8:	e7a1      	b.n	800c9fe <_printf_float+0xa6>
 800caba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800cabe:	f000 8177 	beq.w	800cdb0 <_printf_float+0x458>
 800cac2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cac6:	d1bb      	bne.n	800ca40 <_printf_float+0xe8>
 800cac8:	2900      	cmp	r1, #0
 800caca:	d1b9      	bne.n	800ca40 <_printf_float+0xe8>
 800cacc:	2301      	movs	r3, #1
 800cace:	e7b6      	b.n	800ca3e <_printf_float+0xe6>
 800cad0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cad4:	d119      	bne.n	800cb0a <_printf_float+0x1b2>
 800cad6:	2900      	cmp	r1, #0
 800cad8:	6863      	ldr	r3, [r4, #4]
 800cada:	dd0c      	ble.n	800caf6 <_printf_float+0x19e>
 800cadc:	6121      	str	r1, [r4, #16]
 800cade:	b913      	cbnz	r3, 800cae6 <_printf_float+0x18e>
 800cae0:	6822      	ldr	r2, [r4, #0]
 800cae2:	07d2      	lsls	r2, r2, #31
 800cae4:	d502      	bpl.n	800caec <_printf_float+0x194>
 800cae6:	3301      	adds	r3, #1
 800cae8:	440b      	add	r3, r1
 800caea:	6123      	str	r3, [r4, #16]
 800caec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caee:	65a3      	str	r3, [r4, #88]	; 0x58
 800caf0:	f04f 0900 	mov.w	r9, #0
 800caf4:	e7d9      	b.n	800caaa <_printf_float+0x152>
 800caf6:	b913      	cbnz	r3, 800cafe <_printf_float+0x1a6>
 800caf8:	6822      	ldr	r2, [r4, #0]
 800cafa:	07d0      	lsls	r0, r2, #31
 800cafc:	d501      	bpl.n	800cb02 <_printf_float+0x1aa>
 800cafe:	3302      	adds	r3, #2
 800cb00:	e7f3      	b.n	800caea <_printf_float+0x192>
 800cb02:	2301      	movs	r3, #1
 800cb04:	e7f1      	b.n	800caea <_printf_float+0x192>
 800cb06:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cb0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	db05      	blt.n	800cb1e <_printf_float+0x1c6>
 800cb12:	6822      	ldr	r2, [r4, #0]
 800cb14:	6123      	str	r3, [r4, #16]
 800cb16:	07d1      	lsls	r1, r2, #31
 800cb18:	d5e8      	bpl.n	800caec <_printf_float+0x194>
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	e7e5      	b.n	800caea <_printf_float+0x192>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	bfd4      	ite	le
 800cb22:	f1c3 0302 	rsble	r3, r3, #2
 800cb26:	2301      	movgt	r3, #1
 800cb28:	4413      	add	r3, r2
 800cb2a:	e7de      	b.n	800caea <_printf_float+0x192>
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	055a      	lsls	r2, r3, #21
 800cb30:	d407      	bmi.n	800cb42 <_printf_float+0x1ea>
 800cb32:	6923      	ldr	r3, [r4, #16]
 800cb34:	4642      	mov	r2, r8
 800cb36:	4631      	mov	r1, r6
 800cb38:	4628      	mov	r0, r5
 800cb3a:	47b8      	blx	r7
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	d12b      	bne.n	800cb98 <_printf_float+0x240>
 800cb40:	e767      	b.n	800ca12 <_printf_float+0xba>
 800cb42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cb46:	f240 80dc 	bls.w	800cd02 <_printf_float+0x3aa>
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb52:	f7f3 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d033      	beq.n	800cbc2 <_printf_float+0x26a>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4a41      	ldr	r2, [pc, #260]	; (800cc64 <_printf_float+0x30c>)
 800cb5e:	4631      	mov	r1, r6
 800cb60:	4628      	mov	r0, r5
 800cb62:	47b8      	blx	r7
 800cb64:	3001      	adds	r0, #1
 800cb66:	f43f af54 	beq.w	800ca12 <_printf_float+0xba>
 800cb6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	db02      	blt.n	800cb78 <_printf_float+0x220>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	07d8      	lsls	r0, r3, #31
 800cb76:	d50f      	bpl.n	800cb98 <_printf_float+0x240>
 800cb78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb7c:	4631      	mov	r1, r6
 800cb7e:	4628      	mov	r0, r5
 800cb80:	47b8      	blx	r7
 800cb82:	3001      	adds	r0, #1
 800cb84:	f43f af45 	beq.w	800ca12 <_printf_float+0xba>
 800cb88:	f04f 0800 	mov.w	r8, #0
 800cb8c:	f104 091a 	add.w	r9, r4, #26
 800cb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb92:	3b01      	subs	r3, #1
 800cb94:	4543      	cmp	r3, r8
 800cb96:	dc09      	bgt.n	800cbac <_printf_float+0x254>
 800cb98:	6823      	ldr	r3, [r4, #0]
 800cb9a:	079b      	lsls	r3, r3, #30
 800cb9c:	f100 8103 	bmi.w	800cda6 <_printf_float+0x44e>
 800cba0:	68e0      	ldr	r0, [r4, #12]
 800cba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cba4:	4298      	cmp	r0, r3
 800cba6:	bfb8      	it	lt
 800cba8:	4618      	movlt	r0, r3
 800cbaa:	e734      	b.n	800ca16 <_printf_float+0xbe>
 800cbac:	2301      	movs	r3, #1
 800cbae:	464a      	mov	r2, r9
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	47b8      	blx	r7
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	f43f af2b 	beq.w	800ca12 <_printf_float+0xba>
 800cbbc:	f108 0801 	add.w	r8, r8, #1
 800cbc0:	e7e6      	b.n	800cb90 <_printf_float+0x238>
 800cbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	dc2b      	bgt.n	800cc20 <_printf_float+0x2c8>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	4a26      	ldr	r2, [pc, #152]	; (800cc64 <_printf_float+0x30c>)
 800cbcc:	4631      	mov	r1, r6
 800cbce:	4628      	mov	r0, r5
 800cbd0:	47b8      	blx	r7
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	f43f af1d 	beq.w	800ca12 <_printf_float+0xba>
 800cbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbda:	b923      	cbnz	r3, 800cbe6 <_printf_float+0x28e>
 800cbdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbde:	b913      	cbnz	r3, 800cbe6 <_printf_float+0x28e>
 800cbe0:	6823      	ldr	r3, [r4, #0]
 800cbe2:	07d9      	lsls	r1, r3, #31
 800cbe4:	d5d8      	bpl.n	800cb98 <_printf_float+0x240>
 800cbe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbea:	4631      	mov	r1, r6
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b8      	blx	r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	f43f af0e 	beq.w	800ca12 <_printf_float+0xba>
 800cbf6:	f04f 0900 	mov.w	r9, #0
 800cbfa:	f104 0a1a 	add.w	sl, r4, #26
 800cbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc00:	425b      	negs	r3, r3
 800cc02:	454b      	cmp	r3, r9
 800cc04:	dc01      	bgt.n	800cc0a <_printf_float+0x2b2>
 800cc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc08:	e794      	b.n	800cb34 <_printf_float+0x1dc>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4652      	mov	r2, sl
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4628      	mov	r0, r5
 800cc12:	47b8      	blx	r7
 800cc14:	3001      	adds	r0, #1
 800cc16:	f43f aefc 	beq.w	800ca12 <_printf_float+0xba>
 800cc1a:	f109 0901 	add.w	r9, r9, #1
 800cc1e:	e7ee      	b.n	800cbfe <_printf_float+0x2a6>
 800cc20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc24:	429a      	cmp	r2, r3
 800cc26:	bfa8      	it	ge
 800cc28:	461a      	movge	r2, r3
 800cc2a:	2a00      	cmp	r2, #0
 800cc2c:	4691      	mov	r9, r2
 800cc2e:	dd07      	ble.n	800cc40 <_printf_float+0x2e8>
 800cc30:	4613      	mov	r3, r2
 800cc32:	4631      	mov	r1, r6
 800cc34:	4642      	mov	r2, r8
 800cc36:	4628      	mov	r0, r5
 800cc38:	47b8      	blx	r7
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	f43f aee9 	beq.w	800ca12 <_printf_float+0xba>
 800cc40:	f104 031a 	add.w	r3, r4, #26
 800cc44:	f04f 0b00 	mov.w	fp, #0
 800cc48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc4c:	9306      	str	r3, [sp, #24]
 800cc4e:	e015      	b.n	800cc7c <_printf_float+0x324>
 800cc50:	7fefffff 	.word	0x7fefffff
 800cc54:	0800e878 	.word	0x0800e878
 800cc58:	0800e874 	.word	0x0800e874
 800cc5c:	0800e880 	.word	0x0800e880
 800cc60:	0800e87c 	.word	0x0800e87c
 800cc64:	0800e884 	.word	0x0800e884
 800cc68:	2301      	movs	r3, #1
 800cc6a:	9a06      	ldr	r2, [sp, #24]
 800cc6c:	4631      	mov	r1, r6
 800cc6e:	4628      	mov	r0, r5
 800cc70:	47b8      	blx	r7
 800cc72:	3001      	adds	r0, #1
 800cc74:	f43f aecd 	beq.w	800ca12 <_printf_float+0xba>
 800cc78:	f10b 0b01 	add.w	fp, fp, #1
 800cc7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cc80:	ebaa 0309 	sub.w	r3, sl, r9
 800cc84:	455b      	cmp	r3, fp
 800cc86:	dcef      	bgt.n	800cc68 <_printf_float+0x310>
 800cc88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	44d0      	add	r8, sl
 800cc90:	db15      	blt.n	800ccbe <_printf_float+0x366>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	07da      	lsls	r2, r3, #31
 800cc96:	d412      	bmi.n	800ccbe <_printf_float+0x366>
 800cc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc9c:	eba3 020a 	sub.w	r2, r3, sl
 800cca0:	eba3 0a01 	sub.w	sl, r3, r1
 800cca4:	4592      	cmp	sl, r2
 800cca6:	bfa8      	it	ge
 800cca8:	4692      	movge	sl, r2
 800ccaa:	f1ba 0f00 	cmp.w	sl, #0
 800ccae:	dc0e      	bgt.n	800ccce <_printf_float+0x376>
 800ccb0:	f04f 0800 	mov.w	r8, #0
 800ccb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccb8:	f104 091a 	add.w	r9, r4, #26
 800ccbc:	e019      	b.n	800ccf2 <_printf_float+0x39a>
 800ccbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	47b8      	blx	r7
 800ccc8:	3001      	adds	r0, #1
 800ccca:	d1e5      	bne.n	800cc98 <_printf_float+0x340>
 800cccc:	e6a1      	b.n	800ca12 <_printf_float+0xba>
 800ccce:	4653      	mov	r3, sl
 800ccd0:	4642      	mov	r2, r8
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	47b8      	blx	r7
 800ccd8:	3001      	adds	r0, #1
 800ccda:	d1e9      	bne.n	800ccb0 <_printf_float+0x358>
 800ccdc:	e699      	b.n	800ca12 <_printf_float+0xba>
 800ccde:	2301      	movs	r3, #1
 800cce0:	464a      	mov	r2, r9
 800cce2:	4631      	mov	r1, r6
 800cce4:	4628      	mov	r0, r5
 800cce6:	47b8      	blx	r7
 800cce8:	3001      	adds	r0, #1
 800ccea:	f43f ae92 	beq.w	800ca12 <_printf_float+0xba>
 800ccee:	f108 0801 	add.w	r8, r8, #1
 800ccf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccf6:	1a9b      	subs	r3, r3, r2
 800ccf8:	eba3 030a 	sub.w	r3, r3, sl
 800ccfc:	4543      	cmp	r3, r8
 800ccfe:	dcee      	bgt.n	800ccde <_printf_float+0x386>
 800cd00:	e74a      	b.n	800cb98 <_printf_float+0x240>
 800cd02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd04:	2a01      	cmp	r2, #1
 800cd06:	dc01      	bgt.n	800cd0c <_printf_float+0x3b4>
 800cd08:	07db      	lsls	r3, r3, #31
 800cd0a:	d53a      	bpl.n	800cd82 <_printf_float+0x42a>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	4642      	mov	r2, r8
 800cd10:	4631      	mov	r1, r6
 800cd12:	4628      	mov	r0, r5
 800cd14:	47b8      	blx	r7
 800cd16:	3001      	adds	r0, #1
 800cd18:	f43f ae7b 	beq.w	800ca12 <_printf_float+0xba>
 800cd1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd20:	4631      	mov	r1, r6
 800cd22:	4628      	mov	r0, r5
 800cd24:	47b8      	blx	r7
 800cd26:	3001      	adds	r0, #1
 800cd28:	f108 0801 	add.w	r8, r8, #1
 800cd2c:	f43f ae71 	beq.w	800ca12 <_printf_float+0xba>
 800cd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd32:	2200      	movs	r2, #0
 800cd34:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800cd38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f7f3 fecb 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd42:	b9c8      	cbnz	r0, 800cd78 <_printf_float+0x420>
 800cd44:	4653      	mov	r3, sl
 800cd46:	4642      	mov	r2, r8
 800cd48:	4631      	mov	r1, r6
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	47b8      	blx	r7
 800cd4e:	3001      	adds	r0, #1
 800cd50:	d10e      	bne.n	800cd70 <_printf_float+0x418>
 800cd52:	e65e      	b.n	800ca12 <_printf_float+0xba>
 800cd54:	2301      	movs	r3, #1
 800cd56:	4652      	mov	r2, sl
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	47b8      	blx	r7
 800cd5e:	3001      	adds	r0, #1
 800cd60:	f43f ae57 	beq.w	800ca12 <_printf_float+0xba>
 800cd64:	f108 0801 	add.w	r8, r8, #1
 800cd68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	4543      	cmp	r3, r8
 800cd6e:	dcf1      	bgt.n	800cd54 <_printf_float+0x3fc>
 800cd70:	464b      	mov	r3, r9
 800cd72:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd76:	e6de      	b.n	800cb36 <_printf_float+0x1de>
 800cd78:	f04f 0800 	mov.w	r8, #0
 800cd7c:	f104 0a1a 	add.w	sl, r4, #26
 800cd80:	e7f2      	b.n	800cd68 <_printf_float+0x410>
 800cd82:	2301      	movs	r3, #1
 800cd84:	e7df      	b.n	800cd46 <_printf_float+0x3ee>
 800cd86:	2301      	movs	r3, #1
 800cd88:	464a      	mov	r2, r9
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	47b8      	blx	r7
 800cd90:	3001      	adds	r0, #1
 800cd92:	f43f ae3e 	beq.w	800ca12 <_printf_float+0xba>
 800cd96:	f108 0801 	add.w	r8, r8, #1
 800cd9a:	68e3      	ldr	r3, [r4, #12]
 800cd9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd9e:	1a9b      	subs	r3, r3, r2
 800cda0:	4543      	cmp	r3, r8
 800cda2:	dcf0      	bgt.n	800cd86 <_printf_float+0x42e>
 800cda4:	e6fc      	b.n	800cba0 <_printf_float+0x248>
 800cda6:	f04f 0800 	mov.w	r8, #0
 800cdaa:	f104 0919 	add.w	r9, r4, #25
 800cdae:	e7f4      	b.n	800cd9a <_printf_float+0x442>
 800cdb0:	2900      	cmp	r1, #0
 800cdb2:	f43f ae8b 	beq.w	800cacc <_printf_float+0x174>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cdbc:	ab09      	add	r3, sp, #36	; 0x24
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	ec49 8b10 	vmov	d0, r8, r9
 800cdc4:	6022      	str	r2, [r4, #0]
 800cdc6:	f8cd a004 	str.w	sl, [sp, #4]
 800cdca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f7ff fd2e 	bl	800c830 <__cvt>
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	e648      	b.n	800ca6a <_printf_float+0x112>

0800cdd8 <_printf_common>:
 800cdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cddc:	4691      	mov	r9, r2
 800cdde:	461f      	mov	r7, r3
 800cde0:	688a      	ldr	r2, [r1, #8]
 800cde2:	690b      	ldr	r3, [r1, #16]
 800cde4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cde8:	4293      	cmp	r3, r2
 800cdea:	bfb8      	it	lt
 800cdec:	4613      	movlt	r3, r2
 800cdee:	f8c9 3000 	str.w	r3, [r9]
 800cdf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdf6:	4606      	mov	r6, r0
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	b112      	cbz	r2, 800ce02 <_printf_common+0x2a>
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	f8c9 3000 	str.w	r3, [r9]
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	0699      	lsls	r1, r3, #26
 800ce06:	bf42      	ittt	mi
 800ce08:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ce0c:	3302      	addmi	r3, #2
 800ce0e:	f8c9 3000 	strmi.w	r3, [r9]
 800ce12:	6825      	ldr	r5, [r4, #0]
 800ce14:	f015 0506 	ands.w	r5, r5, #6
 800ce18:	d107      	bne.n	800ce2a <_printf_common+0x52>
 800ce1a:	f104 0a19 	add.w	sl, r4, #25
 800ce1e:	68e3      	ldr	r3, [r4, #12]
 800ce20:	f8d9 2000 	ldr.w	r2, [r9]
 800ce24:	1a9b      	subs	r3, r3, r2
 800ce26:	42ab      	cmp	r3, r5
 800ce28:	dc28      	bgt.n	800ce7c <_printf_common+0xa4>
 800ce2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ce2e:	6822      	ldr	r2, [r4, #0]
 800ce30:	3300      	adds	r3, #0
 800ce32:	bf18      	it	ne
 800ce34:	2301      	movne	r3, #1
 800ce36:	0692      	lsls	r2, r2, #26
 800ce38:	d42d      	bmi.n	800ce96 <_printf_common+0xbe>
 800ce3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce3e:	4639      	mov	r1, r7
 800ce40:	4630      	mov	r0, r6
 800ce42:	47c0      	blx	r8
 800ce44:	3001      	adds	r0, #1
 800ce46:	d020      	beq.n	800ce8a <_printf_common+0xb2>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	68e5      	ldr	r5, [r4, #12]
 800ce4c:	f8d9 2000 	ldr.w	r2, [r9]
 800ce50:	f003 0306 	and.w	r3, r3, #6
 800ce54:	2b04      	cmp	r3, #4
 800ce56:	bf08      	it	eq
 800ce58:	1aad      	subeq	r5, r5, r2
 800ce5a:	68a3      	ldr	r3, [r4, #8]
 800ce5c:	6922      	ldr	r2, [r4, #16]
 800ce5e:	bf0c      	ite	eq
 800ce60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce64:	2500      	movne	r5, #0
 800ce66:	4293      	cmp	r3, r2
 800ce68:	bfc4      	itt	gt
 800ce6a:	1a9b      	subgt	r3, r3, r2
 800ce6c:	18ed      	addgt	r5, r5, r3
 800ce6e:	f04f 0900 	mov.w	r9, #0
 800ce72:	341a      	adds	r4, #26
 800ce74:	454d      	cmp	r5, r9
 800ce76:	d11a      	bne.n	800ceae <_printf_common+0xd6>
 800ce78:	2000      	movs	r0, #0
 800ce7a:	e008      	b.n	800ce8e <_printf_common+0xb6>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	4652      	mov	r2, sl
 800ce80:	4639      	mov	r1, r7
 800ce82:	4630      	mov	r0, r6
 800ce84:	47c0      	blx	r8
 800ce86:	3001      	adds	r0, #1
 800ce88:	d103      	bne.n	800ce92 <_printf_common+0xba>
 800ce8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce92:	3501      	adds	r5, #1
 800ce94:	e7c3      	b.n	800ce1e <_printf_common+0x46>
 800ce96:	18e1      	adds	r1, r4, r3
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	2030      	movs	r0, #48	; 0x30
 800ce9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cea0:	4422      	add	r2, r4
 800cea2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cea6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ceaa:	3302      	adds	r3, #2
 800ceac:	e7c5      	b.n	800ce3a <_printf_common+0x62>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	47c0      	blx	r8
 800ceb8:	3001      	adds	r0, #1
 800ceba:	d0e6      	beq.n	800ce8a <_printf_common+0xb2>
 800cebc:	f109 0901 	add.w	r9, r9, #1
 800cec0:	e7d8      	b.n	800ce74 <_printf_common+0x9c>
	...

0800cec4 <_printf_i>:
 800cec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cec8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cecc:	460c      	mov	r4, r1
 800cece:	7e09      	ldrb	r1, [r1, #24]
 800ced0:	b085      	sub	sp, #20
 800ced2:	296e      	cmp	r1, #110	; 0x6e
 800ced4:	4617      	mov	r7, r2
 800ced6:	4606      	mov	r6, r0
 800ced8:	4698      	mov	r8, r3
 800ceda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cedc:	f000 80b3 	beq.w	800d046 <_printf_i+0x182>
 800cee0:	d822      	bhi.n	800cf28 <_printf_i+0x64>
 800cee2:	2963      	cmp	r1, #99	; 0x63
 800cee4:	d036      	beq.n	800cf54 <_printf_i+0x90>
 800cee6:	d80a      	bhi.n	800cefe <_printf_i+0x3a>
 800cee8:	2900      	cmp	r1, #0
 800ceea:	f000 80b9 	beq.w	800d060 <_printf_i+0x19c>
 800ceee:	2958      	cmp	r1, #88	; 0x58
 800cef0:	f000 8083 	beq.w	800cffa <_printf_i+0x136>
 800cef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cef8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cefc:	e032      	b.n	800cf64 <_printf_i+0xa0>
 800cefe:	2964      	cmp	r1, #100	; 0x64
 800cf00:	d001      	beq.n	800cf06 <_printf_i+0x42>
 800cf02:	2969      	cmp	r1, #105	; 0x69
 800cf04:	d1f6      	bne.n	800cef4 <_printf_i+0x30>
 800cf06:	6820      	ldr	r0, [r4, #0]
 800cf08:	6813      	ldr	r3, [r2, #0]
 800cf0a:	0605      	lsls	r5, r0, #24
 800cf0c:	f103 0104 	add.w	r1, r3, #4
 800cf10:	d52a      	bpl.n	800cf68 <_printf_i+0xa4>
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6011      	str	r1, [r2, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	da03      	bge.n	800cf22 <_printf_i+0x5e>
 800cf1a:	222d      	movs	r2, #45	; 0x2d
 800cf1c:	425b      	negs	r3, r3
 800cf1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cf22:	486f      	ldr	r0, [pc, #444]	; (800d0e0 <_printf_i+0x21c>)
 800cf24:	220a      	movs	r2, #10
 800cf26:	e039      	b.n	800cf9c <_printf_i+0xd8>
 800cf28:	2973      	cmp	r1, #115	; 0x73
 800cf2a:	f000 809d 	beq.w	800d068 <_printf_i+0x1a4>
 800cf2e:	d808      	bhi.n	800cf42 <_printf_i+0x7e>
 800cf30:	296f      	cmp	r1, #111	; 0x6f
 800cf32:	d020      	beq.n	800cf76 <_printf_i+0xb2>
 800cf34:	2970      	cmp	r1, #112	; 0x70
 800cf36:	d1dd      	bne.n	800cef4 <_printf_i+0x30>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	f043 0320 	orr.w	r3, r3, #32
 800cf3e:	6023      	str	r3, [r4, #0]
 800cf40:	e003      	b.n	800cf4a <_printf_i+0x86>
 800cf42:	2975      	cmp	r1, #117	; 0x75
 800cf44:	d017      	beq.n	800cf76 <_printf_i+0xb2>
 800cf46:	2978      	cmp	r1, #120	; 0x78
 800cf48:	d1d4      	bne.n	800cef4 <_printf_i+0x30>
 800cf4a:	2378      	movs	r3, #120	; 0x78
 800cf4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf50:	4864      	ldr	r0, [pc, #400]	; (800d0e4 <_printf_i+0x220>)
 800cf52:	e055      	b.n	800d000 <_printf_i+0x13c>
 800cf54:	6813      	ldr	r3, [r2, #0]
 800cf56:	1d19      	adds	r1, r3, #4
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6011      	str	r1, [r2, #0]
 800cf5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf64:	2301      	movs	r3, #1
 800cf66:	e08c      	b.n	800d082 <_printf_i+0x1be>
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6011      	str	r1, [r2, #0]
 800cf6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf70:	bf18      	it	ne
 800cf72:	b21b      	sxthne	r3, r3
 800cf74:	e7cf      	b.n	800cf16 <_printf_i+0x52>
 800cf76:	6813      	ldr	r3, [r2, #0]
 800cf78:	6825      	ldr	r5, [r4, #0]
 800cf7a:	1d18      	adds	r0, r3, #4
 800cf7c:	6010      	str	r0, [r2, #0]
 800cf7e:	0628      	lsls	r0, r5, #24
 800cf80:	d501      	bpl.n	800cf86 <_printf_i+0xc2>
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	e002      	b.n	800cf8c <_printf_i+0xc8>
 800cf86:	0668      	lsls	r0, r5, #25
 800cf88:	d5fb      	bpl.n	800cf82 <_printf_i+0xbe>
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	4854      	ldr	r0, [pc, #336]	; (800d0e0 <_printf_i+0x21c>)
 800cf8e:	296f      	cmp	r1, #111	; 0x6f
 800cf90:	bf14      	ite	ne
 800cf92:	220a      	movne	r2, #10
 800cf94:	2208      	moveq	r2, #8
 800cf96:	2100      	movs	r1, #0
 800cf98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf9c:	6865      	ldr	r5, [r4, #4]
 800cf9e:	60a5      	str	r5, [r4, #8]
 800cfa0:	2d00      	cmp	r5, #0
 800cfa2:	f2c0 8095 	blt.w	800d0d0 <_printf_i+0x20c>
 800cfa6:	6821      	ldr	r1, [r4, #0]
 800cfa8:	f021 0104 	bic.w	r1, r1, #4
 800cfac:	6021      	str	r1, [r4, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d13d      	bne.n	800d02e <_printf_i+0x16a>
 800cfb2:	2d00      	cmp	r5, #0
 800cfb4:	f040 808e 	bne.w	800d0d4 <_printf_i+0x210>
 800cfb8:	4665      	mov	r5, ip
 800cfba:	2a08      	cmp	r2, #8
 800cfbc:	d10b      	bne.n	800cfd6 <_printf_i+0x112>
 800cfbe:	6823      	ldr	r3, [r4, #0]
 800cfc0:	07db      	lsls	r3, r3, #31
 800cfc2:	d508      	bpl.n	800cfd6 <_printf_i+0x112>
 800cfc4:	6923      	ldr	r3, [r4, #16]
 800cfc6:	6862      	ldr	r2, [r4, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	bfde      	ittt	le
 800cfcc:	2330      	movle	r3, #48	; 0x30
 800cfce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cfd2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cfd6:	ebac 0305 	sub.w	r3, ip, r5
 800cfda:	6123      	str	r3, [r4, #16]
 800cfdc:	f8cd 8000 	str.w	r8, [sp]
 800cfe0:	463b      	mov	r3, r7
 800cfe2:	aa03      	add	r2, sp, #12
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f7ff fef6 	bl	800cdd8 <_printf_common>
 800cfec:	3001      	adds	r0, #1
 800cfee:	d14d      	bne.n	800d08c <_printf_i+0x1c8>
 800cff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cff4:	b005      	add	sp, #20
 800cff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cffa:	4839      	ldr	r0, [pc, #228]	; (800d0e0 <_printf_i+0x21c>)
 800cffc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d000:	6813      	ldr	r3, [r2, #0]
 800d002:	6821      	ldr	r1, [r4, #0]
 800d004:	1d1d      	adds	r5, r3, #4
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6015      	str	r5, [r2, #0]
 800d00a:	060a      	lsls	r2, r1, #24
 800d00c:	d50b      	bpl.n	800d026 <_printf_i+0x162>
 800d00e:	07ca      	lsls	r2, r1, #31
 800d010:	bf44      	itt	mi
 800d012:	f041 0120 	orrmi.w	r1, r1, #32
 800d016:	6021      	strmi	r1, [r4, #0]
 800d018:	b91b      	cbnz	r3, 800d022 <_printf_i+0x15e>
 800d01a:	6822      	ldr	r2, [r4, #0]
 800d01c:	f022 0220 	bic.w	r2, r2, #32
 800d020:	6022      	str	r2, [r4, #0]
 800d022:	2210      	movs	r2, #16
 800d024:	e7b7      	b.n	800cf96 <_printf_i+0xd2>
 800d026:	064d      	lsls	r5, r1, #25
 800d028:	bf48      	it	mi
 800d02a:	b29b      	uxthmi	r3, r3
 800d02c:	e7ef      	b.n	800d00e <_printf_i+0x14a>
 800d02e:	4665      	mov	r5, ip
 800d030:	fbb3 f1f2 	udiv	r1, r3, r2
 800d034:	fb02 3311 	mls	r3, r2, r1, r3
 800d038:	5cc3      	ldrb	r3, [r0, r3]
 800d03a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d03e:	460b      	mov	r3, r1
 800d040:	2900      	cmp	r1, #0
 800d042:	d1f5      	bne.n	800d030 <_printf_i+0x16c>
 800d044:	e7b9      	b.n	800cfba <_printf_i+0xf6>
 800d046:	6813      	ldr	r3, [r2, #0]
 800d048:	6825      	ldr	r5, [r4, #0]
 800d04a:	6961      	ldr	r1, [r4, #20]
 800d04c:	1d18      	adds	r0, r3, #4
 800d04e:	6010      	str	r0, [r2, #0]
 800d050:	0628      	lsls	r0, r5, #24
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	d501      	bpl.n	800d05a <_printf_i+0x196>
 800d056:	6019      	str	r1, [r3, #0]
 800d058:	e002      	b.n	800d060 <_printf_i+0x19c>
 800d05a:	066a      	lsls	r2, r5, #25
 800d05c:	d5fb      	bpl.n	800d056 <_printf_i+0x192>
 800d05e:	8019      	strh	r1, [r3, #0]
 800d060:	2300      	movs	r3, #0
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	4665      	mov	r5, ip
 800d066:	e7b9      	b.n	800cfdc <_printf_i+0x118>
 800d068:	6813      	ldr	r3, [r2, #0]
 800d06a:	1d19      	adds	r1, r3, #4
 800d06c:	6011      	str	r1, [r2, #0]
 800d06e:	681d      	ldr	r5, [r3, #0]
 800d070:	6862      	ldr	r2, [r4, #4]
 800d072:	2100      	movs	r1, #0
 800d074:	4628      	mov	r0, r5
 800d076:	f7f3 f8bb 	bl	80001f0 <memchr>
 800d07a:	b108      	cbz	r0, 800d080 <_printf_i+0x1bc>
 800d07c:	1b40      	subs	r0, r0, r5
 800d07e:	6060      	str	r0, [r4, #4]
 800d080:	6863      	ldr	r3, [r4, #4]
 800d082:	6123      	str	r3, [r4, #16]
 800d084:	2300      	movs	r3, #0
 800d086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d08a:	e7a7      	b.n	800cfdc <_printf_i+0x118>
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	462a      	mov	r2, r5
 800d090:	4639      	mov	r1, r7
 800d092:	4630      	mov	r0, r6
 800d094:	47c0      	blx	r8
 800d096:	3001      	adds	r0, #1
 800d098:	d0aa      	beq.n	800cff0 <_printf_i+0x12c>
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	079b      	lsls	r3, r3, #30
 800d09e:	d413      	bmi.n	800d0c8 <_printf_i+0x204>
 800d0a0:	68e0      	ldr	r0, [r4, #12]
 800d0a2:	9b03      	ldr	r3, [sp, #12]
 800d0a4:	4298      	cmp	r0, r3
 800d0a6:	bfb8      	it	lt
 800d0a8:	4618      	movlt	r0, r3
 800d0aa:	e7a3      	b.n	800cff4 <_printf_i+0x130>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	464a      	mov	r2, r9
 800d0b0:	4639      	mov	r1, r7
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	47c0      	blx	r8
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	d09a      	beq.n	800cff0 <_printf_i+0x12c>
 800d0ba:	3501      	adds	r5, #1
 800d0bc:	68e3      	ldr	r3, [r4, #12]
 800d0be:	9a03      	ldr	r2, [sp, #12]
 800d0c0:	1a9b      	subs	r3, r3, r2
 800d0c2:	42ab      	cmp	r3, r5
 800d0c4:	dcf2      	bgt.n	800d0ac <_printf_i+0x1e8>
 800d0c6:	e7eb      	b.n	800d0a0 <_printf_i+0x1dc>
 800d0c8:	2500      	movs	r5, #0
 800d0ca:	f104 0919 	add.w	r9, r4, #25
 800d0ce:	e7f5      	b.n	800d0bc <_printf_i+0x1f8>
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1ac      	bne.n	800d02e <_printf_i+0x16a>
 800d0d4:	7803      	ldrb	r3, [r0, #0]
 800d0d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0de:	e76c      	b.n	800cfba <_printf_i+0xf6>
 800d0e0:	0800e886 	.word	0x0800e886
 800d0e4:	0800e897 	.word	0x0800e897

0800d0e8 <_sbrk_r>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	4c06      	ldr	r4, [pc, #24]	; (800d104 <_sbrk_r+0x1c>)
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	4608      	mov	r0, r1
 800d0f2:	6023      	str	r3, [r4, #0]
 800d0f4:	f7f4 fd68 	bl	8001bc8 <_sbrk>
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	d102      	bne.n	800d102 <_sbrk_r+0x1a>
 800d0fc:	6823      	ldr	r3, [r4, #0]
 800d0fe:	b103      	cbz	r3, 800d102 <_sbrk_r+0x1a>
 800d100:	602b      	str	r3, [r5, #0]
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	20006954 	.word	0x20006954

0800d108 <siprintf>:
 800d108:	b40e      	push	{r1, r2, r3}
 800d10a:	b500      	push	{lr}
 800d10c:	b09c      	sub	sp, #112	; 0x70
 800d10e:	ab1d      	add	r3, sp, #116	; 0x74
 800d110:	9002      	str	r0, [sp, #8]
 800d112:	9006      	str	r0, [sp, #24]
 800d114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d118:	4809      	ldr	r0, [pc, #36]	; (800d140 <siprintf+0x38>)
 800d11a:	9107      	str	r1, [sp, #28]
 800d11c:	9104      	str	r1, [sp, #16]
 800d11e:	4909      	ldr	r1, [pc, #36]	; (800d144 <siprintf+0x3c>)
 800d120:	f853 2b04 	ldr.w	r2, [r3], #4
 800d124:	9105      	str	r1, [sp, #20]
 800d126:	6800      	ldr	r0, [r0, #0]
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	a902      	add	r1, sp, #8
 800d12c:	f001 f9a4 	bl	800e478 <_svfiprintf_r>
 800d130:	9b02      	ldr	r3, [sp, #8]
 800d132:	2200      	movs	r2, #0
 800d134:	701a      	strb	r2, [r3, #0]
 800d136:	b01c      	add	sp, #112	; 0x70
 800d138:	f85d eb04 	ldr.w	lr, [sp], #4
 800d13c:	b003      	add	sp, #12
 800d13e:	4770      	bx	lr
 800d140:	20000184 	.word	0x20000184
 800d144:	ffff0208 	.word	0xffff0208

0800d148 <quorem>:
 800d148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	6903      	ldr	r3, [r0, #16]
 800d14e:	690c      	ldr	r4, [r1, #16]
 800d150:	42a3      	cmp	r3, r4
 800d152:	4680      	mov	r8, r0
 800d154:	f2c0 8082 	blt.w	800d25c <quorem+0x114>
 800d158:	3c01      	subs	r4, #1
 800d15a:	f101 0714 	add.w	r7, r1, #20
 800d15e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d162:	f100 0614 	add.w	r6, r0, #20
 800d166:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d16a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d16e:	eb06 030c 	add.w	r3, r6, ip
 800d172:	3501      	adds	r5, #1
 800d174:	eb07 090c 	add.w	r9, r7, ip
 800d178:	9301      	str	r3, [sp, #4]
 800d17a:	fbb0 f5f5 	udiv	r5, r0, r5
 800d17e:	b395      	cbz	r5, 800d1e6 <quorem+0x9e>
 800d180:	f04f 0a00 	mov.w	sl, #0
 800d184:	4638      	mov	r0, r7
 800d186:	46b6      	mov	lr, r6
 800d188:	46d3      	mov	fp, sl
 800d18a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d18e:	b293      	uxth	r3, r2
 800d190:	fb05 a303 	mla	r3, r5, r3, sl
 800d194:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d198:	b29b      	uxth	r3, r3
 800d19a:	ebab 0303 	sub.w	r3, fp, r3
 800d19e:	0c12      	lsrs	r2, r2, #16
 800d1a0:	f8de b000 	ldr.w	fp, [lr]
 800d1a4:	fb05 a202 	mla	r2, r5, r2, sl
 800d1a8:	fa13 f38b 	uxtah	r3, r3, fp
 800d1ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d1b0:	fa1f fb82 	uxth.w	fp, r2
 800d1b4:	f8de 2000 	ldr.w	r2, [lr]
 800d1b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d1bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1c6:	4581      	cmp	r9, r0
 800d1c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d1cc:	f84e 3b04 	str.w	r3, [lr], #4
 800d1d0:	d2db      	bcs.n	800d18a <quorem+0x42>
 800d1d2:	f856 300c 	ldr.w	r3, [r6, ip]
 800d1d6:	b933      	cbnz	r3, 800d1e6 <quorem+0x9e>
 800d1d8:	9b01      	ldr	r3, [sp, #4]
 800d1da:	3b04      	subs	r3, #4
 800d1dc:	429e      	cmp	r6, r3
 800d1de:	461a      	mov	r2, r3
 800d1e0:	d330      	bcc.n	800d244 <quorem+0xfc>
 800d1e2:	f8c8 4010 	str.w	r4, [r8, #16]
 800d1e6:	4640      	mov	r0, r8
 800d1e8:	f001 f818 	bl	800e21c <__mcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	db25      	blt.n	800d23c <quorem+0xf4>
 800d1f0:	3501      	adds	r5, #1
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f04f 0c00 	mov.w	ip, #0
 800d1f8:	f857 2b04 	ldr.w	r2, [r7], #4
 800d1fc:	f8d0 e000 	ldr.w	lr, [r0]
 800d200:	b293      	uxth	r3, r2
 800d202:	ebac 0303 	sub.w	r3, ip, r3
 800d206:	0c12      	lsrs	r2, r2, #16
 800d208:	fa13 f38e 	uxtah	r3, r3, lr
 800d20c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d214:	b29b      	uxth	r3, r3
 800d216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d21a:	45b9      	cmp	r9, r7
 800d21c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d220:	f840 3b04 	str.w	r3, [r0], #4
 800d224:	d2e8      	bcs.n	800d1f8 <quorem+0xb0>
 800d226:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d22a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d22e:	b92a      	cbnz	r2, 800d23c <quorem+0xf4>
 800d230:	3b04      	subs	r3, #4
 800d232:	429e      	cmp	r6, r3
 800d234:	461a      	mov	r2, r3
 800d236:	d30b      	bcc.n	800d250 <quorem+0x108>
 800d238:	f8c8 4010 	str.w	r4, [r8, #16]
 800d23c:	4628      	mov	r0, r5
 800d23e:	b003      	add	sp, #12
 800d240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d244:	6812      	ldr	r2, [r2, #0]
 800d246:	3b04      	subs	r3, #4
 800d248:	2a00      	cmp	r2, #0
 800d24a:	d1ca      	bne.n	800d1e2 <quorem+0x9a>
 800d24c:	3c01      	subs	r4, #1
 800d24e:	e7c5      	b.n	800d1dc <quorem+0x94>
 800d250:	6812      	ldr	r2, [r2, #0]
 800d252:	3b04      	subs	r3, #4
 800d254:	2a00      	cmp	r2, #0
 800d256:	d1ef      	bne.n	800d238 <quorem+0xf0>
 800d258:	3c01      	subs	r4, #1
 800d25a:	e7ea      	b.n	800d232 <quorem+0xea>
 800d25c:	2000      	movs	r0, #0
 800d25e:	e7ee      	b.n	800d23e <quorem+0xf6>

0800d260 <_dtoa_r>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	ec57 6b10 	vmov	r6, r7, d0
 800d268:	b097      	sub	sp, #92	; 0x5c
 800d26a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d26c:	9106      	str	r1, [sp, #24]
 800d26e:	4604      	mov	r4, r0
 800d270:	920b      	str	r2, [sp, #44]	; 0x2c
 800d272:	9312      	str	r3, [sp, #72]	; 0x48
 800d274:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d278:	e9cd 6700 	strd	r6, r7, [sp]
 800d27c:	b93d      	cbnz	r5, 800d28e <_dtoa_r+0x2e>
 800d27e:	2010      	movs	r0, #16
 800d280:	f7ff fa0a 	bl	800c698 <malloc>
 800d284:	6260      	str	r0, [r4, #36]	; 0x24
 800d286:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d28a:	6005      	str	r5, [r0, #0]
 800d28c:	60c5      	str	r5, [r0, #12]
 800d28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d290:	6819      	ldr	r1, [r3, #0]
 800d292:	b151      	cbz	r1, 800d2aa <_dtoa_r+0x4a>
 800d294:	685a      	ldr	r2, [r3, #4]
 800d296:	604a      	str	r2, [r1, #4]
 800d298:	2301      	movs	r3, #1
 800d29a:	4093      	lsls	r3, r2
 800d29c:	608b      	str	r3, [r1, #8]
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f000 fdda 	bl	800de58 <_Bfree>
 800d2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	1e3b      	subs	r3, r7, #0
 800d2ac:	bfbb      	ittet	lt
 800d2ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d2b2:	9301      	strlt	r3, [sp, #4]
 800d2b4:	2300      	movge	r3, #0
 800d2b6:	2201      	movlt	r2, #1
 800d2b8:	bfac      	ite	ge
 800d2ba:	f8c8 3000 	strge.w	r3, [r8]
 800d2be:	f8c8 2000 	strlt.w	r2, [r8]
 800d2c2:	4baf      	ldr	r3, [pc, #700]	; (800d580 <_dtoa_r+0x320>)
 800d2c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d2c8:	ea33 0308 	bics.w	r3, r3, r8
 800d2cc:	d114      	bne.n	800d2f8 <_dtoa_r+0x98>
 800d2ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	9b00      	ldr	r3, [sp, #0]
 800d2d8:	b923      	cbnz	r3, 800d2e4 <_dtoa_r+0x84>
 800d2da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	f000 8542 	beq.w	800dd68 <_dtoa_r+0xb08>
 800d2e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d594 <_dtoa_r+0x334>
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f000 8544 	beq.w	800dd78 <_dtoa_r+0xb18>
 800d2f0:	f10b 0303 	add.w	r3, fp, #3
 800d2f4:	f000 bd3e 	b.w	800dd74 <_dtoa_r+0xb14>
 800d2f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2300      	movs	r3, #0
 800d300:	4630      	mov	r0, r6
 800d302:	4639      	mov	r1, r7
 800d304:	f7f3 fbe8 	bl	8000ad8 <__aeabi_dcmpeq>
 800d308:	4681      	mov	r9, r0
 800d30a:	b168      	cbz	r0, 800d328 <_dtoa_r+0xc8>
 800d30c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d30e:	2301      	movs	r3, #1
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d314:	2b00      	cmp	r3, #0
 800d316:	f000 8524 	beq.w	800dd62 <_dtoa_r+0xb02>
 800d31a:	4b9a      	ldr	r3, [pc, #616]	; (800d584 <_dtoa_r+0x324>)
 800d31c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d31e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	f000 bd28 	b.w	800dd78 <_dtoa_r+0xb18>
 800d328:	aa14      	add	r2, sp, #80	; 0x50
 800d32a:	a915      	add	r1, sp, #84	; 0x54
 800d32c:	ec47 6b10 	vmov	d0, r6, r7
 800d330:	4620      	mov	r0, r4
 800d332:	f000 ffea 	bl	800e30a <__d2b>
 800d336:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d33a:	9004      	str	r0, [sp, #16]
 800d33c:	2d00      	cmp	r5, #0
 800d33e:	d07c      	beq.n	800d43a <_dtoa_r+0x1da>
 800d340:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d344:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d348:	46b2      	mov	sl, r6
 800d34a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d352:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d356:	2200      	movs	r2, #0
 800d358:	4b8b      	ldr	r3, [pc, #556]	; (800d588 <_dtoa_r+0x328>)
 800d35a:	4650      	mov	r0, sl
 800d35c:	4659      	mov	r1, fp
 800d35e:	f7f2 ff9b 	bl	8000298 <__aeabi_dsub>
 800d362:	a381      	add	r3, pc, #516	; (adr r3, 800d568 <_dtoa_r+0x308>)
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	f7f3 f94e 	bl	8000608 <__aeabi_dmul>
 800d36c:	a380      	add	r3, pc, #512	; (adr r3, 800d570 <_dtoa_r+0x310>)
 800d36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d372:	f7f2 ff93 	bl	800029c <__adddf3>
 800d376:	4606      	mov	r6, r0
 800d378:	4628      	mov	r0, r5
 800d37a:	460f      	mov	r7, r1
 800d37c:	f7f3 f8da 	bl	8000534 <__aeabi_i2d>
 800d380:	a37d      	add	r3, pc, #500	; (adr r3, 800d578 <_dtoa_r+0x318>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f3 f93f 	bl	8000608 <__aeabi_dmul>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4630      	mov	r0, r6
 800d390:	4639      	mov	r1, r7
 800d392:	f7f2 ff83 	bl	800029c <__adddf3>
 800d396:	4606      	mov	r6, r0
 800d398:	460f      	mov	r7, r1
 800d39a:	f7f3 fbe5 	bl	8000b68 <__aeabi_d2iz>
 800d39e:	2200      	movs	r2, #0
 800d3a0:	4682      	mov	sl, r0
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	f7f3 fba0 	bl	8000aec <__aeabi_dcmplt>
 800d3ac:	b148      	cbz	r0, 800d3c2 <_dtoa_r+0x162>
 800d3ae:	4650      	mov	r0, sl
 800d3b0:	f7f3 f8c0 	bl	8000534 <__aeabi_i2d>
 800d3b4:	4632      	mov	r2, r6
 800d3b6:	463b      	mov	r3, r7
 800d3b8:	f7f3 fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3bc:	b908      	cbnz	r0, 800d3c2 <_dtoa_r+0x162>
 800d3be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d3c2:	f1ba 0f16 	cmp.w	sl, #22
 800d3c6:	d859      	bhi.n	800d47c <_dtoa_r+0x21c>
 800d3c8:	4970      	ldr	r1, [pc, #448]	; (800d58c <_dtoa_r+0x32c>)
 800d3ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d3ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3d6:	f7f3 fba7 	bl	8000b28 <__aeabi_dcmpgt>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d050      	beq.n	800d480 <_dtoa_r+0x220>
 800d3de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3e8:	1b5d      	subs	r5, r3, r5
 800d3ea:	f1b5 0801 	subs.w	r8, r5, #1
 800d3ee:	bf49      	itett	mi
 800d3f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800d3f4:	2300      	movpl	r3, #0
 800d3f6:	9305      	strmi	r3, [sp, #20]
 800d3f8:	f04f 0800 	movmi.w	r8, #0
 800d3fc:	bf58      	it	pl
 800d3fe:	9305      	strpl	r3, [sp, #20]
 800d400:	f1ba 0f00 	cmp.w	sl, #0
 800d404:	db3e      	blt.n	800d484 <_dtoa_r+0x224>
 800d406:	2300      	movs	r3, #0
 800d408:	44d0      	add	r8, sl
 800d40a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d40e:	9307      	str	r3, [sp, #28]
 800d410:	9b06      	ldr	r3, [sp, #24]
 800d412:	2b09      	cmp	r3, #9
 800d414:	f200 8090 	bhi.w	800d538 <_dtoa_r+0x2d8>
 800d418:	2b05      	cmp	r3, #5
 800d41a:	bfc4      	itt	gt
 800d41c:	3b04      	subgt	r3, #4
 800d41e:	9306      	strgt	r3, [sp, #24]
 800d420:	9b06      	ldr	r3, [sp, #24]
 800d422:	f1a3 0302 	sub.w	r3, r3, #2
 800d426:	bfcc      	ite	gt
 800d428:	2500      	movgt	r5, #0
 800d42a:	2501      	movle	r5, #1
 800d42c:	2b03      	cmp	r3, #3
 800d42e:	f200 808f 	bhi.w	800d550 <_dtoa_r+0x2f0>
 800d432:	e8df f003 	tbb	[pc, r3]
 800d436:	7f7d      	.short	0x7f7d
 800d438:	7131      	.short	0x7131
 800d43a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d43e:	441d      	add	r5, r3
 800d440:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d444:	2820      	cmp	r0, #32
 800d446:	dd13      	ble.n	800d470 <_dtoa_r+0x210>
 800d448:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d44c:	9b00      	ldr	r3, [sp, #0]
 800d44e:	fa08 f800 	lsl.w	r8, r8, r0
 800d452:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d456:	fa23 f000 	lsr.w	r0, r3, r0
 800d45a:	ea48 0000 	orr.w	r0, r8, r0
 800d45e:	f7f3 f859 	bl	8000514 <__aeabi_ui2d>
 800d462:	2301      	movs	r3, #1
 800d464:	4682      	mov	sl, r0
 800d466:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d46a:	3d01      	subs	r5, #1
 800d46c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d46e:	e772      	b.n	800d356 <_dtoa_r+0xf6>
 800d470:	9b00      	ldr	r3, [sp, #0]
 800d472:	f1c0 0020 	rsb	r0, r0, #32
 800d476:	fa03 f000 	lsl.w	r0, r3, r0
 800d47a:	e7f0      	b.n	800d45e <_dtoa_r+0x1fe>
 800d47c:	2301      	movs	r3, #1
 800d47e:	e7b1      	b.n	800d3e4 <_dtoa_r+0x184>
 800d480:	900f      	str	r0, [sp, #60]	; 0x3c
 800d482:	e7b0      	b.n	800d3e6 <_dtoa_r+0x186>
 800d484:	9b05      	ldr	r3, [sp, #20]
 800d486:	eba3 030a 	sub.w	r3, r3, sl
 800d48a:	9305      	str	r3, [sp, #20]
 800d48c:	f1ca 0300 	rsb	r3, sl, #0
 800d490:	9307      	str	r3, [sp, #28]
 800d492:	2300      	movs	r3, #0
 800d494:	930e      	str	r3, [sp, #56]	; 0x38
 800d496:	e7bb      	b.n	800d410 <_dtoa_r+0x1b0>
 800d498:	2301      	movs	r3, #1
 800d49a:	930a      	str	r3, [sp, #40]	; 0x28
 800d49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	dd59      	ble.n	800d556 <_dtoa_r+0x2f6>
 800d4a2:	9302      	str	r3, [sp, #8]
 800d4a4:	4699      	mov	r9, r3
 800d4a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	6072      	str	r2, [r6, #4]
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	f102 0014 	add.w	r0, r2, #20
 800d4b2:	4298      	cmp	r0, r3
 800d4b4:	6871      	ldr	r1, [r6, #4]
 800d4b6:	d953      	bls.n	800d560 <_dtoa_r+0x300>
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 fc99 	bl	800ddf0 <_Balloc>
 800d4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4c0:	6030      	str	r0, [r6, #0]
 800d4c2:	f1b9 0f0e 	cmp.w	r9, #14
 800d4c6:	f8d3 b000 	ldr.w	fp, [r3]
 800d4ca:	f200 80e6 	bhi.w	800d69a <_dtoa_r+0x43a>
 800d4ce:	2d00      	cmp	r5, #0
 800d4d0:	f000 80e3 	beq.w	800d69a <_dtoa_r+0x43a>
 800d4d4:	ed9d 7b00 	vldr	d7, [sp]
 800d4d8:	f1ba 0f00 	cmp.w	sl, #0
 800d4dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d4e0:	dd74      	ble.n	800d5cc <_dtoa_r+0x36c>
 800d4e2:	4a2a      	ldr	r2, [pc, #168]	; (800d58c <_dtoa_r+0x32c>)
 800d4e4:	f00a 030f 	and.w	r3, sl, #15
 800d4e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4ec:	ed93 7b00 	vldr	d7, [r3]
 800d4f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d4f4:	06f0      	lsls	r0, r6, #27
 800d4f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d4fa:	d565      	bpl.n	800d5c8 <_dtoa_r+0x368>
 800d4fc:	4b24      	ldr	r3, [pc, #144]	; (800d590 <_dtoa_r+0x330>)
 800d4fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d502:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d506:	f7f3 f9a9 	bl	800085c <__aeabi_ddiv>
 800d50a:	e9cd 0100 	strd	r0, r1, [sp]
 800d50e:	f006 060f 	and.w	r6, r6, #15
 800d512:	2503      	movs	r5, #3
 800d514:	4f1e      	ldr	r7, [pc, #120]	; (800d590 <_dtoa_r+0x330>)
 800d516:	e04c      	b.n	800d5b2 <_dtoa_r+0x352>
 800d518:	2301      	movs	r3, #1
 800d51a:	930a      	str	r3, [sp, #40]	; 0x28
 800d51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d51e:	4453      	add	r3, sl
 800d520:	f103 0901 	add.w	r9, r3, #1
 800d524:	9302      	str	r3, [sp, #8]
 800d526:	464b      	mov	r3, r9
 800d528:	2b01      	cmp	r3, #1
 800d52a:	bfb8      	it	lt
 800d52c:	2301      	movlt	r3, #1
 800d52e:	e7ba      	b.n	800d4a6 <_dtoa_r+0x246>
 800d530:	2300      	movs	r3, #0
 800d532:	e7b2      	b.n	800d49a <_dtoa_r+0x23a>
 800d534:	2300      	movs	r3, #0
 800d536:	e7f0      	b.n	800d51a <_dtoa_r+0x2ba>
 800d538:	2501      	movs	r5, #1
 800d53a:	2300      	movs	r3, #0
 800d53c:	9306      	str	r3, [sp, #24]
 800d53e:	950a      	str	r5, [sp, #40]	; 0x28
 800d540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d544:	9302      	str	r3, [sp, #8]
 800d546:	4699      	mov	r9, r3
 800d548:	2200      	movs	r2, #0
 800d54a:	2312      	movs	r3, #18
 800d54c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d54e:	e7aa      	b.n	800d4a6 <_dtoa_r+0x246>
 800d550:	2301      	movs	r3, #1
 800d552:	930a      	str	r3, [sp, #40]	; 0x28
 800d554:	e7f4      	b.n	800d540 <_dtoa_r+0x2e0>
 800d556:	2301      	movs	r3, #1
 800d558:	9302      	str	r3, [sp, #8]
 800d55a:	4699      	mov	r9, r3
 800d55c:	461a      	mov	r2, r3
 800d55e:	e7f5      	b.n	800d54c <_dtoa_r+0x2ec>
 800d560:	3101      	adds	r1, #1
 800d562:	6071      	str	r1, [r6, #4]
 800d564:	0052      	lsls	r2, r2, #1
 800d566:	e7a2      	b.n	800d4ae <_dtoa_r+0x24e>
 800d568:	636f4361 	.word	0x636f4361
 800d56c:	3fd287a7 	.word	0x3fd287a7
 800d570:	8b60c8b3 	.word	0x8b60c8b3
 800d574:	3fc68a28 	.word	0x3fc68a28
 800d578:	509f79fb 	.word	0x509f79fb
 800d57c:	3fd34413 	.word	0x3fd34413
 800d580:	7ff00000 	.word	0x7ff00000
 800d584:	0800e885 	.word	0x0800e885
 800d588:	3ff80000 	.word	0x3ff80000
 800d58c:	0800e8e0 	.word	0x0800e8e0
 800d590:	0800e8b8 	.word	0x0800e8b8
 800d594:	0800e8b1 	.word	0x0800e8b1
 800d598:	07f1      	lsls	r1, r6, #31
 800d59a:	d508      	bpl.n	800d5ae <_dtoa_r+0x34e>
 800d59c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5a4:	f7f3 f830 	bl	8000608 <__aeabi_dmul>
 800d5a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d5ac:	3501      	adds	r5, #1
 800d5ae:	1076      	asrs	r6, r6, #1
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	2e00      	cmp	r6, #0
 800d5b4:	d1f0      	bne.n	800d598 <_dtoa_r+0x338>
 800d5b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d5ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5be:	f7f3 f94d 	bl	800085c <__aeabi_ddiv>
 800d5c2:	e9cd 0100 	strd	r0, r1, [sp]
 800d5c6:	e01a      	b.n	800d5fe <_dtoa_r+0x39e>
 800d5c8:	2502      	movs	r5, #2
 800d5ca:	e7a3      	b.n	800d514 <_dtoa_r+0x2b4>
 800d5cc:	f000 80a0 	beq.w	800d710 <_dtoa_r+0x4b0>
 800d5d0:	f1ca 0600 	rsb	r6, sl, #0
 800d5d4:	4b9f      	ldr	r3, [pc, #636]	; (800d854 <_dtoa_r+0x5f4>)
 800d5d6:	4fa0      	ldr	r7, [pc, #640]	; (800d858 <_dtoa_r+0x5f8>)
 800d5d8:	f006 020f 	and.w	r2, r6, #15
 800d5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d5e8:	f7f3 f80e 	bl	8000608 <__aeabi_dmul>
 800d5ec:	e9cd 0100 	strd	r0, r1, [sp]
 800d5f0:	1136      	asrs	r6, r6, #4
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	2502      	movs	r5, #2
 800d5f6:	2e00      	cmp	r6, #0
 800d5f8:	d17f      	bne.n	800d6fa <_dtoa_r+0x49a>
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1e1      	bne.n	800d5c2 <_dtoa_r+0x362>
 800d5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d600:	2b00      	cmp	r3, #0
 800d602:	f000 8087 	beq.w	800d714 <_dtoa_r+0x4b4>
 800d606:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d60a:	2200      	movs	r2, #0
 800d60c:	4b93      	ldr	r3, [pc, #588]	; (800d85c <_dtoa_r+0x5fc>)
 800d60e:	4630      	mov	r0, r6
 800d610:	4639      	mov	r1, r7
 800d612:	f7f3 fa6b 	bl	8000aec <__aeabi_dcmplt>
 800d616:	2800      	cmp	r0, #0
 800d618:	d07c      	beq.n	800d714 <_dtoa_r+0x4b4>
 800d61a:	f1b9 0f00 	cmp.w	r9, #0
 800d61e:	d079      	beq.n	800d714 <_dtoa_r+0x4b4>
 800d620:	9b02      	ldr	r3, [sp, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	dd35      	ble.n	800d692 <_dtoa_r+0x432>
 800d626:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d62a:	9308      	str	r3, [sp, #32]
 800d62c:	4639      	mov	r1, r7
 800d62e:	2200      	movs	r2, #0
 800d630:	4b8b      	ldr	r3, [pc, #556]	; (800d860 <_dtoa_r+0x600>)
 800d632:	4630      	mov	r0, r6
 800d634:	f7f2 ffe8 	bl	8000608 <__aeabi_dmul>
 800d638:	e9cd 0100 	strd	r0, r1, [sp]
 800d63c:	9f02      	ldr	r7, [sp, #8]
 800d63e:	3501      	adds	r5, #1
 800d640:	4628      	mov	r0, r5
 800d642:	f7f2 ff77 	bl	8000534 <__aeabi_i2d>
 800d646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d64a:	f7f2 ffdd 	bl	8000608 <__aeabi_dmul>
 800d64e:	2200      	movs	r2, #0
 800d650:	4b84      	ldr	r3, [pc, #528]	; (800d864 <_dtoa_r+0x604>)
 800d652:	f7f2 fe23 	bl	800029c <__adddf3>
 800d656:	4605      	mov	r5, r0
 800d658:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d65c:	2f00      	cmp	r7, #0
 800d65e:	d15d      	bne.n	800d71c <_dtoa_r+0x4bc>
 800d660:	2200      	movs	r2, #0
 800d662:	4b81      	ldr	r3, [pc, #516]	; (800d868 <_dtoa_r+0x608>)
 800d664:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d668:	f7f2 fe16 	bl	8000298 <__aeabi_dsub>
 800d66c:	462a      	mov	r2, r5
 800d66e:	4633      	mov	r3, r6
 800d670:	e9cd 0100 	strd	r0, r1, [sp]
 800d674:	f7f3 fa58 	bl	8000b28 <__aeabi_dcmpgt>
 800d678:	2800      	cmp	r0, #0
 800d67a:	f040 8288 	bne.w	800db8e <_dtoa_r+0x92e>
 800d67e:	462a      	mov	r2, r5
 800d680:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d688:	f7f3 fa30 	bl	8000aec <__aeabi_dcmplt>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	f040 827c 	bne.w	800db8a <_dtoa_r+0x92a>
 800d692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d696:	e9cd 2300 	strd	r2, r3, [sp]
 800d69a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f2c0 8150 	blt.w	800d942 <_dtoa_r+0x6e2>
 800d6a2:	f1ba 0f0e 	cmp.w	sl, #14
 800d6a6:	f300 814c 	bgt.w	800d942 <_dtoa_r+0x6e2>
 800d6aa:	4b6a      	ldr	r3, [pc, #424]	; (800d854 <_dtoa_r+0x5f4>)
 800d6ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d6b0:	ed93 7b00 	vldr	d7, [r3]
 800d6b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6bc:	f280 80d8 	bge.w	800d870 <_dtoa_r+0x610>
 800d6c0:	f1b9 0f00 	cmp.w	r9, #0
 800d6c4:	f300 80d4 	bgt.w	800d870 <_dtoa_r+0x610>
 800d6c8:	f040 825e 	bne.w	800db88 <_dtoa_r+0x928>
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	4b66      	ldr	r3, [pc, #408]	; (800d868 <_dtoa_r+0x608>)
 800d6d0:	ec51 0b17 	vmov	r0, r1, d7
 800d6d4:	f7f2 ff98 	bl	8000608 <__aeabi_dmul>
 800d6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6dc:	f7f3 fa1a 	bl	8000b14 <__aeabi_dcmpge>
 800d6e0:	464f      	mov	r7, r9
 800d6e2:	464e      	mov	r6, r9
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	f040 8234 	bne.w	800db52 <_dtoa_r+0x8f2>
 800d6ea:	2331      	movs	r3, #49	; 0x31
 800d6ec:	f10b 0501 	add.w	r5, fp, #1
 800d6f0:	f88b 3000 	strb.w	r3, [fp]
 800d6f4:	f10a 0a01 	add.w	sl, sl, #1
 800d6f8:	e22f      	b.n	800db5a <_dtoa_r+0x8fa>
 800d6fa:	07f2      	lsls	r2, r6, #31
 800d6fc:	d505      	bpl.n	800d70a <_dtoa_r+0x4aa>
 800d6fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d702:	f7f2 ff81 	bl	8000608 <__aeabi_dmul>
 800d706:	3501      	adds	r5, #1
 800d708:	2301      	movs	r3, #1
 800d70a:	1076      	asrs	r6, r6, #1
 800d70c:	3708      	adds	r7, #8
 800d70e:	e772      	b.n	800d5f6 <_dtoa_r+0x396>
 800d710:	2502      	movs	r5, #2
 800d712:	e774      	b.n	800d5fe <_dtoa_r+0x39e>
 800d714:	f8cd a020 	str.w	sl, [sp, #32]
 800d718:	464f      	mov	r7, r9
 800d71a:	e791      	b.n	800d640 <_dtoa_r+0x3e0>
 800d71c:	4b4d      	ldr	r3, [pc, #308]	; (800d854 <_dtoa_r+0x5f4>)
 800d71e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d722:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d047      	beq.n	800d7bc <_dtoa_r+0x55c>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	2000      	movs	r0, #0
 800d732:	494e      	ldr	r1, [pc, #312]	; (800d86c <_dtoa_r+0x60c>)
 800d734:	f7f3 f892 	bl	800085c <__aeabi_ddiv>
 800d738:	462a      	mov	r2, r5
 800d73a:	4633      	mov	r3, r6
 800d73c:	f7f2 fdac 	bl	8000298 <__aeabi_dsub>
 800d740:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d744:	465d      	mov	r5, fp
 800d746:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d74a:	f7f3 fa0d 	bl	8000b68 <__aeabi_d2iz>
 800d74e:	4606      	mov	r6, r0
 800d750:	f7f2 fef0 	bl	8000534 <__aeabi_i2d>
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d75c:	f7f2 fd9c 	bl	8000298 <__aeabi_dsub>
 800d760:	3630      	adds	r6, #48	; 0x30
 800d762:	f805 6b01 	strb.w	r6, [r5], #1
 800d766:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d76a:	e9cd 0100 	strd	r0, r1, [sp]
 800d76e:	f7f3 f9bd 	bl	8000aec <__aeabi_dcmplt>
 800d772:	2800      	cmp	r0, #0
 800d774:	d163      	bne.n	800d83e <_dtoa_r+0x5de>
 800d776:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d77a:	2000      	movs	r0, #0
 800d77c:	4937      	ldr	r1, [pc, #220]	; (800d85c <_dtoa_r+0x5fc>)
 800d77e:	f7f2 fd8b 	bl	8000298 <__aeabi_dsub>
 800d782:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d786:	f7f3 f9b1 	bl	8000aec <__aeabi_dcmplt>
 800d78a:	2800      	cmp	r0, #0
 800d78c:	f040 80b7 	bne.w	800d8fe <_dtoa_r+0x69e>
 800d790:	eba5 030b 	sub.w	r3, r5, fp
 800d794:	429f      	cmp	r7, r3
 800d796:	f77f af7c 	ble.w	800d692 <_dtoa_r+0x432>
 800d79a:	2200      	movs	r2, #0
 800d79c:	4b30      	ldr	r3, [pc, #192]	; (800d860 <_dtoa_r+0x600>)
 800d79e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d7a2:	f7f2 ff31 	bl	8000608 <__aeabi_dmul>
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d7ac:	4b2c      	ldr	r3, [pc, #176]	; (800d860 <_dtoa_r+0x600>)
 800d7ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7b2:	f7f2 ff29 	bl	8000608 <__aeabi_dmul>
 800d7b6:	e9cd 0100 	strd	r0, r1, [sp]
 800d7ba:	e7c4      	b.n	800d746 <_dtoa_r+0x4e6>
 800d7bc:	462a      	mov	r2, r5
 800d7be:	4633      	mov	r3, r6
 800d7c0:	f7f2 ff22 	bl	8000608 <__aeabi_dmul>
 800d7c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d7c8:	eb0b 0507 	add.w	r5, fp, r7
 800d7cc:	465e      	mov	r6, fp
 800d7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7d2:	f7f3 f9c9 	bl	8000b68 <__aeabi_d2iz>
 800d7d6:	4607      	mov	r7, r0
 800d7d8:	f7f2 feac 	bl	8000534 <__aeabi_i2d>
 800d7dc:	3730      	adds	r7, #48	; 0x30
 800d7de:	4602      	mov	r2, r0
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7e6:	f7f2 fd57 	bl	8000298 <__aeabi_dsub>
 800d7ea:	f806 7b01 	strb.w	r7, [r6], #1
 800d7ee:	42ae      	cmp	r6, r5
 800d7f0:	e9cd 0100 	strd	r0, r1, [sp]
 800d7f4:	f04f 0200 	mov.w	r2, #0
 800d7f8:	d126      	bne.n	800d848 <_dtoa_r+0x5e8>
 800d7fa:	4b1c      	ldr	r3, [pc, #112]	; (800d86c <_dtoa_r+0x60c>)
 800d7fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d800:	f7f2 fd4c 	bl	800029c <__adddf3>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d80c:	f7f3 f98c 	bl	8000b28 <__aeabi_dcmpgt>
 800d810:	2800      	cmp	r0, #0
 800d812:	d174      	bne.n	800d8fe <_dtoa_r+0x69e>
 800d814:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d818:	2000      	movs	r0, #0
 800d81a:	4914      	ldr	r1, [pc, #80]	; (800d86c <_dtoa_r+0x60c>)
 800d81c:	f7f2 fd3c 	bl	8000298 <__aeabi_dsub>
 800d820:	4602      	mov	r2, r0
 800d822:	460b      	mov	r3, r1
 800d824:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d828:	f7f3 f960 	bl	8000aec <__aeabi_dcmplt>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	f43f af30 	beq.w	800d692 <_dtoa_r+0x432>
 800d832:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d836:	2b30      	cmp	r3, #48	; 0x30
 800d838:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d83c:	d002      	beq.n	800d844 <_dtoa_r+0x5e4>
 800d83e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d842:	e04a      	b.n	800d8da <_dtoa_r+0x67a>
 800d844:	4615      	mov	r5, r2
 800d846:	e7f4      	b.n	800d832 <_dtoa_r+0x5d2>
 800d848:	4b05      	ldr	r3, [pc, #20]	; (800d860 <_dtoa_r+0x600>)
 800d84a:	f7f2 fedd 	bl	8000608 <__aeabi_dmul>
 800d84e:	e9cd 0100 	strd	r0, r1, [sp]
 800d852:	e7bc      	b.n	800d7ce <_dtoa_r+0x56e>
 800d854:	0800e8e0 	.word	0x0800e8e0
 800d858:	0800e8b8 	.word	0x0800e8b8
 800d85c:	3ff00000 	.word	0x3ff00000
 800d860:	40240000 	.word	0x40240000
 800d864:	401c0000 	.word	0x401c0000
 800d868:	40140000 	.word	0x40140000
 800d86c:	3fe00000 	.word	0x3fe00000
 800d870:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d874:	465d      	mov	r5, fp
 800d876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d87a:	4630      	mov	r0, r6
 800d87c:	4639      	mov	r1, r7
 800d87e:	f7f2 ffed 	bl	800085c <__aeabi_ddiv>
 800d882:	f7f3 f971 	bl	8000b68 <__aeabi_d2iz>
 800d886:	4680      	mov	r8, r0
 800d888:	f7f2 fe54 	bl	8000534 <__aeabi_i2d>
 800d88c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d890:	f7f2 feba 	bl	8000608 <__aeabi_dmul>
 800d894:	4602      	mov	r2, r0
 800d896:	460b      	mov	r3, r1
 800d898:	4630      	mov	r0, r6
 800d89a:	4639      	mov	r1, r7
 800d89c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d8a0:	f7f2 fcfa 	bl	8000298 <__aeabi_dsub>
 800d8a4:	f805 6b01 	strb.w	r6, [r5], #1
 800d8a8:	eba5 060b 	sub.w	r6, r5, fp
 800d8ac:	45b1      	cmp	r9, r6
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	d139      	bne.n	800d928 <_dtoa_r+0x6c8>
 800d8b4:	f7f2 fcf2 	bl	800029c <__adddf3>
 800d8b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8bc:	4606      	mov	r6, r0
 800d8be:	460f      	mov	r7, r1
 800d8c0:	f7f3 f932 	bl	8000b28 <__aeabi_dcmpgt>
 800d8c4:	b9c8      	cbnz	r0, 800d8fa <_dtoa_r+0x69a>
 800d8c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f3 f903 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8d2:	b110      	cbz	r0, 800d8da <_dtoa_r+0x67a>
 800d8d4:	f018 0f01 	tst.w	r8, #1
 800d8d8:	d10f      	bne.n	800d8fa <_dtoa_r+0x69a>
 800d8da:	9904      	ldr	r1, [sp, #16]
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f000 fabb 	bl	800de58 <_Bfree>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d8e6:	702b      	strb	r3, [r5, #0]
 800d8e8:	f10a 0301 	add.w	r3, sl, #1
 800d8ec:	6013      	str	r3, [r2, #0]
 800d8ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f000 8241 	beq.w	800dd78 <_dtoa_r+0xb18>
 800d8f6:	601d      	str	r5, [r3, #0]
 800d8f8:	e23e      	b.n	800dd78 <_dtoa_r+0xb18>
 800d8fa:	f8cd a020 	str.w	sl, [sp, #32]
 800d8fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d902:	2a39      	cmp	r2, #57	; 0x39
 800d904:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d908:	d108      	bne.n	800d91c <_dtoa_r+0x6bc>
 800d90a:	459b      	cmp	fp, r3
 800d90c:	d10a      	bne.n	800d924 <_dtoa_r+0x6c4>
 800d90e:	9b08      	ldr	r3, [sp, #32]
 800d910:	3301      	adds	r3, #1
 800d912:	9308      	str	r3, [sp, #32]
 800d914:	2330      	movs	r3, #48	; 0x30
 800d916:	f88b 3000 	strb.w	r3, [fp]
 800d91a:	465b      	mov	r3, fp
 800d91c:	781a      	ldrb	r2, [r3, #0]
 800d91e:	3201      	adds	r2, #1
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	e78c      	b.n	800d83e <_dtoa_r+0x5de>
 800d924:	461d      	mov	r5, r3
 800d926:	e7ea      	b.n	800d8fe <_dtoa_r+0x69e>
 800d928:	2200      	movs	r2, #0
 800d92a:	4b9b      	ldr	r3, [pc, #620]	; (800db98 <_dtoa_r+0x938>)
 800d92c:	f7f2 fe6c 	bl	8000608 <__aeabi_dmul>
 800d930:	2200      	movs	r2, #0
 800d932:	2300      	movs	r3, #0
 800d934:	4606      	mov	r6, r0
 800d936:	460f      	mov	r7, r1
 800d938:	f7f3 f8ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d09a      	beq.n	800d876 <_dtoa_r+0x616>
 800d940:	e7cb      	b.n	800d8da <_dtoa_r+0x67a>
 800d942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d944:	2a00      	cmp	r2, #0
 800d946:	f000 808b 	beq.w	800da60 <_dtoa_r+0x800>
 800d94a:	9a06      	ldr	r2, [sp, #24]
 800d94c:	2a01      	cmp	r2, #1
 800d94e:	dc6e      	bgt.n	800da2e <_dtoa_r+0x7ce>
 800d950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d952:	2a00      	cmp	r2, #0
 800d954:	d067      	beq.n	800da26 <_dtoa_r+0x7c6>
 800d956:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d95a:	9f07      	ldr	r7, [sp, #28]
 800d95c:	9d05      	ldr	r5, [sp, #20]
 800d95e:	9a05      	ldr	r2, [sp, #20]
 800d960:	2101      	movs	r1, #1
 800d962:	441a      	add	r2, r3
 800d964:	4620      	mov	r0, r4
 800d966:	9205      	str	r2, [sp, #20]
 800d968:	4498      	add	r8, r3
 800d96a:	f000 fb15 	bl	800df98 <__i2b>
 800d96e:	4606      	mov	r6, r0
 800d970:	2d00      	cmp	r5, #0
 800d972:	dd0c      	ble.n	800d98e <_dtoa_r+0x72e>
 800d974:	f1b8 0f00 	cmp.w	r8, #0
 800d978:	dd09      	ble.n	800d98e <_dtoa_r+0x72e>
 800d97a:	4545      	cmp	r5, r8
 800d97c:	9a05      	ldr	r2, [sp, #20]
 800d97e:	462b      	mov	r3, r5
 800d980:	bfa8      	it	ge
 800d982:	4643      	movge	r3, r8
 800d984:	1ad2      	subs	r2, r2, r3
 800d986:	9205      	str	r2, [sp, #20]
 800d988:	1aed      	subs	r5, r5, r3
 800d98a:	eba8 0803 	sub.w	r8, r8, r3
 800d98e:	9b07      	ldr	r3, [sp, #28]
 800d990:	b1eb      	cbz	r3, 800d9ce <_dtoa_r+0x76e>
 800d992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d994:	2b00      	cmp	r3, #0
 800d996:	d067      	beq.n	800da68 <_dtoa_r+0x808>
 800d998:	b18f      	cbz	r7, 800d9be <_dtoa_r+0x75e>
 800d99a:	4631      	mov	r1, r6
 800d99c:	463a      	mov	r2, r7
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 fb9a 	bl	800e0d8 <__pow5mult>
 800d9a4:	9a04      	ldr	r2, [sp, #16]
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f000 fafd 	bl	800dfaa <__multiply>
 800d9b0:	9904      	ldr	r1, [sp, #16]
 800d9b2:	9008      	str	r0, [sp, #32]
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f000 fa4f 	bl	800de58 <_Bfree>
 800d9ba:	9b08      	ldr	r3, [sp, #32]
 800d9bc:	9304      	str	r3, [sp, #16]
 800d9be:	9b07      	ldr	r3, [sp, #28]
 800d9c0:	1bda      	subs	r2, r3, r7
 800d9c2:	d004      	beq.n	800d9ce <_dtoa_r+0x76e>
 800d9c4:	9904      	ldr	r1, [sp, #16]
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f000 fb86 	bl	800e0d8 <__pow5mult>
 800d9cc:	9004      	str	r0, [sp, #16]
 800d9ce:	2101      	movs	r1, #1
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f000 fae1 	bl	800df98 <__i2b>
 800d9d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9d8:	4607      	mov	r7, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f000 81d0 	beq.w	800dd80 <_dtoa_r+0xb20>
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4601      	mov	r1, r0
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fb77 	bl	800e0d8 <__pow5mult>
 800d9ea:	9b06      	ldr	r3, [sp, #24]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	4607      	mov	r7, r0
 800d9f0:	dc40      	bgt.n	800da74 <_dtoa_r+0x814>
 800d9f2:	9b00      	ldr	r3, [sp, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d139      	bne.n	800da6c <_dtoa_r+0x80c>
 800d9f8:	9b01      	ldr	r3, [sp, #4]
 800d9fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d136      	bne.n	800da70 <_dtoa_r+0x810>
 800da02:	9b01      	ldr	r3, [sp, #4]
 800da04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da08:	0d1b      	lsrs	r3, r3, #20
 800da0a:	051b      	lsls	r3, r3, #20
 800da0c:	b12b      	cbz	r3, 800da1a <_dtoa_r+0x7ba>
 800da0e:	9b05      	ldr	r3, [sp, #20]
 800da10:	3301      	adds	r3, #1
 800da12:	9305      	str	r3, [sp, #20]
 800da14:	f108 0801 	add.w	r8, r8, #1
 800da18:	2301      	movs	r3, #1
 800da1a:	9307      	str	r3, [sp, #28]
 800da1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d12a      	bne.n	800da78 <_dtoa_r+0x818>
 800da22:	2001      	movs	r0, #1
 800da24:	e030      	b.n	800da88 <_dtoa_r+0x828>
 800da26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da2c:	e795      	b.n	800d95a <_dtoa_r+0x6fa>
 800da2e:	9b07      	ldr	r3, [sp, #28]
 800da30:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800da34:	42bb      	cmp	r3, r7
 800da36:	bfbf      	itttt	lt
 800da38:	9b07      	ldrlt	r3, [sp, #28]
 800da3a:	9707      	strlt	r7, [sp, #28]
 800da3c:	1afa      	sublt	r2, r7, r3
 800da3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800da40:	bfbb      	ittet	lt
 800da42:	189b      	addlt	r3, r3, r2
 800da44:	930e      	strlt	r3, [sp, #56]	; 0x38
 800da46:	1bdf      	subge	r7, r3, r7
 800da48:	2700      	movlt	r7, #0
 800da4a:	f1b9 0f00 	cmp.w	r9, #0
 800da4e:	bfb5      	itete	lt
 800da50:	9b05      	ldrlt	r3, [sp, #20]
 800da52:	9d05      	ldrge	r5, [sp, #20]
 800da54:	eba3 0509 	sublt.w	r5, r3, r9
 800da58:	464b      	movge	r3, r9
 800da5a:	bfb8      	it	lt
 800da5c:	2300      	movlt	r3, #0
 800da5e:	e77e      	b.n	800d95e <_dtoa_r+0x6fe>
 800da60:	9f07      	ldr	r7, [sp, #28]
 800da62:	9d05      	ldr	r5, [sp, #20]
 800da64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800da66:	e783      	b.n	800d970 <_dtoa_r+0x710>
 800da68:	9a07      	ldr	r2, [sp, #28]
 800da6a:	e7ab      	b.n	800d9c4 <_dtoa_r+0x764>
 800da6c:	2300      	movs	r3, #0
 800da6e:	e7d4      	b.n	800da1a <_dtoa_r+0x7ba>
 800da70:	9b00      	ldr	r3, [sp, #0]
 800da72:	e7d2      	b.n	800da1a <_dtoa_r+0x7ba>
 800da74:	2300      	movs	r3, #0
 800da76:	9307      	str	r3, [sp, #28]
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800da7e:	6918      	ldr	r0, [r3, #16]
 800da80:	f000 fa3c 	bl	800defc <__hi0bits>
 800da84:	f1c0 0020 	rsb	r0, r0, #32
 800da88:	4440      	add	r0, r8
 800da8a:	f010 001f 	ands.w	r0, r0, #31
 800da8e:	d047      	beq.n	800db20 <_dtoa_r+0x8c0>
 800da90:	f1c0 0320 	rsb	r3, r0, #32
 800da94:	2b04      	cmp	r3, #4
 800da96:	dd3b      	ble.n	800db10 <_dtoa_r+0x8b0>
 800da98:	9b05      	ldr	r3, [sp, #20]
 800da9a:	f1c0 001c 	rsb	r0, r0, #28
 800da9e:	4403      	add	r3, r0
 800daa0:	9305      	str	r3, [sp, #20]
 800daa2:	4405      	add	r5, r0
 800daa4:	4480      	add	r8, r0
 800daa6:	9b05      	ldr	r3, [sp, #20]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	dd05      	ble.n	800dab8 <_dtoa_r+0x858>
 800daac:	461a      	mov	r2, r3
 800daae:	9904      	ldr	r1, [sp, #16]
 800dab0:	4620      	mov	r0, r4
 800dab2:	f000 fb5f 	bl	800e174 <__lshift>
 800dab6:	9004      	str	r0, [sp, #16]
 800dab8:	f1b8 0f00 	cmp.w	r8, #0
 800dabc:	dd05      	ble.n	800daca <_dtoa_r+0x86a>
 800dabe:	4639      	mov	r1, r7
 800dac0:	4642      	mov	r2, r8
 800dac2:	4620      	mov	r0, r4
 800dac4:	f000 fb56 	bl	800e174 <__lshift>
 800dac8:	4607      	mov	r7, r0
 800daca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dacc:	b353      	cbz	r3, 800db24 <_dtoa_r+0x8c4>
 800dace:	4639      	mov	r1, r7
 800dad0:	9804      	ldr	r0, [sp, #16]
 800dad2:	f000 fba3 	bl	800e21c <__mcmp>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	da24      	bge.n	800db24 <_dtoa_r+0x8c4>
 800dada:	2300      	movs	r3, #0
 800dadc:	220a      	movs	r2, #10
 800dade:	9904      	ldr	r1, [sp, #16]
 800dae0:	4620      	mov	r0, r4
 800dae2:	f000 f9d0 	bl	800de86 <__multadd>
 800dae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae8:	9004      	str	r0, [sp, #16]
 800daea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f000 814d 	beq.w	800dd8e <_dtoa_r+0xb2e>
 800daf4:	2300      	movs	r3, #0
 800daf6:	4631      	mov	r1, r6
 800daf8:	220a      	movs	r2, #10
 800dafa:	4620      	mov	r0, r4
 800dafc:	f000 f9c3 	bl	800de86 <__multadd>
 800db00:	9b02      	ldr	r3, [sp, #8]
 800db02:	2b00      	cmp	r3, #0
 800db04:	4606      	mov	r6, r0
 800db06:	dc4f      	bgt.n	800dba8 <_dtoa_r+0x948>
 800db08:	9b06      	ldr	r3, [sp, #24]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	dd4c      	ble.n	800dba8 <_dtoa_r+0x948>
 800db0e:	e011      	b.n	800db34 <_dtoa_r+0x8d4>
 800db10:	d0c9      	beq.n	800daa6 <_dtoa_r+0x846>
 800db12:	9a05      	ldr	r2, [sp, #20]
 800db14:	331c      	adds	r3, #28
 800db16:	441a      	add	r2, r3
 800db18:	9205      	str	r2, [sp, #20]
 800db1a:	441d      	add	r5, r3
 800db1c:	4498      	add	r8, r3
 800db1e:	e7c2      	b.n	800daa6 <_dtoa_r+0x846>
 800db20:	4603      	mov	r3, r0
 800db22:	e7f6      	b.n	800db12 <_dtoa_r+0x8b2>
 800db24:	f1b9 0f00 	cmp.w	r9, #0
 800db28:	dc38      	bgt.n	800db9c <_dtoa_r+0x93c>
 800db2a:	9b06      	ldr	r3, [sp, #24]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	dd35      	ble.n	800db9c <_dtoa_r+0x93c>
 800db30:	f8cd 9008 	str.w	r9, [sp, #8]
 800db34:	9b02      	ldr	r3, [sp, #8]
 800db36:	b963      	cbnz	r3, 800db52 <_dtoa_r+0x8f2>
 800db38:	4639      	mov	r1, r7
 800db3a:	2205      	movs	r2, #5
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 f9a2 	bl	800de86 <__multadd>
 800db42:	4601      	mov	r1, r0
 800db44:	4607      	mov	r7, r0
 800db46:	9804      	ldr	r0, [sp, #16]
 800db48:	f000 fb68 	bl	800e21c <__mcmp>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f73f adcc 	bgt.w	800d6ea <_dtoa_r+0x48a>
 800db52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db54:	465d      	mov	r5, fp
 800db56:	ea6f 0a03 	mvn.w	sl, r3
 800db5a:	f04f 0900 	mov.w	r9, #0
 800db5e:	4639      	mov	r1, r7
 800db60:	4620      	mov	r0, r4
 800db62:	f000 f979 	bl	800de58 <_Bfree>
 800db66:	2e00      	cmp	r6, #0
 800db68:	f43f aeb7 	beq.w	800d8da <_dtoa_r+0x67a>
 800db6c:	f1b9 0f00 	cmp.w	r9, #0
 800db70:	d005      	beq.n	800db7e <_dtoa_r+0x91e>
 800db72:	45b1      	cmp	r9, r6
 800db74:	d003      	beq.n	800db7e <_dtoa_r+0x91e>
 800db76:	4649      	mov	r1, r9
 800db78:	4620      	mov	r0, r4
 800db7a:	f000 f96d 	bl	800de58 <_Bfree>
 800db7e:	4631      	mov	r1, r6
 800db80:	4620      	mov	r0, r4
 800db82:	f000 f969 	bl	800de58 <_Bfree>
 800db86:	e6a8      	b.n	800d8da <_dtoa_r+0x67a>
 800db88:	2700      	movs	r7, #0
 800db8a:	463e      	mov	r6, r7
 800db8c:	e7e1      	b.n	800db52 <_dtoa_r+0x8f2>
 800db8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800db92:	463e      	mov	r6, r7
 800db94:	e5a9      	b.n	800d6ea <_dtoa_r+0x48a>
 800db96:	bf00      	nop
 800db98:	40240000 	.word	0x40240000
 800db9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f000 80fa 	beq.w	800dd9c <_dtoa_r+0xb3c>
 800dba8:	2d00      	cmp	r5, #0
 800dbaa:	dd05      	ble.n	800dbb8 <_dtoa_r+0x958>
 800dbac:	4631      	mov	r1, r6
 800dbae:	462a      	mov	r2, r5
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f000 fadf 	bl	800e174 <__lshift>
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	9b07      	ldr	r3, [sp, #28]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d04c      	beq.n	800dc58 <_dtoa_r+0x9f8>
 800dbbe:	6871      	ldr	r1, [r6, #4]
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f000 f915 	bl	800ddf0 <_Balloc>
 800dbc6:	6932      	ldr	r2, [r6, #16]
 800dbc8:	3202      	adds	r2, #2
 800dbca:	4605      	mov	r5, r0
 800dbcc:	0092      	lsls	r2, r2, #2
 800dbce:	f106 010c 	add.w	r1, r6, #12
 800dbd2:	300c      	adds	r0, #12
 800dbd4:	f7fe fd70 	bl	800c6b8 <memcpy>
 800dbd8:	2201      	movs	r2, #1
 800dbda:	4629      	mov	r1, r5
 800dbdc:	4620      	mov	r0, r4
 800dbde:	f000 fac9 	bl	800e174 <__lshift>
 800dbe2:	9b00      	ldr	r3, [sp, #0]
 800dbe4:	f8cd b014 	str.w	fp, [sp, #20]
 800dbe8:	f003 0301 	and.w	r3, r3, #1
 800dbec:	46b1      	mov	r9, r6
 800dbee:	9307      	str	r3, [sp, #28]
 800dbf0:	4606      	mov	r6, r0
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	9804      	ldr	r0, [sp, #16]
 800dbf6:	f7ff faa7 	bl	800d148 <quorem>
 800dbfa:	4649      	mov	r1, r9
 800dbfc:	4605      	mov	r5, r0
 800dbfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dc02:	9804      	ldr	r0, [sp, #16]
 800dc04:	f000 fb0a 	bl	800e21c <__mcmp>
 800dc08:	4632      	mov	r2, r6
 800dc0a:	9000      	str	r0, [sp, #0]
 800dc0c:	4639      	mov	r1, r7
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f000 fb1e 	bl	800e250 <__mdiff>
 800dc14:	68c3      	ldr	r3, [r0, #12]
 800dc16:	4602      	mov	r2, r0
 800dc18:	bb03      	cbnz	r3, 800dc5c <_dtoa_r+0x9fc>
 800dc1a:	4601      	mov	r1, r0
 800dc1c:	9008      	str	r0, [sp, #32]
 800dc1e:	9804      	ldr	r0, [sp, #16]
 800dc20:	f000 fafc 	bl	800e21c <__mcmp>
 800dc24:	9a08      	ldr	r2, [sp, #32]
 800dc26:	4603      	mov	r3, r0
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	9308      	str	r3, [sp, #32]
 800dc2e:	f000 f913 	bl	800de58 <_Bfree>
 800dc32:	9b08      	ldr	r3, [sp, #32]
 800dc34:	b9a3      	cbnz	r3, 800dc60 <_dtoa_r+0xa00>
 800dc36:	9a06      	ldr	r2, [sp, #24]
 800dc38:	b992      	cbnz	r2, 800dc60 <_dtoa_r+0xa00>
 800dc3a:	9a07      	ldr	r2, [sp, #28]
 800dc3c:	b982      	cbnz	r2, 800dc60 <_dtoa_r+0xa00>
 800dc3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc42:	d029      	beq.n	800dc98 <_dtoa_r+0xa38>
 800dc44:	9b00      	ldr	r3, [sp, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dd01      	ble.n	800dc4e <_dtoa_r+0x9ee>
 800dc4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800dc4e:	9b05      	ldr	r3, [sp, #20]
 800dc50:	1c5d      	adds	r5, r3, #1
 800dc52:	f883 8000 	strb.w	r8, [r3]
 800dc56:	e782      	b.n	800db5e <_dtoa_r+0x8fe>
 800dc58:	4630      	mov	r0, r6
 800dc5a:	e7c2      	b.n	800dbe2 <_dtoa_r+0x982>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e7e3      	b.n	800dc28 <_dtoa_r+0x9c8>
 800dc60:	9a00      	ldr	r2, [sp, #0]
 800dc62:	2a00      	cmp	r2, #0
 800dc64:	db04      	blt.n	800dc70 <_dtoa_r+0xa10>
 800dc66:	d125      	bne.n	800dcb4 <_dtoa_r+0xa54>
 800dc68:	9a06      	ldr	r2, [sp, #24]
 800dc6a:	bb1a      	cbnz	r2, 800dcb4 <_dtoa_r+0xa54>
 800dc6c:	9a07      	ldr	r2, [sp, #28]
 800dc6e:	bb0a      	cbnz	r2, 800dcb4 <_dtoa_r+0xa54>
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	ddec      	ble.n	800dc4e <_dtoa_r+0x9ee>
 800dc74:	2201      	movs	r2, #1
 800dc76:	9904      	ldr	r1, [sp, #16]
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f000 fa7b 	bl	800e174 <__lshift>
 800dc7e:	4639      	mov	r1, r7
 800dc80:	9004      	str	r0, [sp, #16]
 800dc82:	f000 facb 	bl	800e21c <__mcmp>
 800dc86:	2800      	cmp	r0, #0
 800dc88:	dc03      	bgt.n	800dc92 <_dtoa_r+0xa32>
 800dc8a:	d1e0      	bne.n	800dc4e <_dtoa_r+0x9ee>
 800dc8c:	f018 0f01 	tst.w	r8, #1
 800dc90:	d0dd      	beq.n	800dc4e <_dtoa_r+0x9ee>
 800dc92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc96:	d1d8      	bne.n	800dc4a <_dtoa_r+0x9ea>
 800dc98:	9b05      	ldr	r3, [sp, #20]
 800dc9a:	9a05      	ldr	r2, [sp, #20]
 800dc9c:	1c5d      	adds	r5, r3, #1
 800dc9e:	2339      	movs	r3, #57	; 0x39
 800dca0:	7013      	strb	r3, [r2, #0]
 800dca2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dca6:	2b39      	cmp	r3, #57	; 0x39
 800dca8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800dcac:	d04f      	beq.n	800dd4e <_dtoa_r+0xaee>
 800dcae:	3301      	adds	r3, #1
 800dcb0:	7013      	strb	r3, [r2, #0]
 800dcb2:	e754      	b.n	800db5e <_dtoa_r+0x8fe>
 800dcb4:	9a05      	ldr	r2, [sp, #20]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f102 0501 	add.w	r5, r2, #1
 800dcbc:	dd06      	ble.n	800dccc <_dtoa_r+0xa6c>
 800dcbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dcc2:	d0e9      	beq.n	800dc98 <_dtoa_r+0xa38>
 800dcc4:	f108 0801 	add.w	r8, r8, #1
 800dcc8:	9b05      	ldr	r3, [sp, #20]
 800dcca:	e7c2      	b.n	800dc52 <_dtoa_r+0x9f2>
 800dccc:	9a02      	ldr	r2, [sp, #8]
 800dcce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800dcd2:	eba5 030b 	sub.w	r3, r5, fp
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d021      	beq.n	800dd1e <_dtoa_r+0xabe>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	220a      	movs	r2, #10
 800dcde:	9904      	ldr	r1, [sp, #16]
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 f8d0 	bl	800de86 <__multadd>
 800dce6:	45b1      	cmp	r9, r6
 800dce8:	9004      	str	r0, [sp, #16]
 800dcea:	f04f 0300 	mov.w	r3, #0
 800dcee:	f04f 020a 	mov.w	r2, #10
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	d105      	bne.n	800dd04 <_dtoa_r+0xaa4>
 800dcf8:	f000 f8c5 	bl	800de86 <__multadd>
 800dcfc:	4681      	mov	r9, r0
 800dcfe:	4606      	mov	r6, r0
 800dd00:	9505      	str	r5, [sp, #20]
 800dd02:	e776      	b.n	800dbf2 <_dtoa_r+0x992>
 800dd04:	f000 f8bf 	bl	800de86 <__multadd>
 800dd08:	4631      	mov	r1, r6
 800dd0a:	4681      	mov	r9, r0
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	220a      	movs	r2, #10
 800dd10:	4620      	mov	r0, r4
 800dd12:	f000 f8b8 	bl	800de86 <__multadd>
 800dd16:	4606      	mov	r6, r0
 800dd18:	e7f2      	b.n	800dd00 <_dtoa_r+0xaa0>
 800dd1a:	f04f 0900 	mov.w	r9, #0
 800dd1e:	2201      	movs	r2, #1
 800dd20:	9904      	ldr	r1, [sp, #16]
 800dd22:	4620      	mov	r0, r4
 800dd24:	f000 fa26 	bl	800e174 <__lshift>
 800dd28:	4639      	mov	r1, r7
 800dd2a:	9004      	str	r0, [sp, #16]
 800dd2c:	f000 fa76 	bl	800e21c <__mcmp>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	dcb6      	bgt.n	800dca2 <_dtoa_r+0xa42>
 800dd34:	d102      	bne.n	800dd3c <_dtoa_r+0xadc>
 800dd36:	f018 0f01 	tst.w	r8, #1
 800dd3a:	d1b2      	bne.n	800dca2 <_dtoa_r+0xa42>
 800dd3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd40:	2b30      	cmp	r3, #48	; 0x30
 800dd42:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800dd46:	f47f af0a 	bne.w	800db5e <_dtoa_r+0x8fe>
 800dd4a:	4615      	mov	r5, r2
 800dd4c:	e7f6      	b.n	800dd3c <_dtoa_r+0xadc>
 800dd4e:	4593      	cmp	fp, r2
 800dd50:	d105      	bne.n	800dd5e <_dtoa_r+0xafe>
 800dd52:	2331      	movs	r3, #49	; 0x31
 800dd54:	f10a 0a01 	add.w	sl, sl, #1
 800dd58:	f88b 3000 	strb.w	r3, [fp]
 800dd5c:	e6ff      	b.n	800db5e <_dtoa_r+0x8fe>
 800dd5e:	4615      	mov	r5, r2
 800dd60:	e79f      	b.n	800dca2 <_dtoa_r+0xa42>
 800dd62:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ddc8 <_dtoa_r+0xb68>
 800dd66:	e007      	b.n	800dd78 <_dtoa_r+0xb18>
 800dd68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ddcc <_dtoa_r+0xb6c>
 800dd6e:	b11b      	cbz	r3, 800dd78 <_dtoa_r+0xb18>
 800dd70:	f10b 0308 	add.w	r3, fp, #8
 800dd74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	4658      	mov	r0, fp
 800dd7a:	b017      	add	sp, #92	; 0x5c
 800dd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd80:	9b06      	ldr	r3, [sp, #24]
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	f77f ae35 	ble.w	800d9f2 <_dtoa_r+0x792>
 800dd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd8a:	9307      	str	r3, [sp, #28]
 800dd8c:	e649      	b.n	800da22 <_dtoa_r+0x7c2>
 800dd8e:	9b02      	ldr	r3, [sp, #8]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	dc03      	bgt.n	800dd9c <_dtoa_r+0xb3c>
 800dd94:	9b06      	ldr	r3, [sp, #24]
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	f73f aecc 	bgt.w	800db34 <_dtoa_r+0x8d4>
 800dd9c:	465d      	mov	r5, fp
 800dd9e:	4639      	mov	r1, r7
 800dda0:	9804      	ldr	r0, [sp, #16]
 800dda2:	f7ff f9d1 	bl	800d148 <quorem>
 800dda6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ddaa:	f805 8b01 	strb.w	r8, [r5], #1
 800ddae:	9a02      	ldr	r2, [sp, #8]
 800ddb0:	eba5 030b 	sub.w	r3, r5, fp
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	ddb0      	ble.n	800dd1a <_dtoa_r+0xaba>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	220a      	movs	r2, #10
 800ddbc:	9904      	ldr	r1, [sp, #16]
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f000 f861 	bl	800de86 <__multadd>
 800ddc4:	9004      	str	r0, [sp, #16]
 800ddc6:	e7ea      	b.n	800dd9e <_dtoa_r+0xb3e>
 800ddc8:	0800e884 	.word	0x0800e884
 800ddcc:	0800e8a8 	.word	0x0800e8a8

0800ddd0 <_localeconv_r>:
 800ddd0:	4b04      	ldr	r3, [pc, #16]	; (800dde4 <_localeconv_r+0x14>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6a18      	ldr	r0, [r3, #32]
 800ddd6:	4b04      	ldr	r3, [pc, #16]	; (800dde8 <_localeconv_r+0x18>)
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	bf08      	it	eq
 800dddc:	4618      	moveq	r0, r3
 800ddde:	30f0      	adds	r0, #240	; 0xf0
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	20000184 	.word	0x20000184
 800dde8:	200001e8 	.word	0x200001e8

0800ddec <__malloc_lock>:
 800ddec:	4770      	bx	lr

0800ddee <__malloc_unlock>:
 800ddee:	4770      	bx	lr

0800ddf0 <_Balloc>:
 800ddf0:	b570      	push	{r4, r5, r6, lr}
 800ddf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	460e      	mov	r6, r1
 800ddf8:	b93d      	cbnz	r5, 800de0a <_Balloc+0x1a>
 800ddfa:	2010      	movs	r0, #16
 800ddfc:	f7fe fc4c 	bl	800c698 <malloc>
 800de00:	6260      	str	r0, [r4, #36]	; 0x24
 800de02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de06:	6005      	str	r5, [r0, #0]
 800de08:	60c5      	str	r5, [r0, #12]
 800de0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800de0c:	68eb      	ldr	r3, [r5, #12]
 800de0e:	b183      	cbz	r3, 800de32 <_Balloc+0x42>
 800de10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800de18:	b9b8      	cbnz	r0, 800de4a <_Balloc+0x5a>
 800de1a:	2101      	movs	r1, #1
 800de1c:	fa01 f506 	lsl.w	r5, r1, r6
 800de20:	1d6a      	adds	r2, r5, #5
 800de22:	0092      	lsls	r2, r2, #2
 800de24:	4620      	mov	r0, r4
 800de26:	f000 fabf 	bl	800e3a8 <_calloc_r>
 800de2a:	b160      	cbz	r0, 800de46 <_Balloc+0x56>
 800de2c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800de30:	e00e      	b.n	800de50 <_Balloc+0x60>
 800de32:	2221      	movs	r2, #33	; 0x21
 800de34:	2104      	movs	r1, #4
 800de36:	4620      	mov	r0, r4
 800de38:	f000 fab6 	bl	800e3a8 <_calloc_r>
 800de3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de3e:	60e8      	str	r0, [r5, #12]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1e4      	bne.n	800de10 <_Balloc+0x20>
 800de46:	2000      	movs	r0, #0
 800de48:	bd70      	pop	{r4, r5, r6, pc}
 800de4a:	6802      	ldr	r2, [r0, #0]
 800de4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800de50:	2300      	movs	r3, #0
 800de52:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de56:	e7f7      	b.n	800de48 <_Balloc+0x58>

0800de58 <_Bfree>:
 800de58:	b570      	push	{r4, r5, r6, lr}
 800de5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800de5c:	4606      	mov	r6, r0
 800de5e:	460d      	mov	r5, r1
 800de60:	b93c      	cbnz	r4, 800de72 <_Bfree+0x1a>
 800de62:	2010      	movs	r0, #16
 800de64:	f7fe fc18 	bl	800c698 <malloc>
 800de68:	6270      	str	r0, [r6, #36]	; 0x24
 800de6a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de6e:	6004      	str	r4, [r0, #0]
 800de70:	60c4      	str	r4, [r0, #12]
 800de72:	b13d      	cbz	r5, 800de84 <_Bfree+0x2c>
 800de74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800de76:	686a      	ldr	r2, [r5, #4]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de7e:	6029      	str	r1, [r5, #0]
 800de80:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800de84:	bd70      	pop	{r4, r5, r6, pc}

0800de86 <__multadd>:
 800de86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8a:	690d      	ldr	r5, [r1, #16]
 800de8c:	461f      	mov	r7, r3
 800de8e:	4606      	mov	r6, r0
 800de90:	460c      	mov	r4, r1
 800de92:	f101 0c14 	add.w	ip, r1, #20
 800de96:	2300      	movs	r3, #0
 800de98:	f8dc 0000 	ldr.w	r0, [ip]
 800de9c:	b281      	uxth	r1, r0
 800de9e:	fb02 7101 	mla	r1, r2, r1, r7
 800dea2:	0c0f      	lsrs	r7, r1, #16
 800dea4:	0c00      	lsrs	r0, r0, #16
 800dea6:	fb02 7000 	mla	r0, r2, r0, r7
 800deaa:	b289      	uxth	r1, r1
 800deac:	3301      	adds	r3, #1
 800deae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800deb2:	429d      	cmp	r5, r3
 800deb4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800deb8:	f84c 1b04 	str.w	r1, [ip], #4
 800debc:	dcec      	bgt.n	800de98 <__multadd+0x12>
 800debe:	b1d7      	cbz	r7, 800def6 <__multadd+0x70>
 800dec0:	68a3      	ldr	r3, [r4, #8]
 800dec2:	42ab      	cmp	r3, r5
 800dec4:	dc12      	bgt.n	800deec <__multadd+0x66>
 800dec6:	6861      	ldr	r1, [r4, #4]
 800dec8:	4630      	mov	r0, r6
 800deca:	3101      	adds	r1, #1
 800decc:	f7ff ff90 	bl	800ddf0 <_Balloc>
 800ded0:	6922      	ldr	r2, [r4, #16]
 800ded2:	3202      	adds	r2, #2
 800ded4:	f104 010c 	add.w	r1, r4, #12
 800ded8:	4680      	mov	r8, r0
 800deda:	0092      	lsls	r2, r2, #2
 800dedc:	300c      	adds	r0, #12
 800dede:	f7fe fbeb 	bl	800c6b8 <memcpy>
 800dee2:	4621      	mov	r1, r4
 800dee4:	4630      	mov	r0, r6
 800dee6:	f7ff ffb7 	bl	800de58 <_Bfree>
 800deea:	4644      	mov	r4, r8
 800deec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800def0:	3501      	adds	r5, #1
 800def2:	615f      	str	r7, [r3, #20]
 800def4:	6125      	str	r5, [r4, #16]
 800def6:	4620      	mov	r0, r4
 800def8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800defc <__hi0bits>:
 800defc:	0c02      	lsrs	r2, r0, #16
 800defe:	0412      	lsls	r2, r2, #16
 800df00:	4603      	mov	r3, r0
 800df02:	b9b2      	cbnz	r2, 800df32 <__hi0bits+0x36>
 800df04:	0403      	lsls	r3, r0, #16
 800df06:	2010      	movs	r0, #16
 800df08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800df0c:	bf04      	itt	eq
 800df0e:	021b      	lsleq	r3, r3, #8
 800df10:	3008      	addeq	r0, #8
 800df12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800df16:	bf04      	itt	eq
 800df18:	011b      	lsleq	r3, r3, #4
 800df1a:	3004      	addeq	r0, #4
 800df1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800df20:	bf04      	itt	eq
 800df22:	009b      	lsleq	r3, r3, #2
 800df24:	3002      	addeq	r0, #2
 800df26:	2b00      	cmp	r3, #0
 800df28:	db06      	blt.n	800df38 <__hi0bits+0x3c>
 800df2a:	005b      	lsls	r3, r3, #1
 800df2c:	d503      	bpl.n	800df36 <__hi0bits+0x3a>
 800df2e:	3001      	adds	r0, #1
 800df30:	4770      	bx	lr
 800df32:	2000      	movs	r0, #0
 800df34:	e7e8      	b.n	800df08 <__hi0bits+0xc>
 800df36:	2020      	movs	r0, #32
 800df38:	4770      	bx	lr

0800df3a <__lo0bits>:
 800df3a:	6803      	ldr	r3, [r0, #0]
 800df3c:	f013 0207 	ands.w	r2, r3, #7
 800df40:	4601      	mov	r1, r0
 800df42:	d00b      	beq.n	800df5c <__lo0bits+0x22>
 800df44:	07da      	lsls	r2, r3, #31
 800df46:	d423      	bmi.n	800df90 <__lo0bits+0x56>
 800df48:	0798      	lsls	r0, r3, #30
 800df4a:	bf49      	itett	mi
 800df4c:	085b      	lsrmi	r3, r3, #1
 800df4e:	089b      	lsrpl	r3, r3, #2
 800df50:	2001      	movmi	r0, #1
 800df52:	600b      	strmi	r3, [r1, #0]
 800df54:	bf5c      	itt	pl
 800df56:	600b      	strpl	r3, [r1, #0]
 800df58:	2002      	movpl	r0, #2
 800df5a:	4770      	bx	lr
 800df5c:	b298      	uxth	r0, r3
 800df5e:	b9a8      	cbnz	r0, 800df8c <__lo0bits+0x52>
 800df60:	0c1b      	lsrs	r3, r3, #16
 800df62:	2010      	movs	r0, #16
 800df64:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df68:	bf04      	itt	eq
 800df6a:	0a1b      	lsreq	r3, r3, #8
 800df6c:	3008      	addeq	r0, #8
 800df6e:	071a      	lsls	r2, r3, #28
 800df70:	bf04      	itt	eq
 800df72:	091b      	lsreq	r3, r3, #4
 800df74:	3004      	addeq	r0, #4
 800df76:	079a      	lsls	r2, r3, #30
 800df78:	bf04      	itt	eq
 800df7a:	089b      	lsreq	r3, r3, #2
 800df7c:	3002      	addeq	r0, #2
 800df7e:	07da      	lsls	r2, r3, #31
 800df80:	d402      	bmi.n	800df88 <__lo0bits+0x4e>
 800df82:	085b      	lsrs	r3, r3, #1
 800df84:	d006      	beq.n	800df94 <__lo0bits+0x5a>
 800df86:	3001      	adds	r0, #1
 800df88:	600b      	str	r3, [r1, #0]
 800df8a:	4770      	bx	lr
 800df8c:	4610      	mov	r0, r2
 800df8e:	e7e9      	b.n	800df64 <__lo0bits+0x2a>
 800df90:	2000      	movs	r0, #0
 800df92:	4770      	bx	lr
 800df94:	2020      	movs	r0, #32
 800df96:	4770      	bx	lr

0800df98 <__i2b>:
 800df98:	b510      	push	{r4, lr}
 800df9a:	460c      	mov	r4, r1
 800df9c:	2101      	movs	r1, #1
 800df9e:	f7ff ff27 	bl	800ddf0 <_Balloc>
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	6144      	str	r4, [r0, #20]
 800dfa6:	6102      	str	r2, [r0, #16]
 800dfa8:	bd10      	pop	{r4, pc}

0800dfaa <__multiply>:
 800dfaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfae:	4614      	mov	r4, r2
 800dfb0:	690a      	ldr	r2, [r1, #16]
 800dfb2:	6923      	ldr	r3, [r4, #16]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	bfb8      	it	lt
 800dfb8:	460b      	movlt	r3, r1
 800dfba:	4688      	mov	r8, r1
 800dfbc:	bfbc      	itt	lt
 800dfbe:	46a0      	movlt	r8, r4
 800dfc0:	461c      	movlt	r4, r3
 800dfc2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dfca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfd2:	eb07 0609 	add.w	r6, r7, r9
 800dfd6:	42b3      	cmp	r3, r6
 800dfd8:	bfb8      	it	lt
 800dfda:	3101      	addlt	r1, #1
 800dfdc:	f7ff ff08 	bl	800ddf0 <_Balloc>
 800dfe0:	f100 0514 	add.w	r5, r0, #20
 800dfe4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dfe8:	462b      	mov	r3, r5
 800dfea:	2200      	movs	r2, #0
 800dfec:	4573      	cmp	r3, lr
 800dfee:	d316      	bcc.n	800e01e <__multiply+0x74>
 800dff0:	f104 0214 	add.w	r2, r4, #20
 800dff4:	f108 0114 	add.w	r1, r8, #20
 800dff8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dffc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	9b00      	ldr	r3, [sp, #0]
 800e004:	9201      	str	r2, [sp, #4]
 800e006:	4293      	cmp	r3, r2
 800e008:	d80c      	bhi.n	800e024 <__multiply+0x7a>
 800e00a:	2e00      	cmp	r6, #0
 800e00c:	dd03      	ble.n	800e016 <__multiply+0x6c>
 800e00e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e012:	2b00      	cmp	r3, #0
 800e014:	d05d      	beq.n	800e0d2 <__multiply+0x128>
 800e016:	6106      	str	r6, [r0, #16]
 800e018:	b003      	add	sp, #12
 800e01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01e:	f843 2b04 	str.w	r2, [r3], #4
 800e022:	e7e3      	b.n	800dfec <__multiply+0x42>
 800e024:	f8b2 b000 	ldrh.w	fp, [r2]
 800e028:	f1bb 0f00 	cmp.w	fp, #0
 800e02c:	d023      	beq.n	800e076 <__multiply+0xcc>
 800e02e:	4689      	mov	r9, r1
 800e030:	46ac      	mov	ip, r5
 800e032:	f04f 0800 	mov.w	r8, #0
 800e036:	f859 4b04 	ldr.w	r4, [r9], #4
 800e03a:	f8dc a000 	ldr.w	sl, [ip]
 800e03e:	b2a3      	uxth	r3, r4
 800e040:	fa1f fa8a 	uxth.w	sl, sl
 800e044:	fb0b a303 	mla	r3, fp, r3, sl
 800e048:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e04c:	f8dc 4000 	ldr.w	r4, [ip]
 800e050:	4443      	add	r3, r8
 800e052:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e056:	fb0b 840a 	mla	r4, fp, sl, r8
 800e05a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e05e:	46e2      	mov	sl, ip
 800e060:	b29b      	uxth	r3, r3
 800e062:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e066:	454f      	cmp	r7, r9
 800e068:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e06c:	f84a 3b04 	str.w	r3, [sl], #4
 800e070:	d82b      	bhi.n	800e0ca <__multiply+0x120>
 800e072:	f8cc 8004 	str.w	r8, [ip, #4]
 800e076:	9b01      	ldr	r3, [sp, #4]
 800e078:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e07c:	3204      	adds	r2, #4
 800e07e:	f1ba 0f00 	cmp.w	sl, #0
 800e082:	d020      	beq.n	800e0c6 <__multiply+0x11c>
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	4689      	mov	r9, r1
 800e088:	46a8      	mov	r8, r5
 800e08a:	f04f 0b00 	mov.w	fp, #0
 800e08e:	f8b9 c000 	ldrh.w	ip, [r9]
 800e092:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e096:	fb0a 440c 	mla	r4, sl, ip, r4
 800e09a:	445c      	add	r4, fp
 800e09c:	46c4      	mov	ip, r8
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e0a4:	f84c 3b04 	str.w	r3, [ip], #4
 800e0a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e0b0:	0c1b      	lsrs	r3, r3, #16
 800e0b2:	fb0a b303 	mla	r3, sl, r3, fp
 800e0b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e0ba:	454f      	cmp	r7, r9
 800e0bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e0c0:	d805      	bhi.n	800e0ce <__multiply+0x124>
 800e0c2:	f8c8 3004 	str.w	r3, [r8, #4]
 800e0c6:	3504      	adds	r5, #4
 800e0c8:	e79b      	b.n	800e002 <__multiply+0x58>
 800e0ca:	46d4      	mov	ip, sl
 800e0cc:	e7b3      	b.n	800e036 <__multiply+0x8c>
 800e0ce:	46e0      	mov	r8, ip
 800e0d0:	e7dd      	b.n	800e08e <__multiply+0xe4>
 800e0d2:	3e01      	subs	r6, #1
 800e0d4:	e799      	b.n	800e00a <__multiply+0x60>
	...

0800e0d8 <__pow5mult>:
 800e0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0dc:	4615      	mov	r5, r2
 800e0de:	f012 0203 	ands.w	r2, r2, #3
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	460f      	mov	r7, r1
 800e0e6:	d007      	beq.n	800e0f8 <__pow5mult+0x20>
 800e0e8:	3a01      	subs	r2, #1
 800e0ea:	4c21      	ldr	r4, [pc, #132]	; (800e170 <__pow5mult+0x98>)
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0f2:	f7ff fec8 	bl	800de86 <__multadd>
 800e0f6:	4607      	mov	r7, r0
 800e0f8:	10ad      	asrs	r5, r5, #2
 800e0fa:	d035      	beq.n	800e168 <__pow5mult+0x90>
 800e0fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e0fe:	b93c      	cbnz	r4, 800e110 <__pow5mult+0x38>
 800e100:	2010      	movs	r0, #16
 800e102:	f7fe fac9 	bl	800c698 <malloc>
 800e106:	6270      	str	r0, [r6, #36]	; 0x24
 800e108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e10c:	6004      	str	r4, [r0, #0]
 800e10e:	60c4      	str	r4, [r0, #12]
 800e110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e118:	b94c      	cbnz	r4, 800e12e <__pow5mult+0x56>
 800e11a:	f240 2171 	movw	r1, #625	; 0x271
 800e11e:	4630      	mov	r0, r6
 800e120:	f7ff ff3a 	bl	800df98 <__i2b>
 800e124:	2300      	movs	r3, #0
 800e126:	f8c8 0008 	str.w	r0, [r8, #8]
 800e12a:	4604      	mov	r4, r0
 800e12c:	6003      	str	r3, [r0, #0]
 800e12e:	f04f 0800 	mov.w	r8, #0
 800e132:	07eb      	lsls	r3, r5, #31
 800e134:	d50a      	bpl.n	800e14c <__pow5mult+0x74>
 800e136:	4639      	mov	r1, r7
 800e138:	4622      	mov	r2, r4
 800e13a:	4630      	mov	r0, r6
 800e13c:	f7ff ff35 	bl	800dfaa <__multiply>
 800e140:	4639      	mov	r1, r7
 800e142:	4681      	mov	r9, r0
 800e144:	4630      	mov	r0, r6
 800e146:	f7ff fe87 	bl	800de58 <_Bfree>
 800e14a:	464f      	mov	r7, r9
 800e14c:	106d      	asrs	r5, r5, #1
 800e14e:	d00b      	beq.n	800e168 <__pow5mult+0x90>
 800e150:	6820      	ldr	r0, [r4, #0]
 800e152:	b938      	cbnz	r0, 800e164 <__pow5mult+0x8c>
 800e154:	4622      	mov	r2, r4
 800e156:	4621      	mov	r1, r4
 800e158:	4630      	mov	r0, r6
 800e15a:	f7ff ff26 	bl	800dfaa <__multiply>
 800e15e:	6020      	str	r0, [r4, #0]
 800e160:	f8c0 8000 	str.w	r8, [r0]
 800e164:	4604      	mov	r4, r0
 800e166:	e7e4      	b.n	800e132 <__pow5mult+0x5a>
 800e168:	4638      	mov	r0, r7
 800e16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e16e:	bf00      	nop
 800e170:	0800e9a8 	.word	0x0800e9a8

0800e174 <__lshift>:
 800e174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e178:	460c      	mov	r4, r1
 800e17a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e17e:	6923      	ldr	r3, [r4, #16]
 800e180:	6849      	ldr	r1, [r1, #4]
 800e182:	eb0a 0903 	add.w	r9, sl, r3
 800e186:	68a3      	ldr	r3, [r4, #8]
 800e188:	4607      	mov	r7, r0
 800e18a:	4616      	mov	r6, r2
 800e18c:	f109 0501 	add.w	r5, r9, #1
 800e190:	42ab      	cmp	r3, r5
 800e192:	db32      	blt.n	800e1fa <__lshift+0x86>
 800e194:	4638      	mov	r0, r7
 800e196:	f7ff fe2b 	bl	800ddf0 <_Balloc>
 800e19a:	2300      	movs	r3, #0
 800e19c:	4680      	mov	r8, r0
 800e19e:	f100 0114 	add.w	r1, r0, #20
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	4553      	cmp	r3, sl
 800e1a6:	db2b      	blt.n	800e200 <__lshift+0x8c>
 800e1a8:	6920      	ldr	r0, [r4, #16]
 800e1aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1ae:	f104 0314 	add.w	r3, r4, #20
 800e1b2:	f016 021f 	ands.w	r2, r6, #31
 800e1b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1be:	d025      	beq.n	800e20c <__lshift+0x98>
 800e1c0:	f1c2 0e20 	rsb	lr, r2, #32
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	681e      	ldr	r6, [r3, #0]
 800e1c8:	468a      	mov	sl, r1
 800e1ca:	4096      	lsls	r6, r2
 800e1cc:	4330      	orrs	r0, r6
 800e1ce:	f84a 0b04 	str.w	r0, [sl], #4
 800e1d2:	f853 0b04 	ldr.w	r0, [r3], #4
 800e1d6:	459c      	cmp	ip, r3
 800e1d8:	fa20 f00e 	lsr.w	r0, r0, lr
 800e1dc:	d814      	bhi.n	800e208 <__lshift+0x94>
 800e1de:	6048      	str	r0, [r1, #4]
 800e1e0:	b108      	cbz	r0, 800e1e6 <__lshift+0x72>
 800e1e2:	f109 0502 	add.w	r5, r9, #2
 800e1e6:	3d01      	subs	r5, #1
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	f8c8 5010 	str.w	r5, [r8, #16]
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	f7ff fe32 	bl	800de58 <_Bfree>
 800e1f4:	4640      	mov	r0, r8
 800e1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fa:	3101      	adds	r1, #1
 800e1fc:	005b      	lsls	r3, r3, #1
 800e1fe:	e7c7      	b.n	800e190 <__lshift+0x1c>
 800e200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e204:	3301      	adds	r3, #1
 800e206:	e7cd      	b.n	800e1a4 <__lshift+0x30>
 800e208:	4651      	mov	r1, sl
 800e20a:	e7dc      	b.n	800e1c6 <__lshift+0x52>
 800e20c:	3904      	subs	r1, #4
 800e20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e212:	f841 2f04 	str.w	r2, [r1, #4]!
 800e216:	459c      	cmp	ip, r3
 800e218:	d8f9      	bhi.n	800e20e <__lshift+0x9a>
 800e21a:	e7e4      	b.n	800e1e6 <__lshift+0x72>

0800e21c <__mcmp>:
 800e21c:	6903      	ldr	r3, [r0, #16]
 800e21e:	690a      	ldr	r2, [r1, #16]
 800e220:	1a9b      	subs	r3, r3, r2
 800e222:	b530      	push	{r4, r5, lr}
 800e224:	d10c      	bne.n	800e240 <__mcmp+0x24>
 800e226:	0092      	lsls	r2, r2, #2
 800e228:	3014      	adds	r0, #20
 800e22a:	3114      	adds	r1, #20
 800e22c:	1884      	adds	r4, r0, r2
 800e22e:	4411      	add	r1, r2
 800e230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e238:	4295      	cmp	r5, r2
 800e23a:	d003      	beq.n	800e244 <__mcmp+0x28>
 800e23c:	d305      	bcc.n	800e24a <__mcmp+0x2e>
 800e23e:	2301      	movs	r3, #1
 800e240:	4618      	mov	r0, r3
 800e242:	bd30      	pop	{r4, r5, pc}
 800e244:	42a0      	cmp	r0, r4
 800e246:	d3f3      	bcc.n	800e230 <__mcmp+0x14>
 800e248:	e7fa      	b.n	800e240 <__mcmp+0x24>
 800e24a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e24e:	e7f7      	b.n	800e240 <__mcmp+0x24>

0800e250 <__mdiff>:
 800e250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e254:	460d      	mov	r5, r1
 800e256:	4607      	mov	r7, r0
 800e258:	4611      	mov	r1, r2
 800e25a:	4628      	mov	r0, r5
 800e25c:	4614      	mov	r4, r2
 800e25e:	f7ff ffdd 	bl	800e21c <__mcmp>
 800e262:	1e06      	subs	r6, r0, #0
 800e264:	d108      	bne.n	800e278 <__mdiff+0x28>
 800e266:	4631      	mov	r1, r6
 800e268:	4638      	mov	r0, r7
 800e26a:	f7ff fdc1 	bl	800ddf0 <_Balloc>
 800e26e:	2301      	movs	r3, #1
 800e270:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e278:	bfa4      	itt	ge
 800e27a:	4623      	movge	r3, r4
 800e27c:	462c      	movge	r4, r5
 800e27e:	4638      	mov	r0, r7
 800e280:	6861      	ldr	r1, [r4, #4]
 800e282:	bfa6      	itte	ge
 800e284:	461d      	movge	r5, r3
 800e286:	2600      	movge	r6, #0
 800e288:	2601      	movlt	r6, #1
 800e28a:	f7ff fdb1 	bl	800ddf0 <_Balloc>
 800e28e:	692b      	ldr	r3, [r5, #16]
 800e290:	60c6      	str	r6, [r0, #12]
 800e292:	6926      	ldr	r6, [r4, #16]
 800e294:	f105 0914 	add.w	r9, r5, #20
 800e298:	f104 0214 	add.w	r2, r4, #20
 800e29c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e2a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e2a4:	f100 0514 	add.w	r5, r0, #20
 800e2a8:	f04f 0e00 	mov.w	lr, #0
 800e2ac:	f852 ab04 	ldr.w	sl, [r2], #4
 800e2b0:	f859 4b04 	ldr.w	r4, [r9], #4
 800e2b4:	fa1e f18a 	uxtah	r1, lr, sl
 800e2b8:	b2a3      	uxth	r3, r4
 800e2ba:	1ac9      	subs	r1, r1, r3
 800e2bc:	0c23      	lsrs	r3, r4, #16
 800e2be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e2c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e2c6:	b289      	uxth	r1, r1
 800e2c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e2cc:	45c8      	cmp	r8, r9
 800e2ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e2d2:	4694      	mov	ip, r2
 800e2d4:	f845 3b04 	str.w	r3, [r5], #4
 800e2d8:	d8e8      	bhi.n	800e2ac <__mdiff+0x5c>
 800e2da:	45bc      	cmp	ip, r7
 800e2dc:	d304      	bcc.n	800e2e8 <__mdiff+0x98>
 800e2de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e2e2:	b183      	cbz	r3, 800e306 <__mdiff+0xb6>
 800e2e4:	6106      	str	r6, [r0, #16]
 800e2e6:	e7c5      	b.n	800e274 <__mdiff+0x24>
 800e2e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e2ec:	fa1e f381 	uxtah	r3, lr, r1
 800e2f0:	141a      	asrs	r2, r3, #16
 800e2f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e300:	f845 3b04 	str.w	r3, [r5], #4
 800e304:	e7e9      	b.n	800e2da <__mdiff+0x8a>
 800e306:	3e01      	subs	r6, #1
 800e308:	e7e9      	b.n	800e2de <__mdiff+0x8e>

0800e30a <__d2b>:
 800e30a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e30e:	460e      	mov	r6, r1
 800e310:	2101      	movs	r1, #1
 800e312:	ec59 8b10 	vmov	r8, r9, d0
 800e316:	4615      	mov	r5, r2
 800e318:	f7ff fd6a 	bl	800ddf0 <_Balloc>
 800e31c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e320:	4607      	mov	r7, r0
 800e322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e326:	bb34      	cbnz	r4, 800e376 <__d2b+0x6c>
 800e328:	9301      	str	r3, [sp, #4]
 800e32a:	f1b8 0300 	subs.w	r3, r8, #0
 800e32e:	d027      	beq.n	800e380 <__d2b+0x76>
 800e330:	a802      	add	r0, sp, #8
 800e332:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e336:	f7ff fe00 	bl	800df3a <__lo0bits>
 800e33a:	9900      	ldr	r1, [sp, #0]
 800e33c:	b1f0      	cbz	r0, 800e37c <__d2b+0x72>
 800e33e:	9a01      	ldr	r2, [sp, #4]
 800e340:	f1c0 0320 	rsb	r3, r0, #32
 800e344:	fa02 f303 	lsl.w	r3, r2, r3
 800e348:	430b      	orrs	r3, r1
 800e34a:	40c2      	lsrs	r2, r0
 800e34c:	617b      	str	r3, [r7, #20]
 800e34e:	9201      	str	r2, [sp, #4]
 800e350:	9b01      	ldr	r3, [sp, #4]
 800e352:	61bb      	str	r3, [r7, #24]
 800e354:	2b00      	cmp	r3, #0
 800e356:	bf14      	ite	ne
 800e358:	2102      	movne	r1, #2
 800e35a:	2101      	moveq	r1, #1
 800e35c:	6139      	str	r1, [r7, #16]
 800e35e:	b1c4      	cbz	r4, 800e392 <__d2b+0x88>
 800e360:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e364:	4404      	add	r4, r0
 800e366:	6034      	str	r4, [r6, #0]
 800e368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e36c:	6028      	str	r0, [r5, #0]
 800e36e:	4638      	mov	r0, r7
 800e370:	b003      	add	sp, #12
 800e372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e37a:	e7d5      	b.n	800e328 <__d2b+0x1e>
 800e37c:	6179      	str	r1, [r7, #20]
 800e37e:	e7e7      	b.n	800e350 <__d2b+0x46>
 800e380:	a801      	add	r0, sp, #4
 800e382:	f7ff fdda 	bl	800df3a <__lo0bits>
 800e386:	9b01      	ldr	r3, [sp, #4]
 800e388:	617b      	str	r3, [r7, #20]
 800e38a:	2101      	movs	r1, #1
 800e38c:	6139      	str	r1, [r7, #16]
 800e38e:	3020      	adds	r0, #32
 800e390:	e7e5      	b.n	800e35e <__d2b+0x54>
 800e392:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e396:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e39a:	6030      	str	r0, [r6, #0]
 800e39c:	6918      	ldr	r0, [r3, #16]
 800e39e:	f7ff fdad 	bl	800defc <__hi0bits>
 800e3a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e3a6:	e7e1      	b.n	800e36c <__d2b+0x62>

0800e3a8 <_calloc_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	fb02 f401 	mul.w	r4, r2, r1
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	f7fe f9e4 	bl	800c77c <_malloc_r>
 800e3b4:	4605      	mov	r5, r0
 800e3b6:	b118      	cbz	r0, 800e3c0 <_calloc_r+0x18>
 800e3b8:	4622      	mov	r2, r4
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	f7fe f987 	bl	800c6ce <memset>
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	bd38      	pop	{r3, r4, r5, pc}

0800e3c4 <__ssputs_r>:
 800e3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c8:	688e      	ldr	r6, [r1, #8]
 800e3ca:	429e      	cmp	r6, r3
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	4690      	mov	r8, r2
 800e3d2:	4699      	mov	r9, r3
 800e3d4:	d837      	bhi.n	800e446 <__ssputs_r+0x82>
 800e3d6:	898a      	ldrh	r2, [r1, #12]
 800e3d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3dc:	d031      	beq.n	800e442 <__ssputs_r+0x7e>
 800e3de:	6825      	ldr	r5, [r4, #0]
 800e3e0:	6909      	ldr	r1, [r1, #16]
 800e3e2:	1a6f      	subs	r7, r5, r1
 800e3e4:	6965      	ldr	r5, [r4, #20]
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3ec:	fb95 f5f3 	sdiv	r5, r5, r3
 800e3f0:	f109 0301 	add.w	r3, r9, #1
 800e3f4:	443b      	add	r3, r7
 800e3f6:	429d      	cmp	r5, r3
 800e3f8:	bf38      	it	cc
 800e3fa:	461d      	movcc	r5, r3
 800e3fc:	0553      	lsls	r3, r2, #21
 800e3fe:	d530      	bpl.n	800e462 <__ssputs_r+0x9e>
 800e400:	4629      	mov	r1, r5
 800e402:	f7fe f9bb 	bl	800c77c <_malloc_r>
 800e406:	4606      	mov	r6, r0
 800e408:	b950      	cbnz	r0, 800e420 <__ssputs_r+0x5c>
 800e40a:	230c      	movs	r3, #12
 800e40c:	f8ca 3000 	str.w	r3, [sl]
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e416:	81a3      	strh	r3, [r4, #12]
 800e418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e420:	463a      	mov	r2, r7
 800e422:	6921      	ldr	r1, [r4, #16]
 800e424:	f7fe f948 	bl	800c6b8 <memcpy>
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e432:	81a3      	strh	r3, [r4, #12]
 800e434:	6126      	str	r6, [r4, #16]
 800e436:	6165      	str	r5, [r4, #20]
 800e438:	443e      	add	r6, r7
 800e43a:	1bed      	subs	r5, r5, r7
 800e43c:	6026      	str	r6, [r4, #0]
 800e43e:	60a5      	str	r5, [r4, #8]
 800e440:	464e      	mov	r6, r9
 800e442:	454e      	cmp	r6, r9
 800e444:	d900      	bls.n	800e448 <__ssputs_r+0x84>
 800e446:	464e      	mov	r6, r9
 800e448:	4632      	mov	r2, r6
 800e44a:	4641      	mov	r1, r8
 800e44c:	6820      	ldr	r0, [r4, #0]
 800e44e:	f000 f91d 	bl	800e68c <memmove>
 800e452:	68a3      	ldr	r3, [r4, #8]
 800e454:	1b9b      	subs	r3, r3, r6
 800e456:	60a3      	str	r3, [r4, #8]
 800e458:	6823      	ldr	r3, [r4, #0]
 800e45a:	441e      	add	r6, r3
 800e45c:	6026      	str	r6, [r4, #0]
 800e45e:	2000      	movs	r0, #0
 800e460:	e7dc      	b.n	800e41c <__ssputs_r+0x58>
 800e462:	462a      	mov	r2, r5
 800e464:	f000 f92b 	bl	800e6be <_realloc_r>
 800e468:	4606      	mov	r6, r0
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d1e2      	bne.n	800e434 <__ssputs_r+0x70>
 800e46e:	6921      	ldr	r1, [r4, #16]
 800e470:	4650      	mov	r0, sl
 800e472:	f7fe f935 	bl	800c6e0 <_free_r>
 800e476:	e7c8      	b.n	800e40a <__ssputs_r+0x46>

0800e478 <_svfiprintf_r>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	461d      	mov	r5, r3
 800e47e:	898b      	ldrh	r3, [r1, #12]
 800e480:	061f      	lsls	r7, r3, #24
 800e482:	b09d      	sub	sp, #116	; 0x74
 800e484:	4680      	mov	r8, r0
 800e486:	460c      	mov	r4, r1
 800e488:	4616      	mov	r6, r2
 800e48a:	d50f      	bpl.n	800e4ac <_svfiprintf_r+0x34>
 800e48c:	690b      	ldr	r3, [r1, #16]
 800e48e:	b96b      	cbnz	r3, 800e4ac <_svfiprintf_r+0x34>
 800e490:	2140      	movs	r1, #64	; 0x40
 800e492:	f7fe f973 	bl	800c77c <_malloc_r>
 800e496:	6020      	str	r0, [r4, #0]
 800e498:	6120      	str	r0, [r4, #16]
 800e49a:	b928      	cbnz	r0, 800e4a8 <_svfiprintf_r+0x30>
 800e49c:	230c      	movs	r3, #12
 800e49e:	f8c8 3000 	str.w	r3, [r8]
 800e4a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4a6:	e0c8      	b.n	800e63a <_svfiprintf_r+0x1c2>
 800e4a8:	2340      	movs	r3, #64	; 0x40
 800e4aa:	6163      	str	r3, [r4, #20]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e4b0:	2320      	movs	r3, #32
 800e4b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4b6:	2330      	movs	r3, #48	; 0x30
 800e4b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4bc:	9503      	str	r5, [sp, #12]
 800e4be:	f04f 0b01 	mov.w	fp, #1
 800e4c2:	4637      	mov	r7, r6
 800e4c4:	463d      	mov	r5, r7
 800e4c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4ca:	b10b      	cbz	r3, 800e4d0 <_svfiprintf_r+0x58>
 800e4cc:	2b25      	cmp	r3, #37	; 0x25
 800e4ce:	d13e      	bne.n	800e54e <_svfiprintf_r+0xd6>
 800e4d0:	ebb7 0a06 	subs.w	sl, r7, r6
 800e4d4:	d00b      	beq.n	800e4ee <_svfiprintf_r+0x76>
 800e4d6:	4653      	mov	r3, sl
 800e4d8:	4632      	mov	r2, r6
 800e4da:	4621      	mov	r1, r4
 800e4dc:	4640      	mov	r0, r8
 800e4de:	f7ff ff71 	bl	800e3c4 <__ssputs_r>
 800e4e2:	3001      	adds	r0, #1
 800e4e4:	f000 80a4 	beq.w	800e630 <_svfiprintf_r+0x1b8>
 800e4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ea:	4453      	add	r3, sl
 800e4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ee:	783b      	ldrb	r3, [r7, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f000 809d 	beq.w	800e630 <_svfiprintf_r+0x1b8>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e500:	9304      	str	r3, [sp, #16]
 800e502:	9307      	str	r3, [sp, #28]
 800e504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e508:	931a      	str	r3, [sp, #104]	; 0x68
 800e50a:	462f      	mov	r7, r5
 800e50c:	2205      	movs	r2, #5
 800e50e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e512:	4850      	ldr	r0, [pc, #320]	; (800e654 <_svfiprintf_r+0x1dc>)
 800e514:	f7f1 fe6c 	bl	80001f0 <memchr>
 800e518:	9b04      	ldr	r3, [sp, #16]
 800e51a:	b9d0      	cbnz	r0, 800e552 <_svfiprintf_r+0xda>
 800e51c:	06d9      	lsls	r1, r3, #27
 800e51e:	bf44      	itt	mi
 800e520:	2220      	movmi	r2, #32
 800e522:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e526:	071a      	lsls	r2, r3, #28
 800e528:	bf44      	itt	mi
 800e52a:	222b      	movmi	r2, #43	; 0x2b
 800e52c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e530:	782a      	ldrb	r2, [r5, #0]
 800e532:	2a2a      	cmp	r2, #42	; 0x2a
 800e534:	d015      	beq.n	800e562 <_svfiprintf_r+0xea>
 800e536:	9a07      	ldr	r2, [sp, #28]
 800e538:	462f      	mov	r7, r5
 800e53a:	2000      	movs	r0, #0
 800e53c:	250a      	movs	r5, #10
 800e53e:	4639      	mov	r1, r7
 800e540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e544:	3b30      	subs	r3, #48	; 0x30
 800e546:	2b09      	cmp	r3, #9
 800e548:	d94d      	bls.n	800e5e6 <_svfiprintf_r+0x16e>
 800e54a:	b1b8      	cbz	r0, 800e57c <_svfiprintf_r+0x104>
 800e54c:	e00f      	b.n	800e56e <_svfiprintf_r+0xf6>
 800e54e:	462f      	mov	r7, r5
 800e550:	e7b8      	b.n	800e4c4 <_svfiprintf_r+0x4c>
 800e552:	4a40      	ldr	r2, [pc, #256]	; (800e654 <_svfiprintf_r+0x1dc>)
 800e554:	1a80      	subs	r0, r0, r2
 800e556:	fa0b f000 	lsl.w	r0, fp, r0
 800e55a:	4318      	orrs	r0, r3
 800e55c:	9004      	str	r0, [sp, #16]
 800e55e:	463d      	mov	r5, r7
 800e560:	e7d3      	b.n	800e50a <_svfiprintf_r+0x92>
 800e562:	9a03      	ldr	r2, [sp, #12]
 800e564:	1d11      	adds	r1, r2, #4
 800e566:	6812      	ldr	r2, [r2, #0]
 800e568:	9103      	str	r1, [sp, #12]
 800e56a:	2a00      	cmp	r2, #0
 800e56c:	db01      	blt.n	800e572 <_svfiprintf_r+0xfa>
 800e56e:	9207      	str	r2, [sp, #28]
 800e570:	e004      	b.n	800e57c <_svfiprintf_r+0x104>
 800e572:	4252      	negs	r2, r2
 800e574:	f043 0302 	orr.w	r3, r3, #2
 800e578:	9207      	str	r2, [sp, #28]
 800e57a:	9304      	str	r3, [sp, #16]
 800e57c:	783b      	ldrb	r3, [r7, #0]
 800e57e:	2b2e      	cmp	r3, #46	; 0x2e
 800e580:	d10c      	bne.n	800e59c <_svfiprintf_r+0x124>
 800e582:	787b      	ldrb	r3, [r7, #1]
 800e584:	2b2a      	cmp	r3, #42	; 0x2a
 800e586:	d133      	bne.n	800e5f0 <_svfiprintf_r+0x178>
 800e588:	9b03      	ldr	r3, [sp, #12]
 800e58a:	1d1a      	adds	r2, r3, #4
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	9203      	str	r2, [sp, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	bfb8      	it	lt
 800e594:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e598:	3702      	adds	r7, #2
 800e59a:	9305      	str	r3, [sp, #20]
 800e59c:	4d2e      	ldr	r5, [pc, #184]	; (800e658 <_svfiprintf_r+0x1e0>)
 800e59e:	7839      	ldrb	r1, [r7, #0]
 800e5a0:	2203      	movs	r2, #3
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f7f1 fe24 	bl	80001f0 <memchr>
 800e5a8:	b138      	cbz	r0, 800e5ba <_svfiprintf_r+0x142>
 800e5aa:	2340      	movs	r3, #64	; 0x40
 800e5ac:	1b40      	subs	r0, r0, r5
 800e5ae:	fa03 f000 	lsl.w	r0, r3, r0
 800e5b2:	9b04      	ldr	r3, [sp, #16]
 800e5b4:	4303      	orrs	r3, r0
 800e5b6:	3701      	adds	r7, #1
 800e5b8:	9304      	str	r3, [sp, #16]
 800e5ba:	7839      	ldrb	r1, [r7, #0]
 800e5bc:	4827      	ldr	r0, [pc, #156]	; (800e65c <_svfiprintf_r+0x1e4>)
 800e5be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5c2:	2206      	movs	r2, #6
 800e5c4:	1c7e      	adds	r6, r7, #1
 800e5c6:	f7f1 fe13 	bl	80001f0 <memchr>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d038      	beq.n	800e640 <_svfiprintf_r+0x1c8>
 800e5ce:	4b24      	ldr	r3, [pc, #144]	; (800e660 <_svfiprintf_r+0x1e8>)
 800e5d0:	bb13      	cbnz	r3, 800e618 <_svfiprintf_r+0x1a0>
 800e5d2:	9b03      	ldr	r3, [sp, #12]
 800e5d4:	3307      	adds	r3, #7
 800e5d6:	f023 0307 	bic.w	r3, r3, #7
 800e5da:	3308      	adds	r3, #8
 800e5dc:	9303      	str	r3, [sp, #12]
 800e5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5e0:	444b      	add	r3, r9
 800e5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e4:	e76d      	b.n	800e4c2 <_svfiprintf_r+0x4a>
 800e5e6:	fb05 3202 	mla	r2, r5, r2, r3
 800e5ea:	2001      	movs	r0, #1
 800e5ec:	460f      	mov	r7, r1
 800e5ee:	e7a6      	b.n	800e53e <_svfiprintf_r+0xc6>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	3701      	adds	r7, #1
 800e5f4:	9305      	str	r3, [sp, #20]
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	250a      	movs	r5, #10
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e600:	3a30      	subs	r2, #48	; 0x30
 800e602:	2a09      	cmp	r2, #9
 800e604:	d903      	bls.n	800e60e <_svfiprintf_r+0x196>
 800e606:	2b00      	cmp	r3, #0
 800e608:	d0c8      	beq.n	800e59c <_svfiprintf_r+0x124>
 800e60a:	9105      	str	r1, [sp, #20]
 800e60c:	e7c6      	b.n	800e59c <_svfiprintf_r+0x124>
 800e60e:	fb05 2101 	mla	r1, r5, r1, r2
 800e612:	2301      	movs	r3, #1
 800e614:	4607      	mov	r7, r0
 800e616:	e7f0      	b.n	800e5fa <_svfiprintf_r+0x182>
 800e618:	ab03      	add	r3, sp, #12
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	4622      	mov	r2, r4
 800e61e:	4b11      	ldr	r3, [pc, #68]	; (800e664 <_svfiprintf_r+0x1ec>)
 800e620:	a904      	add	r1, sp, #16
 800e622:	4640      	mov	r0, r8
 800e624:	f7fe f998 	bl	800c958 <_printf_float>
 800e628:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e62c:	4681      	mov	r9, r0
 800e62e:	d1d6      	bne.n	800e5de <_svfiprintf_r+0x166>
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	065b      	lsls	r3, r3, #25
 800e634:	f53f af35 	bmi.w	800e4a2 <_svfiprintf_r+0x2a>
 800e638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e63a:	b01d      	add	sp, #116	; 0x74
 800e63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e640:	ab03      	add	r3, sp, #12
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	4622      	mov	r2, r4
 800e646:	4b07      	ldr	r3, [pc, #28]	; (800e664 <_svfiprintf_r+0x1ec>)
 800e648:	a904      	add	r1, sp, #16
 800e64a:	4640      	mov	r0, r8
 800e64c:	f7fe fc3a 	bl	800cec4 <_printf_i>
 800e650:	e7ea      	b.n	800e628 <_svfiprintf_r+0x1b0>
 800e652:	bf00      	nop
 800e654:	0800e9b4 	.word	0x0800e9b4
 800e658:	0800e9ba 	.word	0x0800e9ba
 800e65c:	0800e9be 	.word	0x0800e9be
 800e660:	0800c959 	.word	0x0800c959
 800e664:	0800e3c5 	.word	0x0800e3c5

0800e668 <__ascii_mbtowc>:
 800e668:	b082      	sub	sp, #8
 800e66a:	b901      	cbnz	r1, 800e66e <__ascii_mbtowc+0x6>
 800e66c:	a901      	add	r1, sp, #4
 800e66e:	b142      	cbz	r2, 800e682 <__ascii_mbtowc+0x1a>
 800e670:	b14b      	cbz	r3, 800e686 <__ascii_mbtowc+0x1e>
 800e672:	7813      	ldrb	r3, [r2, #0]
 800e674:	600b      	str	r3, [r1, #0]
 800e676:	7812      	ldrb	r2, [r2, #0]
 800e678:	1c10      	adds	r0, r2, #0
 800e67a:	bf18      	it	ne
 800e67c:	2001      	movne	r0, #1
 800e67e:	b002      	add	sp, #8
 800e680:	4770      	bx	lr
 800e682:	4610      	mov	r0, r2
 800e684:	e7fb      	b.n	800e67e <__ascii_mbtowc+0x16>
 800e686:	f06f 0001 	mvn.w	r0, #1
 800e68a:	e7f8      	b.n	800e67e <__ascii_mbtowc+0x16>

0800e68c <memmove>:
 800e68c:	4288      	cmp	r0, r1
 800e68e:	b510      	push	{r4, lr}
 800e690:	eb01 0302 	add.w	r3, r1, r2
 800e694:	d807      	bhi.n	800e6a6 <memmove+0x1a>
 800e696:	1e42      	subs	r2, r0, #1
 800e698:	4299      	cmp	r1, r3
 800e69a:	d00a      	beq.n	800e6b2 <memmove+0x26>
 800e69c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e6a4:	e7f8      	b.n	800e698 <memmove+0xc>
 800e6a6:	4283      	cmp	r3, r0
 800e6a8:	d9f5      	bls.n	800e696 <memmove+0xa>
 800e6aa:	1881      	adds	r1, r0, r2
 800e6ac:	1ad2      	subs	r2, r2, r3
 800e6ae:	42d3      	cmn	r3, r2
 800e6b0:	d100      	bne.n	800e6b4 <memmove+0x28>
 800e6b2:	bd10      	pop	{r4, pc}
 800e6b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e6bc:	e7f7      	b.n	800e6ae <memmove+0x22>

0800e6be <_realloc_r>:
 800e6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c0:	4607      	mov	r7, r0
 800e6c2:	4614      	mov	r4, r2
 800e6c4:	460e      	mov	r6, r1
 800e6c6:	b921      	cbnz	r1, 800e6d2 <_realloc_r+0x14>
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e6ce:	f7fe b855 	b.w	800c77c <_malloc_r>
 800e6d2:	b922      	cbnz	r2, 800e6de <_realloc_r+0x20>
 800e6d4:	f7fe f804 	bl	800c6e0 <_free_r>
 800e6d8:	4625      	mov	r5, r4
 800e6da:	4628      	mov	r0, r5
 800e6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6de:	f000 f821 	bl	800e724 <_malloc_usable_size_r>
 800e6e2:	42a0      	cmp	r0, r4
 800e6e4:	d20f      	bcs.n	800e706 <_realloc_r+0x48>
 800e6e6:	4621      	mov	r1, r4
 800e6e8:	4638      	mov	r0, r7
 800e6ea:	f7fe f847 	bl	800c77c <_malloc_r>
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d0f2      	beq.n	800e6da <_realloc_r+0x1c>
 800e6f4:	4631      	mov	r1, r6
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	f7fd ffde 	bl	800c6b8 <memcpy>
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	4638      	mov	r0, r7
 800e700:	f7fd ffee 	bl	800c6e0 <_free_r>
 800e704:	e7e9      	b.n	800e6da <_realloc_r+0x1c>
 800e706:	4635      	mov	r5, r6
 800e708:	e7e7      	b.n	800e6da <_realloc_r+0x1c>

0800e70a <__ascii_wctomb>:
 800e70a:	b149      	cbz	r1, 800e720 <__ascii_wctomb+0x16>
 800e70c:	2aff      	cmp	r2, #255	; 0xff
 800e70e:	bf85      	ittet	hi
 800e710:	238a      	movhi	r3, #138	; 0x8a
 800e712:	6003      	strhi	r3, [r0, #0]
 800e714:	700a      	strbls	r2, [r1, #0]
 800e716:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e71a:	bf98      	it	ls
 800e71c:	2001      	movls	r0, #1
 800e71e:	4770      	bx	lr
 800e720:	4608      	mov	r0, r1
 800e722:	4770      	bx	lr

0800e724 <_malloc_usable_size_r>:
 800e724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e728:	1f18      	subs	r0, r3, #4
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	bfbc      	itt	lt
 800e72e:	580b      	ldrlt	r3, [r1, r0]
 800e730:	18c0      	addlt	r0, r0, r3
 800e732:	4770      	bx	lr

0800e734 <_init>:
 800e734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e736:	bf00      	nop
 800e738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e73a:	bc08      	pop	{r3}
 800e73c:	469e      	mov	lr, r3
 800e73e:	4770      	bx	lr

0800e740 <_fini>:
 800e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e742:	bf00      	nop
 800e744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e746:	bc08      	pop	{r3}
 800e748:	469e      	mov	lr, r3
 800e74a:	4770      	bx	lr
