
CarController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800e690  0800e690  0001e690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea10  0800ea10  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea10  0800ea10  0001ea10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea18  0800ea18  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea18  0800ea18  0001ea18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea1c  0800ea1c  0001ea1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800ea20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065fc  20000354  0800ed74  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006950  0800ed74  00026950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029c92  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f82  00000000  00000000  0004a016  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e70  00000000  00000000  0004ef98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c70  00000000  00000000  00050e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000787c  00000000  00000000  00052a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b60a  00000000  00000000  0005a2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f00e  00000000  00000000  000758fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011490c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a60  00000000  00000000  00114988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e674 	.word	0x0800e674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	0800e674 	.word	0x0800e674

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <i2c1_pisiRegister>:
uint8_t button_pressed = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	717b      	strb	r3, [r7, #5]
    naprava <<= 1;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	230a      	movs	r3, #10
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	1d7b      	adds	r3, r7, #5
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <i2c1_pisiRegister+0x40>)
 8000ee8:	f001 fb90 	bl	800260c <HAL_I2C_Mem_Write>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20004cd4 	.word	0x20004cd4

08000efc <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	603a      	str	r2, [r7, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	71bb      	strb	r3, [r7, #6]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	717b      	strb	r3, [r7, #5]
    if ((dolzina>1)&&(naprava==0x19))
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d906      	bls.n	8000f26 <i2c1_beriRegistre+0x2a>
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b19      	cmp	r3, #25
 8000f1c:	d103      	bne.n	8000f26 <i2c1_beriRegistre+0x2a>
        reg |= 0x80;
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f24:	71bb      	strb	r3, [r7, #6]
    naprava <<= 1;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	b298      	uxth	r0, r3
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	797a      	ldrb	r2, [r7, #5]
 8000f3a:	9202      	str	r2, [sp, #8]
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	4602      	mov	r2, r0
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <i2c1_beriRegistre+0x58>)
 8000f48:	f001 fc5a 	bl	8002800 <HAL_I2C_Mem_Read>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20004cd4 	.word	0x20004cd4

08000f58 <initOrientation>:

void initOrientation() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 fef7 	bl	8001d50 <HAL_Delay>

#define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
//#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

#if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
    i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR);
 8000f62:	2273      	movs	r2, #115	; 0x73
 8000f64:	214f      	movs	r1, #79	; 0x4f
 8000f66:	201e      	movs	r0, #30
 8000f68:	f7ff ffa6 	bl	8000eb8 <i2c1_pisiRegister>
#elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
    i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR);
#else
    for(;;); // V primeru napake, pocakamo tukaj
#endif
    HAL_Delay(100);
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f000 feef 	bl	8001d50 <HAL_Delay>

    i2c1_pisiRegister(0x19, 0x20, 0x37);
 8000f72:	2237      	movs	r2, #55	; 0x37
 8000f74:	2120      	movs	r1, #32
 8000f76:	2019      	movs	r0, #25
 8000f78:	f7ff ff9e 	bl	8000eb8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x22, 1u<<4u);
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	2122      	movs	r1, #34	; 0x22
 8000f80:	2019      	movs	r0, #25
 8000f82:	f7ff ff99 	bl	8000eb8 <i2c1_pisiRegister>
    i2c1_pisiRegister(0x19, 0x23, 0x98);
 8000f86:	2298      	movs	r2, #152	; 0x98
 8000f88:	2123      	movs	r1, #35	; 0x23
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f7ff ff94 	bl	8000eb8 <i2c1_pisiRegister>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <reading>:
            CDC_Transmit_FS(buf, length);
        }
    }

}*/
void reading(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <reading+0x24>)
 8000f9e:	f001 f9be 	bl	800231e <HAL_GPIO_TogglePin>
		i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[0], 6);
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <reading+0x28>)
 8000fa6:	2128      	movs	r1, #40	; 0x28
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f7ff ffa7 	bl	8000efc <i2c1_beriRegistre>
		vTaskDelay(100);
 8000fae:	2064      	movs	r0, #100	; 0x64
 8000fb0:	f009 f93c 	bl	800a22c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000fb4:	e7f0      	b.n	8000f98 <reading+0x4>
 8000fb6:	bf00      	nop
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	20004f98 	.word	0x20004f98

08000fc0 <button_reading>:
            buttonStable = 0;
        }
    }
}*/

void button_reading(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc8:	4812      	ldr	r0, [pc, #72]	; (8001014 <button_reading+0x54>)
 8000fca:	f001 f9a8 	bl	800231e <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4811      	ldr	r0, [pc, #68]	; (8001018 <button_reading+0x58>)
 8000fd2:	f001 f973 	bl	80022bc <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <button_reading+0x28>
            buttonStable++;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <button_reading+0x5c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <button_reading+0x5c>)
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e011      	b.n	800100c <button_reading+0x4c>
        }else {
            if(buttonStable > 5) {
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <button_reading+0x5c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d90a      	bls.n	8001006 <button_reading+0x46>

                if(sendingEnabled == 0) {
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <button_reading+0x60>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d103      	bne.n	8001000 <button_reading+0x40>
                    sendingEnabled = 1;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <button_reading+0x60>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e002      	b.n	8001006 <button_reading+0x46>
                }else{
                    button_pressed = 1;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <button_reading+0x64>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
                }
            }

            buttonStable = 0;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <button_reading+0x5c>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
        }
        vTaskDelay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f009 f90d 	bl	800a22c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001012:	e7d7      	b.n	8000fc4 <button_reading+0x4>
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40020000 	.word	0x40020000
 800101c:	20000370 	.word	0x20000370
 8001020:	20000374 	.word	0x20000374
 8001024:	20000375 	.word	0x20000375

08001028 <sensor_transmitting>:
	}
}

void sensor_transmitting(){
 8001028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af04      	add	r7, sp, #16
	for(;;){
		if(sendingEnabled==1){
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <sensor_transmitting+0xc8>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d150      	bne.n	80010da <sensor_transmitting+0xb2>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103c:	482d      	ldr	r0, [pc, #180]	; (80010f4 <sensor_transmitting+0xcc>)
 800103e:	f001 f96e 	bl	800231e <HAL_GPIO_TogglePin>
			int length = sprintf(&data_buf, "{\"type\":\"acc\", \"X\":%.3f, \"Y\":%.3f, \"Z\":%.3f}\n\r", ((float) meritev[0]) * 0.00012, ((float) -meritev[1]) * 0.00012, ((float) meritev[2]) * 0.00012);
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <sensor_transmitting+0xd0>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001050:	ee17 0a90 	vmov	r0, s15
 8001054:	f7ff fa80 	bl	8000558 <__aeabi_f2d>
 8001058:	a323      	add	r3, pc, #140	; (adr r3, 80010e8 <sensor_transmitting+0xc0>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff fad3 	bl	8000608 <__aeabi_dmul>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	4698      	mov	r8, r3
 8001068:	46a1      	mov	r9, r4
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <sensor_transmitting+0xd0>)
 800106c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001070:	425b      	negs	r3, r3
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	ee17 0a90 	vmov	r0, s15
 800107e:	f7ff fa6b 	bl	8000558 <__aeabi_f2d>
 8001082:	a319      	add	r3, pc, #100	; (adr r3, 80010e8 <sensor_transmitting+0xc0>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fabe 	bl	8000608 <__aeabi_dmul>
 800108c:	4603      	mov	r3, r0
 800108e:	460c      	mov	r4, r1
 8001090:	4625      	mov	r5, r4
 8001092:	461c      	mov	r4, r3
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <sensor_transmitting+0xd0>)
 8001096:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	ee17 0a90 	vmov	r0, s15
 80010a6:	f7ff fa57 	bl	8000558 <__aeabi_f2d>
 80010aa:	a30f      	add	r3, pc, #60	; (adr r3, 80010e8 <sensor_transmitting+0xc0>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff faaa 	bl	8000608 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010bc:	e9cd 4500 	strd	r4, r5, [sp]
 80010c0:	4642      	mov	r2, r8
 80010c2:	464b      	mov	r3, r9
 80010c4:	490d      	ldr	r1, [pc, #52]	; (80010fc <sensor_transmitting+0xd4>)
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <sensor_transmitting+0xd8>)
 80010c8:	f00b ffbe 	bl	800d048 <siprintf>
 80010cc:	6078      	str	r0, [r7, #4]
			CDC_Transmit_FS(&data_buf, length);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <sensor_transmitting+0xd8>)
 80010d6:	f00a fe0f 	bl	800bcf8 <CDC_Transmit_FS>


		}


		vTaskDelay(100);
 80010da:	2064      	movs	r0, #100	; 0x64
 80010dc:	f009 f8a6 	bl	800a22c <vTaskDelay>
		if(sendingEnabled==1){
 80010e0:	e7a6      	b.n	8001030 <sensor_transmitting+0x8>
 80010e2:	bf00      	nop
 80010e4:	f3af 8000 	nop.w
 80010e8:	4d551d69 	.word	0x4d551d69
 80010ec:	3f1f7510 	.word	0x3f1f7510
 80010f0:	20000374 	.word	0x20000374
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	20004f98 	.word	0x20004f98
 80010fc:	0800e69c 	.word	0x0800e69c
 8001100:	20004e34 	.word	0x20004e34

08001104 <button_transmitting>:
	}
}

void button_transmitting(){
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	for(;;){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800110a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <button_transmitting+0x58>)
 8001110:	f001 f905 	bl	800231e <HAL_GPIO_TogglePin>
		if(sendingEnabled==1){
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <button_transmitting+0x5c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d119      	bne.n	8001150 <button_transmitting+0x4c>
			if (button_pressed == 1){
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <button_transmitting+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d115      	bne.n	8001150 <button_transmitting+0x4c>
							int length = sprintf(&button_buf, "{\"type\":\"button\"}\n\r");
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <button_transmitting+0x64>)
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <button_transmitting+0x68>)
 8001128:	4615      	mov	r5, r2
 800112a:	461c      	mov	r4, r3
 800112c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112e:	6028      	str	r0, [r5, #0]
 8001130:	6069      	str	r1, [r5, #4]
 8001132:	60aa      	str	r2, [r5, #8]
 8001134:	60eb      	str	r3, [r5, #12]
 8001136:	6820      	ldr	r0, [r4, #0]
 8001138:	6128      	str	r0, [r5, #16]
 800113a:	2313      	movs	r3, #19
 800113c:	607b      	str	r3, [r7, #4]
							CDC_Transmit_FS(&button_buf, length);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4619      	mov	r1, r3
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <button_transmitting+0x64>)
 8001146:	f00a fdd7 	bl	800bcf8 <CDC_Transmit_FS>
							button_pressed = 0;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <button_transmitting+0x60>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
			}
		}

		vTaskDelay(500);
 8001150:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001154:	f009 f86a 	bl	800a22c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001158:	e7d7      	b.n	800110a <button_transmitting+0x6>
 800115a:	bf00      	nop
 800115c:	40020c00 	.word	0x40020c00
 8001160:	20000374 	.word	0x20000374
 8001164:	20000375 	.word	0x20000375
 8001168:	20004d28 	.word	0x20004d28
 800116c:	0800e6cc 	.word	0x0800e6cc

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fd79 	bl	8001c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 f87d 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f000 fa11 	bl	80015a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001182:	f000 f8fd 	bl	8001380 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001186:	f000 f92b 	bl	80013e0 <MX_I2S2_Init>
  MX_I2S3_Init();
 800118a:	f000 f957 	bl	800143c <MX_I2S3_Init>
  MX_SPI1_Init();
 800118e:	f000 f985 	bl	800149c <MX_SPI1_Init>
  MX_TIM4_Init();
 8001192:	f000 f9b9 	bl	8001508 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim4);
 8001196:	482a      	ldr	r0, [pc, #168]	; (8001240 <main+0xd0>)
 8001198:	f004 fd03 	bl	8005ba2 <HAL_TIM_Base_Start_IT>
    __HAL_I2C_ENABLE(&hi2c1);
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <main+0xd4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <main+0xd4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

    initOrientation();
 80011ac:	f7ff fed4 	bl	8000f58 <initOrientation>
    i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[0], 6);
 80011b0:	2306      	movs	r3, #6
 80011b2:	4a25      	ldr	r2, [pc, #148]	; (8001248 <main+0xd8>)
 80011b4:	2128      	movs	r1, #40	; 0x28
 80011b6:	2019      	movs	r0, #25
 80011b8:	f7ff fea0 	bl	8000efc <i2c1_beriRegistre>

    TaskHandle_t readingHandle = NULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
    TaskHandle_t button_readingHandle = NULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
    TaskHandle_t transmittingHandle = NULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]

    xTaskCreate(
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	2300      	movs	r3, #0
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d8:	491c      	ldr	r1, [pc, #112]	; (800124c <main+0xdc>)
 80011da:	481d      	ldr	r0, [pc, #116]	; (8001250 <main+0xe0>)
 80011dc:	f008 fee2 	bl	8009fa4 <xTaskCreate>
			256,      /* Stack size in words, not bytes. */
            ( void * ) 1,    /* Parameter passed into the task. */
            tskIDLE_PRIORITY,/* Priority at which the task is created. */
            &readingHandle );      /* Used to pass out the created task's handle. */

    xTaskCreate(
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	2300      	movs	r3, #0
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f0:	4918      	ldr	r1, [pc, #96]	; (8001254 <main+0xe4>)
 80011f2:	4819      	ldr	r0, [pc, #100]	; (8001258 <main+0xe8>)
 80011f4:	f008 fed6 	bl	8009fa4 <xTaskCreate>
			256,      /* Stack size in words, not bytes. */
    		( void * ) 1,    /* Parameter passed into the task. */
    		tskIDLE_PRIORITY,/* Priority at which the task is created. */
    		&button_readingHandle );      /* Used to pass out the created task's handle. */

    xTaskCreate(
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001206:	4915      	ldr	r1, [pc, #84]	; (800125c <main+0xec>)
 8001208:	4815      	ldr	r0, [pc, #84]	; (8001260 <main+0xf0>)
 800120a:	f008 fecb 	bl	8009fa4 <xTaskCreate>
			256,      /* Stack size in words, not bytes. */
    		( void * ) 1,    /* Parameter passed into the task. */
    		tskIDLE_PRIORITY+1,/* Priority at which the task is created. */
    		&transmittingHandle );      /* Used to pass out the created task's handle. */

    xTaskCreate(
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2301      	movs	r3, #1
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121c:	4911      	ldr	r1, [pc, #68]	; (8001264 <main+0xf4>)
 800121e:	4812      	ldr	r0, [pc, #72]	; (8001268 <main+0xf8>)
 8001220:	f008 fec0 	bl	8009fa4 <xTaskCreate>
       		tskIDLE_PRIORITY+1,/* Priority at which the task is created. */
       		&transmittingHandle );      /* Used to pass out the created task's handle. */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001224:	f007 ffa0 	bl	8009168 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001228:	4a10      	ldr	r2, [pc, #64]	; (800126c <main+0xfc>)
 800122a:	2100      	movs	r1, #0
 800122c:	4810      	ldr	r0, [pc, #64]	; (8001270 <main+0x100>)
 800122e:	f007 ffcf 	bl	80091d0 <osThreadNew>
 8001232:	4602      	mov	r2, r0
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <main+0x104>)
 8001236:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001238:	f009 f82c 	bl	800a294 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800123c:	e7fe      	b.n	800123c <main+0xcc>
 800123e:	bf00      	nop
 8001240:	20004c94 	.word	0x20004c94
 8001244:	20004cd4 	.word	0x20004cd4
 8001248:	20004f98 	.word	0x20004f98
 800124c:	0800e6e0 	.word	0x0800e6e0
 8001250:	08000f95 	.word	0x08000f95
 8001254:	0800e6e8 	.word	0x0800e6e8
 8001258:	08000fc1 	.word	0x08000fc1
 800125c:	0800e6f8 	.word	0x0800e6f8
 8001260:	08001105 	.word	0x08001105
 8001264:	0800e70c 	.word	0x0800e70c
 8001268:	08001029 	.word	0x08001029
 800126c:	0800e778 	.word	0x0800e778
 8001270:	08001785 	.word	0x08001785
 8001274:	20004c90 	.word	0x20004c90

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b09a      	sub	sp, #104	; 0x68
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f00b f9c1 	bl	800c60e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <SystemClock_Config+0x100>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a30      	ldr	r2, [pc, #192]	; (8001378 <SystemClock_Config+0x100>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <SystemClock_Config+0x100>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <SystemClock_Config+0x104>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2a      	ldr	r2, [pc, #168]	; (800137c <SystemClock_Config+0x104>)
 80012d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <SystemClock_Config+0x104>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e6:	2301      	movs	r3, #1
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012fe:	23a8      	movs	r3, #168	; 0xa8
 8001300:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001302:	2304      	movs	r3, #4
 8001304:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001306:	2307      	movs	r3, #7
 8001308:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fe1c 	bl	8004f4c <HAL_RCC_OscConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800131a:	f000 fa3d 	bl	8001798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131e:	230f      	movs	r3, #15
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	2102      	movs	r1, #2
 800133a:	4618      	mov	r0, r3
 800133c:	f004 f876 	bl	800542c <HAL_RCC_ClockConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001346:	f000 fa27 	bl	8001798 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800134a:	2301      	movs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800134e:	23c8      	movs	r3, #200	; 0xc8
 8001350:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001352:	2305      	movs	r3, #5
 8001354:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fa42 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800136a:	f000 fa15 	bl	8001798 <Error_Handler>
  }
}
 800136e:	bf00      	nop
 8001370:	3768      	adds	r7, #104	; 0x68
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_I2C1_Init+0x54>)
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <MX_I2C1_Init+0x58>)
 8001388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_I2C1_Init+0x54>)
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <MX_I2C1_Init+0x5c>)
 800138e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_I2C1_Init+0x54>)
 8001392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001396:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_I2C1_Init+0x54>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_I2C1_Init+0x54>)
 80013a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_I2C1_Init+0x54>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_I2C1_Init+0x54>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_I2C1_Init+0x54>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_I2C1_Init+0x54>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_I2C1_Init+0x54>)
 80013c0:	f000 ffec 	bl	800239c <HAL_I2C_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80013ca:	f000 f9e5 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20004cd4 	.word	0x20004cd4
 80013d8:	40005400 	.word	0x40005400
 80013dc:	00061a80 	.word	0x00061a80

080013e0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_I2S2_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <MX_I2S2_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_I2S2_Init+0x50>)
 80013ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_I2S2_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <MX_I2S2_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_I2S2_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_I2S2_Init+0x50>)
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <MX_I2S2_Init+0x58>)
 8001408:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_I2S2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_I2S2_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_I2S2_Init+0x50>)
 8001418:	2201      	movs	r2, #1
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_I2S2_Init+0x50>)
 800141e:	f001 ff71 	bl	8003304 <HAL_I2S_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 f9b6 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20004fa0 	.word	0x20004fa0
 8001434:	40003800 	.word	0x40003800
 8001438:	00017700 	.word	0x00017700

0800143c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_I2S3_Init+0x54>)
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <MX_I2S3_Init+0x58>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_I2S3_Init+0x54>)
 8001448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_I2S3_Init+0x54>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_I2S3_Init+0x54>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_I2S3_Init+0x54>)
 800145c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001460:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_I2S3_Init+0x54>)
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <MX_I2S3_Init+0x5c>)
 8001466:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_I2S3_Init+0x54>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_I2S3_Init+0x54>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_I2S3_Init+0x54>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_I2S3_Init+0x54>)
 800147c:	f001 ff42 	bl	8003304 <HAL_I2S_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001486:	f000 f987 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20004fe8 	.word	0x20004fe8
 8001494:	40003c00 	.word	0x40003c00
 8001498:	00017700 	.word	0x00017700

0800149c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_SPI1_Init+0x64>)
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <MX_SPI1_Init+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_SPI1_Init+0x64>)
 80014a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_SPI1_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_SPI1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_SPI1_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_SPI1_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_SPI1_Init+0x64>)
 80014c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_SPI1_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_SPI1_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_SPI1_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_SPI1_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_SPI1_Init+0x64>)
 80014e8:	220a      	movs	r2, #10
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_SPI1_Init+0x64>)
 80014ee:	f004 fac9 	bl	8005a84 <HAL_SPI_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014f8:	f000 f94e 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20004f40 	.word	0x20004f40
 8001504:	40013000 	.word	0x40013000

08001508 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_TIM4_Init+0x94>)
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <MX_TIM4_Init+0x98>)
 8001528:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_TIM4_Init+0x94>)
 800152c:	2253      	movs	r2, #83	; 0x53
 800152e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_TIM4_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_TIM4_Init+0x94>)
 8001538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800153c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_TIM4_Init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_TIM4_Init+0x94>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800154a:	4814      	ldr	r0, [pc, #80]	; (800159c <MX_TIM4_Init+0x94>)
 800154c:	f004 fafe 	bl	8005b4c <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001556:	f000 f91f 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_TIM4_Init+0x94>)
 8001568:	f004 fc47 	bl	8005dfa <HAL_TIM_ConfigClockSource>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 f911 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_TIM4_Init+0x94>)
 8001584:	f004 fe3c 	bl	8006200 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800158e:	f000 f903 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20004c94 	.word	0x20004c94
 80015a0:	40000800 	.word	0x40000800

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <MX_GPIO_Init+0x1c4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a69      	ldr	r2, [pc, #420]	; (8001768 <MX_GPIO_Init+0x1c4>)
 80015c4:	f043 0310 	orr.w	r3, r3, #16
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <MX_GPIO_Init+0x1c4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <MX_GPIO_Init+0x1c4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a62      	ldr	r2, [pc, #392]	; (8001768 <MX_GPIO_Init+0x1c4>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b60      	ldr	r3, [pc, #384]	; (8001768 <MX_GPIO_Init+0x1c4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <MX_GPIO_Init+0x1c4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a5b      	ldr	r2, [pc, #364]	; (8001768 <MX_GPIO_Init+0x1c4>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b59      	ldr	r3, [pc, #356]	; (8001768 <MX_GPIO_Init+0x1c4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b55      	ldr	r3, [pc, #340]	; (8001768 <MX_GPIO_Init+0x1c4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a54      	ldr	r2, [pc, #336]	; (8001768 <MX_GPIO_Init+0x1c4>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b52      	ldr	r3, [pc, #328]	; (8001768 <MX_GPIO_Init+0x1c4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <MX_GPIO_Init+0x1c4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a4d      	ldr	r2, [pc, #308]	; (8001768 <MX_GPIO_Init+0x1c4>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <MX_GPIO_Init+0x1c4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <MX_GPIO_Init+0x1c4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a46      	ldr	r2, [pc, #280]	; (8001768 <MX_GPIO_Init+0x1c4>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <MX_GPIO_Init+0x1c4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2108      	movs	r1, #8
 8001666:	4841      	ldr	r0, [pc, #260]	; (800176c <MX_GPIO_Init+0x1c8>)
 8001668:	f000 fe40 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2101      	movs	r1, #1
 8001670:	483f      	ldr	r0, [pc, #252]	; (8001770 <MX_GPIO_Init+0x1cc>)
 8001672:	f000 fe3b 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001676:	2200      	movs	r2, #0
 8001678:	f24f 0110 	movw	r1, #61456	; 0xf010
 800167c:	483d      	ldr	r0, [pc, #244]	; (8001774 <MX_GPIO_Init+0x1d0>)
 800167e:	f000 fe35 	bl	80022ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001682:	2304      	movs	r3, #4
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	4835      	ldr	r0, [pc, #212]	; (800176c <MX_GPIO_Init+0x1c8>)
 8001696:	f000 fc8f 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800169a:	2308      	movs	r3, #8
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	482e      	ldr	r0, [pc, #184]	; (800176c <MX_GPIO_Init+0x1c8>)
 80016b2:	f000 fc81 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 80016b6:	2310      	movs	r3, #16
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_GPIO_Init+0x1d4>)
 80016bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4828      	ldr	r0, [pc, #160]	; (800176c <MX_GPIO_Init+0x1c8>)
 80016ca:	f000 fc75 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin|MEMS_INT2_Pin;
 80016ce:	2322      	movs	r3, #34	; 0x22
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <MX_GPIO_Init+0x1d8>)
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4822      	ldr	r0, [pc, #136]	; (800176c <MX_GPIO_Init+0x1c8>)
 80016e2:	f000 fc69 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <MX_GPIO_Init+0x1cc>)
 80016fe:	f000 fc5b 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001702:	2301      	movs	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_GPIO_Init+0x1d8>)
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	481a      	ldr	r0, [pc, #104]	; (8001780 <MX_GPIO_Init+0x1dc>)
 8001716:	f000 fc4f 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800171a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800171e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <MX_GPIO_Init+0x1d0>)
 8001734:	f000 fc40 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001738:	2320      	movs	r3, #32
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	480a      	ldr	r0, [pc, #40]	; (8001774 <MX_GPIO_Init+0x1d0>)
 800174c:	f000 fc34 	bl	8001fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2105      	movs	r1, #5
 8001754:	200a      	movs	r0, #10
 8001756:	f000 fbf8 	bl	8001f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800175a:	200a      	movs	r0, #10
 800175c:	f000 fc11 	bl	8001f82 <HAL_NVIC_EnableIRQ>

}
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40021000 	.word	0x40021000
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	10110000 	.word	0x10110000
 800177c:	10120000 	.word	0x10120000
 8001780:	40020000 	.word	0x40020000

08001784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800178c:	f00a f9f6 	bl	800bb7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001790:	2001      	movs	r0, #1
 8001792:	f007 fdc3 	bl	800931c <osDelay>
 8001796:	e7fb      	b.n	8001790 <StartDefaultTask+0xc>

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179e:	e7fe      	b.n	800179e <Error_Handler+0x6>

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_MspInit+0x54>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_MspInit+0x54>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x54>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_MspInit+0x54>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_MspInit+0x54>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_MspInit+0x54>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	210f      	movs	r1, #15
 80017e2:	f06f 0001 	mvn.w	r0, #1
 80017e6:	f000 fbb0 	bl	8001f4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_I2C_MspInit+0x84>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12c      	bne.n	8001874 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_I2C_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_I2C_MspInit+0x88>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_I2C_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001836:	f44f 7310 	mov.w	r3, #576	; 0x240
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001840:	2301      	movs	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001848:	2304      	movs	r3, #4
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <HAL_I2C_MspInit+0x8c>)
 8001854:	f000 fbb0 	bl	8001fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_I2C_MspInit+0x88>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <HAL_I2C_MspInit+0x88>)
 8001862:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_I2C_MspInit+0x88>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40005400 	.word	0x40005400
 8001880:	40023800 	.word	0x40023800
 8001884:	40020400 	.word	0x40020400

08001888 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a59      	ldr	r2, [pc, #356]	; (8001a0c <HAL_I2S_MspInit+0x184>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d15b      	bne.n	8001962 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a50      	ldr	r2, [pc, #320]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b4e      	ldr	r3, [pc, #312]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a49      	ldr	r2, [pc, #292]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018fe:	2304      	movs	r3, #4
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800190e:	2306      	movs	r3, #6
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	483e      	ldr	r0, [pc, #248]	; (8001a14 <HAL_I2S_MspInit+0x18c>)
 800191a:	f000 fb4d 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800191e:	2308      	movs	r3, #8
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800192e:	2305      	movs	r3, #5
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	4836      	ldr	r0, [pc, #216]	; (8001a14 <HAL_I2S_MspInit+0x18c>)
 800193a:	f000 fb3d 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800193e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001950:	2305      	movs	r3, #5
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	482f      	ldr	r0, [pc, #188]	; (8001a18 <HAL_I2S_MspInit+0x190>)
 800195c:	f000 fb2c 	bl	8001fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001960:	e04f      	b.n	8001a02 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <HAL_I2S_MspInit+0x194>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d14a      	bne.n	8001a02 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 8001976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197a:	6413      	str	r3, [r2, #64]	; 0x40
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_I2S_MspInit+0x188>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019c0:	2310      	movs	r3, #16
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019d0:	2306      	movs	r3, #6
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	4811      	ldr	r0, [pc, #68]	; (8001a20 <HAL_I2S_MspInit+0x198>)
 80019dc:	f000 faec 	bl	8001fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80019e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019f2:	2306      	movs	r3, #6
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_I2S_MspInit+0x18c>)
 80019fe:	f000 fadb 	bl	8001fb8 <HAL_GPIO_Init>
}
 8001a02:	bf00      	nop
 8001a04:	3738      	adds	r7, #56	; 0x38
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40003800 	.word	0x40003800
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020800 	.word	0x40020800
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40003c00 	.word	0x40003c00
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_SPI_MspInit+0x84>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12b      	bne.n	8001a9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_SPI_MspInit+0x88>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a7e:	23e0      	movs	r3, #224	; 0xe0
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a9a:	f000 fa8d 	bl	8001fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40013000 	.word	0x40013000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d115      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_TIM_Base_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	201e      	movs	r0, #30
 8001ae8:	f000 fa2f 	bl	8001f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001aec:	201e      	movs	r0, #30
 8001aee:	f000 fa48 	bl	8001f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40000800 	.word	0x40000800
 8001b00:	40023800 	.word	0x40023800

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <NMI_Handler+0x4>

08001b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <MemManage_Handler+0x4>

08001b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 f8ec 	bl	8001d10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b38:	f008 ffe2 	bl	800ab00 <xTaskGetSchedulerState>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d001      	beq.n	8001b46 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b42:	f009 fdb9 	bl	800b6b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b4e:	2010      	movs	r0, #16
 8001b50:	f000 fc00 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <TIM4_IRQHandler+0x10>)
 8001b5e:	f004 f844 	bl	8005bea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20004c94 	.word	0x20004c94

08001b6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <OTG_FS_IRQHandler+0x10>)
 8001b72:	f002 f9b7 	bl	8003ee4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20006544 	.word	0x20006544

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f00a fce8 	bl	800c584 <__errno>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20020000 	.word	0x20020000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	20000378 	.word	0x20000378
 8001be8:	20006950 	.word	0x20006950

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <SystemInit+0x28>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <SystemInit+0x28>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SystemInit+0x28>)
 8001c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c06:	609a      	str	r2, [r3, #8]
#endif
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c1e:	e003      	b.n	8001c28 <LoopCopyDataInit>

08001c20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c26:	3104      	adds	r1, #4

08001c28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c28:	480b      	ldr	r0, [pc, #44]	; (8001c58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c30:	d3f6      	bcc.n	8001c20 <CopyDataInit>
  ldr  r2, =_sbss
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c34:	e002      	b.n	8001c3c <LoopFillZerobss>

08001c36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c38:	f842 3b04 	str.w	r3, [r2], #4

08001c3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c40:	d3f9      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c42:	f7ff ffd3 	bl	8001bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c46:	f00a fca3 	bl	800c590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4a:	f7ff fa91 	bl	8001170 <main>
  bx  lr    
 8001c4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c54:	0800ea20 	.word	0x0800ea20
  ldr  r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c5c:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8001c60:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8001c64:	20006950 	.word	0x20006950

08001c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC_IRQHandler>
	...

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_Init+0x40>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_Init+0x40>)
 8001c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_Init+0x40>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f000 f94d 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f000 f808 	bl	8001cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca0:	f7ff fd7e 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x54>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0x58>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f965 	bl	8001f9e <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cec:	f000 f92d 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x5c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	20000004 	.word	0x20000004

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20005030 	.word	0x20005030

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20005030 	.word	0x20005030

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_Delay+0x40>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000008 	.word	0x20000008

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	; (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff29 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff3e 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff31 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa2 	bl	8001ef0 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e159      	b.n	8002288 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f040 8148 	bne.w	8002282 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d00b      	beq.n	8002012 <HAL_GPIO_Init+0x5a>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002006:	2b11      	cmp	r3, #17
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b12      	cmp	r3, #18
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0xfc>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b12      	cmp	r3, #18
 80020b2:	d123      	bne.n	80020fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80a2 	beq.w	8002282 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_GPIO_Init+0x2e4>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a55      	ldr	r2, [pc, #340]	; (800229c <HAL_GPIO_Init+0x2e4>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_GPIO_Init+0x2e4>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215a:	4a51      	ldr	r2, [pc, #324]	; (80022a0 <HAL_GPIO_Init+0x2e8>)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a48      	ldr	r2, [pc, #288]	; (80022a4 <HAL_GPIO_Init+0x2ec>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x202>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a47      	ldr	r2, [pc, #284]	; (80022a8 <HAL_GPIO_Init+0x2f0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x1fe>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a46      	ldr	r2, [pc, #280]	; (80022ac <HAL_GPIO_Init+0x2f4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x1fa>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a45      	ldr	r2, [pc, #276]	; (80022b0 <HAL_GPIO_Init+0x2f8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x1f6>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a44      	ldr	r2, [pc, #272]	; (80022b4 <HAL_GPIO_Init+0x2fc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x1f2>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e008      	b.n	80021bc <HAL_GPIO_Init+0x204>
 80021aa:	2307      	movs	r3, #7
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x204>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x204>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x204>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x204>
 80021ba:	2300      	movs	r3, #0
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021cc:	4934      	ldr	r1, [pc, #208]	; (80022a0 <HAL_GPIO_Init+0x2e8>)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021da:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <HAL_GPIO_Init+0x300>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021fe:	4a2e      	ldr	r2, [pc, #184]	; (80022b8 <HAL_GPIO_Init+0x300>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_GPIO_Init+0x300>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002228:	4a23      	ldr	r2, [pc, #140]	; (80022b8 <HAL_GPIO_Init+0x300>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_GPIO_Init+0x300>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002252:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_GPIO_Init+0x300>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_GPIO_Init+0x300>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_GPIO_Init+0x300>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	f67f aea2 	bls.w	8001fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002290:	bf00      	nop
 8002292:	3724      	adds	r7, #36	; 0x24
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40013c00 	.word	0x40013c00

080022bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e001      	b.n	80022de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	887b      	ldrh	r3, [r7, #2]
 8002330:	401a      	ands	r2, r3
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	429a      	cmp	r2, r3
 8002336:	d104      	bne.n	8002342 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	041a      	lsls	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002340:	e002      	b.n	8002348 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f806 	bl	8002384 <HAL_GPIO_EXTI_Callback>
  }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e11f      	b.n	80025ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fa18 	bl	80017f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002400:	f003 f9de 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a7b      	ldr	r2, [pc, #492]	; (80025f8 <HAL_I2C_Init+0x25c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d807      	bhi.n	8002420 <HAL_I2C_Init+0x84>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a7a      	ldr	r2, [pc, #488]	; (80025fc <HAL_I2C_Init+0x260>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e006      	b.n	800242e <HAL_I2C_Init+0x92>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a77      	ldr	r2, [pc, #476]	; (8002600 <HAL_I2C_Init+0x264>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0db      	b.n	80025ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a72      	ldr	r2, [pc, #456]	; (8002604 <HAL_I2C_Init+0x268>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a64      	ldr	r2, [pc, #400]	; (80025f8 <HAL_I2C_Init+0x25c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d802      	bhi.n	8002470 <HAL_I2C_Init+0xd4>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	e009      	b.n	8002484 <HAL_I2C_Init+0xe8>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	4a63      	ldr	r2, [pc, #396]	; (8002608 <HAL_I2C_Init+0x26c>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	3301      	adds	r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4956      	ldr	r1, [pc, #344]	; (80025f8 <HAL_I2C_Init+0x25c>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d80d      	bhi.n	80024c0 <HAL_I2C_Init+0x124>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e59      	subs	r1, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	bf38      	it	cc
 80024bc:	2304      	movcc	r3, #4
 80024be:	e04f      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <HAL_I2C_Init+0x150>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e012      	b.n	8002512 <HAL_I2C_Init+0x176>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Init+0x17e>
 8002516:	2301      	movs	r3, #1
 8002518:	e022      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <HAL_I2C_Init+0x1a4>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e58      	subs	r0, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	440b      	add	r3, r1
 8002530:	fbb0 f3f3 	udiv	r3, r0, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Init+0x1c4>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	0099      	lsls	r1, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6809      	ldr	r1, [r1, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800258e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6911      	ldr	r1, [r2, #16]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	000186a0 	.word	0x000186a0
 80025fc:	001e847f 	.word	0x001e847f
 8002600:	003d08ff 	.word	0x003d08ff
 8002604:	431bde83 	.word	0x431bde83
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002626:	f7ff fb87 	bl	8001d38 <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b20      	cmp	r3, #32
 8002636:	f040 80d9 	bne.w	80027ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2319      	movs	r3, #25
 8002640:	2201      	movs	r2, #1
 8002642:	496d      	ldr	r1, [pc, #436]	; (80027f8 <HAL_I2C_Mem_Write+0x1ec>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fc7f 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	e0cc      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Mem_Write+0x56>
 800265e:	2302      	movs	r3, #2
 8002660:	e0c5      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d007      	beq.n	8002688 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2221      	movs	r2, #33	; 0x21
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a4d      	ldr	r2, [pc, #308]	; (80027fc <HAL_I2C_Mem_Write+0x1f0>)
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ca:	88f8      	ldrh	r0, [r7, #6]
 80026cc:	893a      	ldrh	r2, [r7, #8]
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4603      	mov	r3, r0
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fab6 	bl	8002c4c <I2C_RequestMemoryWrite>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d052      	beq.n	800278c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e081      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fd00 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <HAL_I2C_Mem_Write+0x180>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d017      	beq.n	800278c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1aa      	bne.n	80026ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fcec 	bl	8003176 <I2C_WaitOnBTFFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d107      	bne.n	80027bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e016      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00100002 	.word	0x00100002
 80027fc:	ffff0000 	.word	0xffff0000

08002800 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	460b      	mov	r3, r1
 8002814:	813b      	strh	r3, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800281a:	f7ff fa8d 	bl	8001d38 <HAL_GetTick>
 800281e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b20      	cmp	r3, #32
 800282a:	f040 8208 	bne.w	8002c3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2319      	movs	r3, #25
 8002834:	2201      	movs	r2, #1
 8002836:	497b      	ldr	r1, [pc, #492]	; (8002a24 <HAL_I2C_Mem_Read+0x224>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fb85 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
 8002846:	e1fb      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Mem_Read+0x56>
 8002852:	2302      	movs	r3, #2
 8002854:	e1f4      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d007      	beq.n	800287c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2222      	movs	r2, #34	; 0x22
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a5b      	ldr	r2, [pc, #364]	; (8002a28 <HAL_I2C_Mem_Read+0x228>)
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028be:	88f8      	ldrh	r0, [r7, #6]
 80028c0:	893a      	ldrh	r2, [r7, #8]
 80028c2:	8979      	ldrh	r1, [r7, #10]
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4603      	mov	r3, r0
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa52 	bl	8002d78 <I2C_RequestMemoryRead>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1b0      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d113      	bne.n	800290e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e184      	b.n	8002c18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	2b01      	cmp	r3, #1
 8002914:	d11b      	bne.n	800294e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e164      	b.n	8002c18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	2b02      	cmp	r3, #2
 8002954:	d11b      	bne.n	800298e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002964:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	e144      	b.n	8002c18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029a4:	e138      	b.n	8002c18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	f200 80f1 	bhi.w	8002b92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d123      	bne.n	8002a00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fc1b 	bl	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e139      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029fe:	e10b      	b.n	8002c18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d14e      	bne.n	8002aa6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4906      	ldr	r1, [pc, #24]	; (8002a2c <HAL_I2C_Mem_Read+0x22c>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fa98 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e10e      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
 8002a22:	bf00      	nop
 8002a24:	00100002 	.word	0x00100002
 8002a28:	ffff0000 	.word	0xffff0000
 8002a2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aa4:	e0b8      	b.n	8002c18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	2200      	movs	r2, #0
 8002aae:	4966      	ldr	r1, [pc, #408]	; (8002c48 <HAL_I2C_Mem_Read+0x448>)
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fa49 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0bf      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2200      	movs	r2, #0
 8002b0a:	494f      	ldr	r1, [pc, #316]	; (8002c48 <HAL_I2C_Mem_Read+0x448>)
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fa1b 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e091      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b90:	e042      	b.n	8002c18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fb2e 	bl	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e04c      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d118      	bne.n	8002c18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f aec2 	bne.w	80029a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3728      	adds	r7, #40	; 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	00010004 	.word	0x00010004

08002c4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	817b      	strh	r3, [r7, #10]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	813b      	strh	r3, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f960 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9c:	d103      	bne.n	8002ca6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e05f      	b.n	8002d6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002caa:	897b      	ldrh	r3, [r7, #10]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	492d      	ldr	r1, [pc, #180]	; (8002d74 <I2C_RequestMemoryWrite+0x128>)
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f998 	bl	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04c      	b.n	8002d6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fa02 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e02b      	b.n	8002d6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d18:	893b      	ldrh	r3, [r7, #8]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]
 8002d22:	e021      	b.n	8002d68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d24:	893b      	ldrh	r3, [r7, #8]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f9dc 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00d      	beq.n	8002d5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d107      	bne.n	8002d5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e005      	b.n	8002d6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5e:	893b      	ldrh	r3, [r7, #8]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	00010002 	.word	0x00010002

08002d78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	817b      	strh	r3, [r7, #10]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	813b      	strh	r3, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002da0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f8c2 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd8:	d103      	bne.n	8002de2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0aa      	b.n	8002f3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	4952      	ldr	r1, [pc, #328]	; (8002f44 <I2C_RequestMemoryRead+0x1cc>)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f8fa 	bl	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e097      	b.n	8002f3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	6a39      	ldr	r1, [r7, #32]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f964 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d107      	bne.n	8002e4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e076      	b.n	8002f3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e54:	893b      	ldrh	r3, [r7, #8]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	611a      	str	r2, [r3, #16]
 8002e5e:	e021      	b.n	8002ea4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e60:	893b      	ldrh	r3, [r7, #8]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	6a39      	ldr	r1, [r7, #32]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f93e 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d107      	bne.n	8002e96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e050      	b.n	8002f3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e9a:	893b      	ldrh	r3, [r7, #8]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	6a39      	ldr	r1, [r7, #32]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f923 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d107      	bne.n	8002ecc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e035      	b.n	8002f3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ede:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f82b 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	d103      	bne.n	8002f10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e013      	b.n	8002f3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f14:	897b      	ldrh	r3, [r7, #10]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	4906      	ldr	r1, [pc, #24]	; (8002f44 <I2C_RequestMemoryRead+0x1cc>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f863 	bl	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	00010002 	.word	0x00010002

08002f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f58:	e025      	b.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f60:	d021      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f62:	f7fe fee9 	bl	8001d38 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d302      	bcc.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d116      	bne.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f043 0220 	orr.w	r2, r3, #32
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e023      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10d      	bne.n	8002fcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	e00c      	b.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d0b6      	beq.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003004:	e051      	b.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d123      	bne.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003024:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800302e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e046      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003064:	d021      	beq.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe fe67 	bl	8001d38 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d116      	bne.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e020      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10c      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e00b      	b.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	43da      	mvns	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4013      	ands	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d18d      	bne.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003100:	e02d      	b.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f8ce 	bl	80032a4 <I2C_IsAcknowledgeFailed>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e02d      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003118:	d021      	beq.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe fe0d 	bl	8001d38 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e007      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d1ca      	bne.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003182:	e02d      	b.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f88d 	bl	80032a4 <I2C_IsAcknowledgeFailed>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e02d      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319a:	d021      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7fe fdcc 	bl	8001d38 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d1ca      	bne.n	8003184 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003204:	e042      	b.n	800328c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b10      	cmp	r3, #16
 8003212:	d119      	bne.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0210 	mvn.w	r2, #16
 800321c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e029      	b.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7fe fd76 	bl	8001d38 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d116      	bne.n	800328c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d1b5      	bne.n	8003206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ba:	d11b      	bne.n	80032f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0204 	orr.w	r2, r3, #4
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e128      	b.n	8003568 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a90      	ldr	r2, [pc, #576]	; (8003570 <HAL_I2S_Init+0x26c>)
 800332e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fe faa9 	bl	8001888 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800334c:	f023 030f 	bic.w	r3, r3, #15
 8003350:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2202      	movs	r2, #2
 8003358:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d060      	beq.n	8003424 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800336a:	2310      	movs	r3, #16
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	e001      	b.n	8003374 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b20      	cmp	r3, #32
 800337a:	d802      	bhi.n	8003382 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003382:	2001      	movs	r0, #1
 8003384:	f002 fb20 	bl	80059c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003388:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003392:	d125      	bne.n	80033e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	461a      	mov	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	3305      	adds	r3, #5
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e01f      	b.n	80033fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	461a      	mov	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	3305      	adds	r3, #5
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	e00e      	b.n	80033fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	461a      	mov	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	3305      	adds	r3, #5
 80033fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4a5c      	ldr	r2, [pc, #368]	; (8003574 <HAL_I2S_Init+0x270>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e003      	b.n	800342c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003424:	2302      	movs	r3, #2
 8003426:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d902      	bls.n	8003438 <HAL_I2S_Init+0x134>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2bff      	cmp	r3, #255	; 0xff
 8003436:	d907      	bls.n	8003448 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	f043 0210 	orr.w	r2, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e08f      	b.n	8003568 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	ea42 0103 	orr.w	r1, r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	430a      	orrs	r2, r1
 800345a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003466:	f023 030f 	bic.w	r3, r3, #15
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6851      	ldr	r1, [r2, #4]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6892      	ldr	r2, [r2, #8]
 8003472:	4311      	orrs	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68d2      	ldr	r2, [r2, #12]
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6992      	ldr	r2, [r2, #24]
 800347e:	430a      	orrs	r2, r1
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d161      	bne.n	8003558 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a38      	ldr	r2, [pc, #224]	; (8003578 <HAL_I2S_Init+0x274>)
 8003498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a37      	ldr	r2, [pc, #220]	; (800357c <HAL_I2S_Init+0x278>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_I2S_Init+0x1a4>
 80034a4:	4b36      	ldr	r3, [pc, #216]	; (8003580 <HAL_I2S_Init+0x27c>)
 80034a6:	e001      	b.n	80034ac <HAL_I2S_Init+0x1a8>
 80034a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4932      	ldr	r1, [pc, #200]	; (800357c <HAL_I2S_Init+0x278>)
 80034b4:	428a      	cmp	r2, r1
 80034b6:	d101      	bne.n	80034bc <HAL_I2S_Init+0x1b8>
 80034b8:	4a31      	ldr	r2, [pc, #196]	; (8003580 <HAL_I2S_Init+0x27c>)
 80034ba:	e001      	b.n	80034c0 <HAL_I2S_Init+0x1bc>
 80034bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034c4:	f023 030f 	bic.w	r3, r3, #15
 80034c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2b      	ldr	r2, [pc, #172]	; (800357c <HAL_I2S_Init+0x278>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <HAL_I2S_Init+0x1d4>
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_I2S_Init+0x27c>)
 80034d6:	e001      	b.n	80034dc <HAL_I2S_Init+0x1d8>
 80034d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034dc:	2202      	movs	r2, #2
 80034de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a25      	ldr	r2, [pc, #148]	; (800357c <HAL_I2S_Init+0x278>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_I2S_Init+0x1ea>
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_I2S_Init+0x27c>)
 80034ec:	e001      	b.n	80034f2 <HAL_I2S_Init+0x1ee>
 80034ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fe:	d003      	beq.n	8003508 <HAL_I2S_Init+0x204>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d103      	bne.n	8003510 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	e001      	b.n	8003514 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	b299      	uxth	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800352a:	4303      	orrs	r3, r0
 800352c:	b29b      	uxth	r3, r3
 800352e:	430b      	orrs	r3, r1
 8003530:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003532:	4313      	orrs	r3, r2
 8003534:	b29a      	uxth	r2, r3
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	4313      	orrs	r3, r2
 800353a:	b29b      	uxth	r3, r3
 800353c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003540:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a0d      	ldr	r2, [pc, #52]	; (800357c <HAL_I2S_Init+0x278>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_I2S_Init+0x24c>
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_I2S_Init+0x27c>)
 800354e:	e001      	b.n	8003554 <HAL_I2S_Init+0x250>
 8003550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003554:	897a      	ldrh	r2, [r7, #10]
 8003556:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	0800367b 	.word	0x0800367b
 8003574:	cccccccd 	.word	0xcccccccd
 8003578:	08003791 	.word	0x08003791
 800357c:	40003800 	.word	0x40003800
 8003580:	40003400 	.word	0x40003400

08003584 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	881a      	ldrh	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c9a      	adds	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10e      	bne.n	8003614 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003604:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ffb8 	bl	8003584 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	b292      	uxth	r2, r2
 8003630:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	1c9a      	adds	r2, r3, #2
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10e      	bne.n	8003672 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003662:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ff93 	bl	8003598 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b04      	cmp	r3, #4
 8003694:	d13a      	bne.n	800370c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d109      	bne.n	80036b4 <I2S_IRQHandler+0x3a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d102      	bne.n	80036b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ffb4 	bl	800361c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d126      	bne.n	800370c <I2S_IRQHandler+0x92>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d11f      	bne.n	800370c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f043 0202 	orr.w	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ff50 	bl	80035ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b03      	cmp	r3, #3
 8003716:	d136      	bne.n	8003786 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d109      	bne.n	8003736 <I2S_IRQHandler+0xbc>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d102      	bne.n	8003736 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ff45 	bl	80035c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b08      	cmp	r3, #8
 800373e:	d122      	bne.n	8003786 <I2S_IRQHandler+0x10c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d11b      	bne.n	8003786 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800375c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f043 0204 	orr.w	r2, r3, #4
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff13 	bl	80035ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4aa2      	ldr	r2, [pc, #648]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037aa:	4ba2      	ldr	r3, [pc, #648]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ac:	e001      	b.n	80037b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a9b      	ldr	r2, [pc, #620]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037c8:	4b9a      	ldr	r3, [pc, #616]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ca:	e001      	b.n	80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d004      	beq.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f040 8099 	bne.w	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d107      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f925 	bl	8003a4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9c8 	bl	8003bac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d13a      	bne.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d035      	beq.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a7e      	ldr	r2, [pc, #504]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800383a:	4b7e      	ldr	r3, [pc, #504]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800383c:	e001      	b.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800383e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4979      	ldr	r1, [pc, #484]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800384a:	428b      	cmp	r3, r1
 800384c:	d101      	bne.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800384e:	4b79      	ldr	r3, [pc, #484]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003850:	e001      	b.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f043 0202 	orr.w	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fe88 	bl	80035ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	f040 80be 	bne.w	8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80b8 	beq.w	8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a59      	ldr	r2, [pc, #356]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038ce:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038d0:	e001      	b.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4954      	ldr	r1, [pc, #336]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038de:	428b      	cmp	r3, r1
 80038e0:	d101      	bne.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038e2:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038e4:	e001      	b.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fe4a 	bl	80035ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003918:	e084      	b.n	8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b02      	cmp	r3, #2
 8003922:	d107      	bne.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8be 	bl	8003ab0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d107      	bne.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8fd 	bl	8003b48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d12f      	bne.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02a      	beq.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003970:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2e      	ldr	r2, [pc, #184]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800397e:	e001      	b.n	8003984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4929      	ldr	r1, [pc, #164]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800398c:	428b      	cmp	r3, r1
 800398e:	d101      	bne.n	8003994 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003990:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003992:	e001      	b.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800399c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f043 0202 	orr.w	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff fdfa 	bl	80035ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d131      	bne.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d02c      	beq.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039d6:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d8:	e001      	b.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4912      	ldr	r1, [pc, #72]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e6:	428b      	cmp	r3, r1
 80039e8:	d101      	bne.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ec:	e001      	b.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a06:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	f043 0204 	orr.w	r2, r3, #4
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fdc5 	bl	80035ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a22:	e000      	b.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a24:	bf00      	nop
}
 8003a26:	bf00      	nop
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40003800 	.word	0x40003800
 8003a34:	40003400 	.word	0x40003400

08003a38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	1c99      	adds	r1, r3, #2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d113      	bne.n	8003aa6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d106      	bne.n	8003aa6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ffc9 	bl	8003a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	1c99      	adds	r1, r3, #2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6251      	str	r1, [r2, #36]	; 0x24
 8003ac2:	8819      	ldrh	r1, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <I2SEx_TxISR_I2SExt+0x90>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <I2SEx_TxISR_I2SExt+0x22>
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <I2SEx_TxISR_I2SExt+0x94>)
 8003ad0:	e001      	b.n	8003ad6 <I2SEx_TxISR_I2SExt+0x26>
 8003ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d121      	bne.n	8003b36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <I2SEx_TxISR_I2SExt+0x90>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <I2SEx_TxISR_I2SExt+0x50>
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <I2SEx_TxISR_I2SExt+0x94>)
 8003afe:	e001      	b.n	8003b04 <I2SEx_TxISR_I2SExt+0x54>
 8003b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	490d      	ldr	r1, [pc, #52]	; (8003b40 <I2SEx_TxISR_I2SExt+0x90>)
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	d101      	bne.n	8003b14 <I2SEx_TxISR_I2SExt+0x64>
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <I2SEx_TxISR_I2SExt+0x94>)
 8003b12:	e001      	b.n	8003b18 <I2SEx_TxISR_I2SExt+0x68>
 8003b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ff81 	bl	8003a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40003800 	.word	0x40003800
 8003b44:	40003400 	.word	0x40003400

08003b48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68d8      	ldr	r0, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	1c99      	adds	r1, r3, #2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b60:	b282      	uxth	r2, r0
 8003b62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d113      	bne.n	8003ba4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ff4a 	bl	8003a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <I2SEx_RxISR_I2SExt+0x90>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <I2SEx_RxISR_I2SExt+0x16>
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <I2SEx_RxISR_I2SExt+0x94>)
 8003bc0:	e001      	b.n	8003bc6 <I2SEx_RxISR_I2SExt+0x1a>
 8003bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc6:	68d8      	ldr	r0, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	1c99      	adds	r1, r3, #2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bd2:	b282      	uxth	r2, r0
 8003bd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d121      	bne.n	8003c32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <I2SEx_RxISR_I2SExt+0x90>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <I2SEx_RxISR_I2SExt+0x50>
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <I2SEx_RxISR_I2SExt+0x94>)
 8003bfa:	e001      	b.n	8003c00 <I2SEx_RxISR_I2SExt+0x54>
 8003bfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	490d      	ldr	r1, [pc, #52]	; (8003c3c <I2SEx_RxISR_I2SExt+0x90>)
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	d101      	bne.n	8003c10 <I2SEx_RxISR_I2SExt+0x64>
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <I2SEx_RxISR_I2SExt+0x94>)
 8003c0e:	e001      	b.n	8003c14 <I2SEx_RxISR_I2SExt+0x68>
 8003c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff03 	bl	8003a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40003800 	.word	0x40003800
 8003c40:	40003400 	.word	0x40003400

08003c44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	b08f      	sub	sp, #60	; 0x3c
 8003c48:	af0a      	add	r7, sp, #40	; 0x28
 8003c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e10f      	b.n	8003e76 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f008 f987 	bl	800bf84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f002 fc4a 	bl	800652e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	687e      	ldr	r6, [r7, #4]
 8003ca2:	466d      	mov	r5, sp
 8003ca4:	f106 0410 	add.w	r4, r6, #16
 8003ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cb8:	1d33      	adds	r3, r6, #4
 8003cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cbc:	6838      	ldr	r0, [r7, #0]
 8003cbe:	f002 fb21 	bl	8006304 <USB_CoreInit>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0d0      	b.n	8003e76 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f002 fc38 	bl	8006550 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e04a      	b.n	8003d7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	333d      	adds	r3, #61	; 0x3d
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	333c      	adds	r3, #60	; 0x3c
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	b298      	uxth	r0, r3
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3342      	adds	r3, #66	; 0x42
 8003d22:	4602      	mov	r2, r0
 8003d24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	333f      	adds	r3, #63	; 0x3f
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3344      	adds	r3, #68	; 0x44
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3348      	adds	r3, #72	; 0x48
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3350      	adds	r3, #80	; 0x50
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3af      	bcc.n	8003ce6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e044      	b.n	8003e16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dfa:	7bfa      	ldrb	r2, [r7, #15]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	3301      	adds	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3b5      	bcc.n	8003d8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	687e      	ldr	r6, [r7, #4]
 8003e28:	466d      	mov	r5, sp
 8003e2a:	f106 0410 	add.w	r4, r6, #16
 8003e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e3e:	1d33      	adds	r3, r6, #4
 8003e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e42:	6838      	ldr	r0, [r7, #0]
 8003e44:	f002 fbae 	bl	80065a4 <USB_DevInit>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00d      	b.n	8003e76 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f003 fbf6 	bl	8007660 <USB_DevDisconnect>

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_PCD_Start+0x1c>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e020      	b.n	8003edc <HAL_PCD_Start+0x5e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d109      	bne.n	8003ebe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d005      	beq.n	8003ebe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f002 fb22 	bl	800650c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f003 fba6 	bl	800761e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b08d      	sub	sp, #52	; 0x34
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f003 fc64 	bl	80077c8 <USB_GetMode>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 839d 	bne.w	8004642 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 fbc8 	bl	80076a2 <USB_ReadInterrupts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8393 	beq.w	8004640 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f003 fbbf 	bl	80076a2 <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d107      	bne.n	8003f3e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f002 0202 	and.w	r2, r2, #2
 8003f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f003 fbad 	bl	80076a2 <USB_ReadInterrupts>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d161      	bne.n	8004016 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0210 	bic.w	r2, r2, #16
 8003f60:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 020f 	and.w	r2, r3, #15
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	0c5b      	lsrs	r3, r3, #17
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d124      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d035      	beq.n	8004006 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	6a38      	ldr	r0, [r7, #32]
 8003fae:	f003 fa13 	bl	80073d8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fbe:	441a      	add	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd0:	441a      	add	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	619a      	str	r2, [r3, #24]
 8003fd6:	e016      	b.n	8004006 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	0c5b      	lsrs	r3, r3, #17
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d110      	bne.n	8004006 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fea:	2208      	movs	r2, #8
 8003fec:	4619      	mov	r1, r3
 8003fee:	6a38      	ldr	r0, [r7, #32]
 8003ff0:	f003 f9f2 	bl	80073d8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004000:	441a      	add	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0210 	orr.w	r2, r2, #16
 8004014:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f003 fb41 	bl	80076a2 <USB_ReadInterrupts>
 8004020:	4603      	mov	r3, r0
 8004022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004026:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800402a:	d16e      	bne.n	800410a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f003 fb47 	bl	80076c8 <USB_ReadDevAllOutEpInterrupt>
 800403a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800403c:	e062      	b.n	8004104 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d057      	beq.n	80040f8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f003 fb6c 	bl	8007730 <USB_ReadDevOutEPInterrupt>
 8004058:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	461a      	mov	r2, r3
 8004072:	2301      	movs	r3, #1
 8004074:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fdb1 	bl	8004be0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	2308      	movs	r3, #8
 8004098:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800409a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 feab 	bl	8004df8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2310      	movs	r3, #16
 80040bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d4:	461a      	mov	r2, r3
 80040d6:	2320      	movs	r3, #32
 80040d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	461a      	mov	r2, r3
 80040f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	3301      	adds	r3, #1
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d199      	bne.n	800403e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f003 fac7 	bl	80076a2 <USB_ReadInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800411a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800411e:	f040 80c0 	bne.w	80042a2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f003 fae8 	bl	80076fc <USB_ReadDevAllInEpInterrupt>
 800412c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004132:	e0b2      	b.n	800429a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80a7 	beq.w	800428e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fb0e 	bl	800776c <USB_ReadDevInEPInterrupt>
 8004150:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d057      	beq.n	800420c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	2201      	movs	r2, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	43db      	mvns	r3, r3
 8004176:	69f9      	ldr	r1, [r7, #28]
 8004178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417c:	4013      	ands	r3, r2
 800417e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	2301      	movs	r3, #1
 8004190:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d132      	bne.n	8004200 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	3348      	adds	r3, #72	; 0x48
 80041aa:	6819      	ldr	r1, [r3, #0]
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4403      	add	r3, r0
 80041ba:	3344      	adds	r3, #68	; 0x44
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4419      	add	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4403      	add	r3, r0
 80041ce:	3348      	adds	r3, #72	; 0x48
 80041d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d113      	bne.n	8004200 <HAL_PCD_IRQHandler+0x31c>
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	3350      	adds	r3, #80	; 0x50
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d108      	bne.n	8004200 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041f8:	461a      	mov	r2, r3
 80041fa:	2101      	movs	r1, #1
 80041fc:	f003 fb16 	bl	800782c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	b2db      	uxtb	r3, r3
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f007 ff4b 	bl	800c0a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	461a      	mov	r2, r3
 8004224:	2308      	movs	r3, #8
 8004226:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423e:	461a      	mov	r2, r3
 8004240:	2310      	movs	r3, #16
 8004242:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425a:	461a      	mov	r2, r3
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	461a      	mov	r2, r3
 8004278:	2302      	movs	r3, #2
 800427a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fc1b 	bl	8004ac4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	3301      	adds	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	2b00      	cmp	r3, #0
 800429e:	f47f af49 	bne.w	8004134 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f003 f9fb 	bl	80076a2 <USB_ReadInterrupts>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b6:	d122      	bne.n	80042fe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d108      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042de:	2100      	movs	r1, #0
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fe27 	bl	8004f34 <HAL_PCDEx_LPM_Callback>
 80042e6:	e002      	b.n	80042ee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f007 ff47 	bl	800c17c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f003 f9cd 	bl	80076a2 <USB_ReadInterrupts>
 8004308:	4603      	mov	r3, r0
 800430a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004312:	d112      	bne.n	800433a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f007 ff03 	bl	800c130 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004338:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f003 f9af 	bl	80076a2 <USB_ReadInterrupts>
 8004344:	4603      	mov	r3, r0
 8004346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434e:	f040 80c7 	bne.w	80044e0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2110      	movs	r1, #16
 800436c:	4618      	mov	r0, r3
 800436e:	f002 fa7d 	bl	800686c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004372:	2300      	movs	r3, #0
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	e056      	b.n	8004426 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	461a      	mov	r2, r3
 8004386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800438a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043aa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800441e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	3301      	adds	r3, #1
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442c:	429a      	cmp	r2, r3
 800442e:	d3a3      	bcc.n	8004378 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004442:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	2b00      	cmp	r3, #0
 800444a:	d016      	beq.n	800447a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800445c:	f043 030b 	orr.w	r3, r3, #11
 8004460:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004472:	f043 030b 	orr.w	r3, r3, #11
 8004476:	6453      	str	r3, [r2, #68]	; 0x44
 8004478:	e015      	b.n	80044a6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800448c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004490:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a0:	f043 030b 	orr.w	r3, r3, #11
 80044a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80044b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044ca:	461a      	mov	r2, r3
 80044cc:	f003 f9ae 	bl	800782c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80044de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f003 f8dc 	bl	80076a2 <USB_ReadInterrupts>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f4:	d124      	bne.n	8004540 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f003 f972 	bl	80077e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f002 fa12 	bl	800692e <USB_GetDevSpeed>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681c      	ldr	r4, [r3, #0]
 8004516:	f001 f947 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 800451a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	4620      	mov	r0, r4
 8004526:	f001 ff4f 	bl	80063c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f007 fde1 	bl	800c0f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800453e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f003 f8ac 	bl	80076a2 <USB_ReadInterrupts>
 800454a:	4603      	mov	r3, r0
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10a      	bne.n	800456a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f007 fdbe 	bl	800c0d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f002 0208 	and.w	r2, r2, #8
 8004568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f003 f897 	bl	80076a2 <USB_ReadInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800457a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457e:	d10f      	bne.n	80045a0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	b2db      	uxtb	r3, r3
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f007 fe16 	bl	800c1bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800459e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f003 f87c 	bl	80076a2 <USB_ReadInterrupts>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b4:	d10f      	bne.n	80045d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	4619      	mov	r1, r3
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f007 fde9 	bl	800c198 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80045d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f003 f861 	bl	80076a2 <USB_ReadInterrupts>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d10a      	bne.n	8004602 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f007 fdf7 	bl	800c1e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f003 f84b 	bl	80076a2 <USB_ReadInterrupts>
 800460c:	4603      	mov	r3, r0
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b04      	cmp	r3, #4
 8004614:	d115      	bne.n	8004642 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f007 fde7 	bl	800c1fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	e000      	b.n	8004642 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004640:	bf00      	nop
    }
  }
}
 8004642:	3734      	adds	r7, #52	; 0x34
 8004644:	46bd      	mov	sp, r7
 8004646:	bd90      	pop	{r4, r7, pc}

08004648 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_PCD_SetAddress+0x1a>
 800465e:	2302      	movs	r3, #2
 8004660:	e013      	b.n	800468a <HAL_PCD_SetAddress+0x42>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f002 ffa9 	bl	80075d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	4608      	mov	r0, r1
 800469c:	4611      	mov	r1, r2
 800469e:	461a      	mov	r2, r3
 80046a0:	4603      	mov	r3, r0
 80046a2:	70fb      	strb	r3, [r7, #3]
 80046a4:	460b      	mov	r3, r1
 80046a6:	803b      	strh	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da0f      	bge.n	80046d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	f003 020f 	and.w	r2, r3, #15
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	3338      	adds	r3, #56	; 0x38
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	3304      	adds	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	705a      	strb	r2, [r3, #1]
 80046d6:	e00f      	b.n	80046f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	3304      	adds	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004704:	883a      	ldrh	r2, [r7, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	78ba      	ldrb	r2, [r7, #2]
 800470e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004722:	78bb      	ldrb	r3, [r7, #2]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d102      	bne.n	800472e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_PCD_EP_Open+0xaa>
 8004738:	2302      	movs	r3, #2
 800473a:	e00e      	b.n	800475a <HAL_PCD_EP_Open+0xc8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68f9      	ldr	r1, [r7, #12]
 800474a:	4618      	mov	r0, r3
 800474c:	f002 f914 	bl	8006978 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004758:	7afb      	ldrb	r3, [r7, #11]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800476e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004772:	2b00      	cmp	r3, #0
 8004774:	da0f      	bge.n	8004796 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f003 020f 	and.w	r2, r3, #15
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	3338      	adds	r3, #56	; 0x38
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4413      	add	r3, r2
 800478a:	3304      	adds	r3, #4
 800478c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	705a      	strb	r2, [r3, #1]
 8004794:	e00f      	b.n	80047b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	f003 020f 	and.w	r2, r3, #15
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	4413      	add	r3, r2
 80047ac:	3304      	adds	r3, #4
 80047ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_PCD_EP_Close+0x6e>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e00e      	b.n	80047ee <HAL_PCD_EP_Close+0x8c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	4618      	mov	r0, r3
 80047e0:	f002 f952 	bl	8006a88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	460b      	mov	r3, r1
 8004804:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004806:	7afb      	ldrb	r3, [r7, #11]
 8004808:	f003 020f 	and.w	r2, r3, #15
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	3304      	adds	r3, #4
 800481e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2200      	movs	r2, #0
 8004830:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004838:	7afb      	ldrb	r3, [r7, #11]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	b2da      	uxtb	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004852:	7afb      	ldrb	r3, [r7, #11]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6979      	ldr	r1, [r7, #20]
 800486a:	f002 fc2d 	bl	80070c8 <USB_EP0StartXfer>
 800486e:	e008      	b.n	8004882 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6979      	ldr	r1, [r7, #20]
 800487e:	f002 f9df 	bl	8006c40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	f003 020f 	and.w	r2, r3, #15
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	460b      	mov	r3, r1
 80048ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048cc:	7afb      	ldrb	r3, [r7, #11]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	3338      	adds	r3, #56	; 0x38
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	3304      	adds	r3, #4
 80048e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2200      	movs	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2201      	movs	r2, #1
 80048fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048fc:	7afb      	ldrb	r3, [r7, #11]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	b2da      	uxtb	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d102      	bne.n	8004916 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004916:	7afb      	ldrb	r3, [r7, #11]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	f002 fbcb 	bl	80070c8 <USB_EP0StartXfer>
 8004932:	e008      	b.n	8004946 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	6979      	ldr	r1, [r7, #20]
 8004942:	f002 f97d 	bl	8006c40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	f003 020f 	and.w	r2, r3, #15
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d901      	bls.n	800496e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e050      	b.n	8004a10 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800496e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004972:	2b00      	cmp	r3, #0
 8004974:	da0f      	bge.n	8004996 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	f003 020f 	and.w	r2, r3, #15
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	3338      	adds	r3, #56	; 0x38
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	4413      	add	r3, r2
 800498a:	3304      	adds	r3, #4
 800498c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	705a      	strb	r2, [r3, #1]
 8004994:	e00d      	b.n	80049b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	3304      	adds	r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_PCD_EP_SetStall+0x82>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e01e      	b.n	8004a10 <HAL_PCD_EP_SetStall+0xc0>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f002 fd22 	bl	800742a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	b2d9      	uxtb	r1, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a00:	461a      	mov	r2, r3
 8004a02:	f002 ff13 	bl	800782c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	f003 020f 	and.w	r2, r3, #15
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d901      	bls.n	8004a36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e042      	b.n	8004abc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da0f      	bge.n	8004a5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 020f 	and.w	r2, r3, #15
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3338      	adds	r3, #56	; 0x38
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	705a      	strb	r2, [r3, #1]
 8004a5c:	e00f      	b.n	8004a7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4413      	add	r3, r2
 8004a74:	3304      	adds	r3, #4
 8004a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_PCD_EP_ClrStall+0x86>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e00e      	b.n	8004abc <HAL_PCD_EP_ClrStall+0xa4>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f002 fd2a 	bl	8007506 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	; 0x28
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	3338      	adds	r3, #56	; 0x38
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3304      	adds	r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d901      	bls.n	8004afc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e06c      	b.n	8004bd6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d902      	bls.n	8004b18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3303      	adds	r3, #3
 8004b1c:	089b      	lsrs	r3, r3, #2
 8004b1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b20:	e02b      	b.n	8004b7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d902      	bls.n	8004b3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3303      	adds	r3, #3
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68d9      	ldr	r1, [r3, #12]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	6978      	ldr	r0, [r7, #20]
 8004b5e:	f002 fc06 	bl	800736e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	441a      	add	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d809      	bhi.n	8004ba4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d203      	bcs.n	8004ba4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1be      	bne.n	8004b22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d811      	bhi.n	8004bd4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	6939      	ldr	r1, [r7, #16]
 8004bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	333c      	adds	r3, #60	; 0x3c
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	f040 80a0 	bne.w	8004d58 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d015      	beq.n	8004c4e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a72      	ldr	r2, [pc, #456]	; (8004df0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	f240 80dd 	bls.w	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80d7 	beq.w	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	461a      	mov	r2, r3
 8004c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c4a:	6093      	str	r3, [r2, #8]
 8004c4c:	e0cb      	b.n	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	461a      	mov	r2, r3
 8004c66:	2320      	movs	r3, #32
 8004c68:	6093      	str	r3, [r2, #8]
 8004c6a:	e0bc      	b.n	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 80b7 	bne.w	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a5d      	ldr	r2, [pc, #372]	; (8004df0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d90f      	bls.n	8004ca0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	461a      	mov	r2, r3
 8004c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c9c:	6093      	str	r3, [r2, #8]
 8004c9e:	e0a2      	b.n	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cb2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	0159      	lsls	r1, r3, #5
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	440b      	add	r3, r1
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004cc6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4403      	add	r3, r0
 8004cd6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004cda:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4403      	add	r3, r0
 8004cfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4419      	add	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4403      	add	r3, r0
 8004d14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d18:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d114      	bne.n	8004d4a <PCD_EP_OutXfrComplete_int+0x16a>
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d108      	bne.n	8004d4a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d42:	461a      	mov	r2, r3
 8004d44:	2101      	movs	r1, #1
 8004d46:	f002 fd71 	bl	800782c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f007 f98b 	bl	800c06c <HAL_PCD_DataOutStageCallback>
 8004d56:	e046      	b.n	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a26      	ldr	r2, [pc, #152]	; (8004df4 <PCD_EP_OutXfrComplete_int+0x214>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d124      	bne.n	8004daa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	461a      	mov	r2, r3
 8004d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7c:	6093      	str	r3, [r2, #8]
 8004d7e:	e032      	b.n	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	461a      	mov	r2, r3
 8004d98:	2320      	movs	r3, #32
 8004d9a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f007 f962 	bl	800c06c <HAL_PCD_DataOutStageCallback>
 8004da8:	e01d      	b.n	8004de6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d114      	bne.n	8004dda <PCD_EP_OutXfrComplete_int+0x1fa>
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d108      	bne.n	8004dda <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	f002 fd29 	bl	800782c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f007 f943 	bl	800c06c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	4f54300a 	.word	0x4f54300a
 8004df4:	4f54310a 	.word	0x4f54310a

08004df8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	333c      	adds	r3, #60	; 0x3c
 8004e10:	3304      	adds	r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d90e      	bls.n	8004e4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	461a      	mov	r2, r3
 8004e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f007 f8fb 	bl	800c048 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d90c      	bls.n	8004e74 <PCD_EP_OutSetupPacket_int+0x7c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d108      	bne.n	8004e74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2101      	movs	r1, #1
 8004e70:	f002 fcdc 	bl	800782c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	4f54300a 	.word	0x4f54300a

08004e84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
 8004e90:	4613      	mov	r3, r2
 8004e92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d107      	bne.n	8004eb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ea2:	883b      	ldrh	r3, [r7, #0]
 8004ea4:	0419      	lsls	r1, r3, #16
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb0:	e028      	b.n	8004f04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e00d      	b.n	8004ee2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	3340      	adds	r3, #64	; 0x40
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4413      	add	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d3ec      	bcc.n	8004ec6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004eec:	883b      	ldrh	r3, [r7, #0]
 8004eee:	0418      	lsls	r0, r3, #16
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	4302      	orrs	r2, r0
 8004efc:	3340      	adds	r3, #64	; 0x40
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e25b      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d075      	beq.n	8005056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f6a:	4ba3      	ldr	r3, [pc, #652]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d00c      	beq.n	8004f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f76:	4ba0      	ldr	r3, [pc, #640]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d112      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f82:	4b9d      	ldr	r3, [pc, #628]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	4b99      	ldr	r3, [pc, #612]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d05b      	beq.n	8005054 <HAL_RCC_OscConfig+0x108>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d157      	bne.n	8005054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e236      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d106      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x74>
 8004fb2:	4b91      	ldr	r3, [pc, #580]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a90      	ldr	r2, [pc, #576]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e01d      	b.n	8004ffc <HAL_RCC_OscConfig+0xb0>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x98>
 8004fca:	4b8b      	ldr	r3, [pc, #556]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a8a      	ldr	r2, [pc, #552]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	4b88      	ldr	r3, [pc, #544]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a87      	ldr	r2, [pc, #540]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e00b      	b.n	8004ffc <HAL_RCC_OscConfig+0xb0>
 8004fe4:	4b84      	ldr	r3, [pc, #528]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a83      	ldr	r2, [pc, #524]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	4b81      	ldr	r3, [pc, #516]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a80      	ldr	r2, [pc, #512]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8004ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d013      	beq.n	800502c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fc fe98 	bl	8001d38 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800500c:	f7fc fe94 	bl	8001d38 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	; 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e1fb      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	4b76      	ldr	r3, [pc, #472]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0xc0>
 800502a:	e014      	b.n	8005056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502c:	f7fc fe84 	bl	8001d38 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005034:	f7fc fe80 	bl	8001d38 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b64      	cmp	r3, #100	; 0x64
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e1e7      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005046:	4b6c      	ldr	r3, [pc, #432]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0xe8>
 8005052:	e000      	b.n	8005056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d063      	beq.n	800512a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800506e:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005076:	2b08      	cmp	r3, #8
 8005078:	d11c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800507a:	4b5f      	ldr	r3, [pc, #380]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d116      	bne.n	80050b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005086:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_RCC_OscConfig+0x152>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d001      	beq.n	800509e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e1bb      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509e:	4b56      	ldr	r3, [pc, #344]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4952      	ldr	r1, [pc, #328]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b2:	e03a      	b.n	800512a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050bc:	4b4f      	ldr	r3, [pc, #316]	; (80051fc <HAL_RCC_OscConfig+0x2b0>)
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fc fe39 	bl	8001d38 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ca:	f7fc fe35 	bl	8001d38 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e19c      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050dc:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e8:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4940      	ldr	r1, [pc, #256]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]
 80050fc:	e015      	b.n	800512a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050fe:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <HAL_RCC_OscConfig+0x2b0>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fc fe18 	bl	8001d38 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510c:	f7fc fe14 	bl	8001d38 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e17b      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d030      	beq.n	8005198 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513e:	4b30      	ldr	r3, [pc, #192]	; (8005200 <HAL_RCC_OscConfig+0x2b4>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fc fdf8 	bl	8001d38 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800514c:	f7fc fdf4 	bl	8001d38 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e15b      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515e:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x200>
 800516a:	e015      	b.n	8005198 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516c:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_RCC_OscConfig+0x2b4>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005172:	f7fc fde1 	bl	8001d38 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800517a:	f7fc fddd 	bl	8001d38 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e144      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 800518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80a0 	beq.w	80052e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051aa:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a0e      	ldr	r2, [pc, #56]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCC_OscConfig+0x2b8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d121      	bne.n	8005226 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <HAL_RCC_OscConfig+0x2b8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a07      	ldr	r2, [pc, #28]	; (8005204 <HAL_RCC_OscConfig+0x2b8>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fc fda3 	bl	8001d38 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e011      	b.n	800521a <HAL_RCC_OscConfig+0x2ce>
 80051f6:	bf00      	nop
 80051f8:	40023800 	.word	0x40023800
 80051fc:	42470000 	.word	0x42470000
 8005200:	42470e80 	.word	0x42470e80
 8005204:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fc fd96 	bl	8001d38 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e0fd      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521a:	4b81      	ldr	r3, [pc, #516]	; (8005420 <HAL_RCC_OscConfig+0x4d4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d106      	bne.n	800523c <HAL_RCC_OscConfig+0x2f0>
 800522e:	4b7d      	ldr	r3, [pc, #500]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	4a7c      	ldr	r2, [pc, #496]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	6713      	str	r3, [r2, #112]	; 0x70
 800523a:	e01c      	b.n	8005276 <HAL_RCC_OscConfig+0x32a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b05      	cmp	r3, #5
 8005242:	d10c      	bne.n	800525e <HAL_RCC_OscConfig+0x312>
 8005244:	4b77      	ldr	r3, [pc, #476]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	4a76      	ldr	r2, [pc, #472]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	6713      	str	r3, [r2, #112]	; 0x70
 8005250:	4b74      	ldr	r3, [pc, #464]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	4a73      	ldr	r2, [pc, #460]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6713      	str	r3, [r2, #112]	; 0x70
 800525c:	e00b      	b.n	8005276 <HAL_RCC_OscConfig+0x32a>
 800525e:	4b71      	ldr	r3, [pc, #452]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a70      	ldr	r2, [pc, #448]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
 800526a:	4b6e      	ldr	r3, [pc, #440]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	4a6d      	ldr	r2, [pc, #436]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d015      	beq.n	80052aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527e:	f7fc fd5b 	bl	8001d38 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	e00a      	b.n	800529c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fc fd57 	bl	8001d38 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e0bc      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529c:	4b61      	ldr	r3, [pc, #388]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ee      	beq.n	8005286 <HAL_RCC_OscConfig+0x33a>
 80052a8:	e014      	b.n	80052d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052aa:	f7fc fd45 	bl	8001d38 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fc fd41 	bl	8001d38 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e0a6      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c8:	4b56      	ldr	r3, [pc, #344]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ee      	bne.n	80052b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052da:	4b52      	ldr	r3, [pc, #328]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	4a51      	ldr	r2, [pc, #324]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 8092 	beq.w	8005414 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052f0:	4b4c      	ldr	r3, [pc, #304]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d05c      	beq.n	80053b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d141      	bne.n	8005388 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005304:	4b48      	ldr	r3, [pc, #288]	; (8005428 <HAL_RCC_OscConfig+0x4dc>)
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530a:	f7fc fd15 	bl	8001d38 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005312:	f7fc fd11 	bl	8001d38 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e078      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005324:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f0      	bne.n	8005312 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	019b      	lsls	r3, r3, #6
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	3b01      	subs	r3, #1
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	4933      	ldr	r1, [pc, #204]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <HAL_RCC_OscConfig+0x4dc>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fc fcea 	bl	8001d38 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005368:	f7fc fce6 	bl	8001d38 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e04d      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537a:	4b2a      	ldr	r3, [pc, #168]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x41c>
 8005386:	e045      	b.n	8005414 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005388:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_RCC_OscConfig+0x4dc>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538e:	f7fc fcd3 	bl	8001d38 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005396:	f7fc fccf 	bl	8001d38 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e036      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f0      	bne.n	8005396 <HAL_RCC_OscConfig+0x44a>
 80053b4:	e02e      	b.n	8005414 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e029      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <HAL_RCC_OscConfig+0x4d8>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d11c      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d115      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ea:	4013      	ands	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10d      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d106      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40007000 	.word	0x40007000
 8005424:	40023800 	.word	0x40023800
 8005428:	42470060 	.word	0x42470060

0800542c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0cc      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005440:	4b68      	ldr	r3, [pc, #416]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d90c      	bls.n	8005468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b65      	ldr	r3, [pc, #404]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b63      	ldr	r3, [pc, #396]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0b8      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d020      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005480:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a58      	ldr	r2, [pc, #352]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800548a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005498:	4b53      	ldr	r3, [pc, #332]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4a52      	ldr	r2, [pc, #328]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a4:	4b50      	ldr	r3, [pc, #320]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	494d      	ldr	r1, [pc, #308]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d044      	beq.n	800554c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d107      	bne.n	80054da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ca:	4b47      	ldr	r3, [pc, #284]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d119      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e07f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d003      	beq.n	80054ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d107      	bne.n	80054fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ea:	4b3f      	ldr	r3, [pc, #252]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e06f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fa:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e067      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f023 0203 	bic.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4934      	ldr	r1, [pc, #208]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800551c:	f7fc fc0c 	bl	8001d38 <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	e00a      	b.n	800553a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005524:	f7fc fc08 	bl	8001d38 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e04f      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 020c 	and.w	r2, r3, #12
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	429a      	cmp	r2, r3
 800554a:	d1eb      	bne.n	8005524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d20c      	bcs.n	8005574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e032      	b.n	80055da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4916      	ldr	r1, [pc, #88]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	490e      	ldr	r1, [pc, #56]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055b2:	f000 f821 	bl	80055f8 <HAL_RCC_GetSysClockFreq>
 80055b6:	4601      	mov	r1, r0
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <HAL_RCC_ClockConfig+0x1c0>)
 80055c4:	5cd3      	ldrb	r3, [r2, r3]
 80055c6:	fa21 f303 	lsr.w	r3, r1, r3
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <HAL_RCC_ClockConfig+0x1c4>)
 80055cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <HAL_RCC_ClockConfig+0x1c8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fc fb6c 	bl	8001cb0 <HAL_InitTick>

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40023c00 	.word	0x40023c00
 80055e8:	40023800 	.word	0x40023800
 80055ec:	0800e79c 	.word	0x0800e79c
 80055f0:	20000000 	.word	0x20000000
 80055f4:	20000004 	.word	0x20000004

080055f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	2300      	movs	r3, #0
 8005608:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800560e:	4b63      	ldr	r3, [pc, #396]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b04      	cmp	r3, #4
 8005618:	d007      	beq.n	800562a <HAL_RCC_GetSysClockFreq+0x32>
 800561a:	2b08      	cmp	r3, #8
 800561c:	d008      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x38>
 800561e:	2b00      	cmp	r3, #0
 8005620:	f040 80b4 	bne.w	800578c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005624:	4b5e      	ldr	r3, [pc, #376]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005626:	60bb      	str	r3, [r7, #8]
       break;
 8005628:	e0b3      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800562a:	4b5e      	ldr	r3, [pc, #376]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800562c:	60bb      	str	r3, [r7, #8]
      break;
 800562e:	e0b0      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005630:	4b5a      	ldr	r3, [pc, #360]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005638:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800563a:	4b58      	ldr	r3, [pc, #352]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d04a      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005646:	4b55      	ldr	r3, [pc, #340]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	099b      	lsrs	r3, r3, #6
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	ea03 0501 	and.w	r5, r3, r1
 800565c:	ea04 0602 	and.w	r6, r4, r2
 8005660:	4629      	mov	r1, r5
 8005662:	4632      	mov	r2, r6
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	f04f 0400 	mov.w	r4, #0
 800566c:	0154      	lsls	r4, r2, #5
 800566e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005672:	014b      	lsls	r3, r1, #5
 8005674:	4619      	mov	r1, r3
 8005676:	4622      	mov	r2, r4
 8005678:	1b49      	subs	r1, r1, r5
 800567a:	eb62 0206 	sbc.w	r2, r2, r6
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	f04f 0400 	mov.w	r4, #0
 8005686:	0194      	lsls	r4, r2, #6
 8005688:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800568c:	018b      	lsls	r3, r1, #6
 800568e:	1a5b      	subs	r3, r3, r1
 8005690:	eb64 0402 	sbc.w	r4, r4, r2
 8005694:	f04f 0100 	mov.w	r1, #0
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	00e2      	lsls	r2, r4, #3
 800569e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056a2:	00d9      	lsls	r1, r3, #3
 80056a4:	460b      	mov	r3, r1
 80056a6:	4614      	mov	r4, r2
 80056a8:	195b      	adds	r3, r3, r5
 80056aa:	eb44 0406 	adc.w	r4, r4, r6
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	0262      	lsls	r2, r4, #9
 80056b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80056bc:	0259      	lsls	r1, r3, #9
 80056be:	460b      	mov	r3, r1
 80056c0:	4614      	mov	r4, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	4621      	mov	r1, r4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f04f 0400 	mov.w	r4, #0
 80056cc:	461a      	mov	r2, r3
 80056ce:	4623      	mov	r3, r4
 80056d0:	f7fb fa72 	bl	8000bb8 <__aeabi_uldivmod>
 80056d4:	4603      	mov	r3, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	e049      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	f04f 0400 	mov.w	r4, #0
 80056e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	ea03 0501 	and.w	r5, r3, r1
 80056f2:	ea04 0602 	and.w	r6, r4, r2
 80056f6:	4629      	mov	r1, r5
 80056f8:	4632      	mov	r2, r6
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	f04f 0400 	mov.w	r4, #0
 8005702:	0154      	lsls	r4, r2, #5
 8005704:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005708:	014b      	lsls	r3, r1, #5
 800570a:	4619      	mov	r1, r3
 800570c:	4622      	mov	r2, r4
 800570e:	1b49      	subs	r1, r1, r5
 8005710:	eb62 0206 	sbc.w	r2, r2, r6
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	f04f 0400 	mov.w	r4, #0
 800571c:	0194      	lsls	r4, r2, #6
 800571e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005722:	018b      	lsls	r3, r1, #6
 8005724:	1a5b      	subs	r3, r3, r1
 8005726:	eb64 0402 	sbc.w	r4, r4, r2
 800572a:	f04f 0100 	mov.w	r1, #0
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	00e2      	lsls	r2, r4, #3
 8005734:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005738:	00d9      	lsls	r1, r3, #3
 800573a:	460b      	mov	r3, r1
 800573c:	4614      	mov	r4, r2
 800573e:	195b      	adds	r3, r3, r5
 8005740:	eb44 0406 	adc.w	r4, r4, r6
 8005744:	f04f 0100 	mov.w	r1, #0
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	02a2      	lsls	r2, r4, #10
 800574e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005752:	0299      	lsls	r1, r3, #10
 8005754:	460b      	mov	r3, r1
 8005756:	4614      	mov	r4, r2
 8005758:	4618      	mov	r0, r3
 800575a:	4621      	mov	r1, r4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f04f 0400 	mov.w	r4, #0
 8005762:	461a      	mov	r2, r3
 8005764:	4623      	mov	r3, r4
 8005766:	f7fb fa27 	bl	8000bb8 <__aeabi_uldivmod>
 800576a:	4603      	mov	r3, r0
 800576c:	460c      	mov	r4, r1
 800576e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	0c1b      	lsrs	r3, r3, #16
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	3301      	adds	r3, #1
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	60bb      	str	r3, [r7, #8]
      break;
 800578a:	e002      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800578e:	60bb      	str	r3, [r7, #8]
      break;
 8005790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005792:	68bb      	ldr	r3, [r7, #8]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579c:	40023800 	.word	0x40023800
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	007a1200 	.word	0x007a1200

080057a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000000 	.word	0x20000000

080057c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057c4:	f7ff fff0 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057c8:	4601      	mov	r1, r0
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	0a9b      	lsrs	r3, r3, #10
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	4a03      	ldr	r2, [pc, #12]	; (80057e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d6:	5cd3      	ldrb	r3, [r2, r3]
 80057d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	0800e7ac 	.word	0x0800e7ac

080057e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800580c:	2b00      	cmp	r3, #0
 800580e:	d038      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005810:	4b68      	ldr	r3, [pc, #416]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005816:	f7fc fa8f 	bl	8001d38 <HAL_GetTick>
 800581a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800581e:	f7fc fa8b 	bl	8001d38 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e0bd      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005830:	4b61      	ldr	r3, [pc, #388]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f0      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	019b      	lsls	r3, r3, #6
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	071b      	lsls	r3, r3, #28
 800584e:	495a      	ldr	r1, [pc, #360]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005856:	4b57      	ldr	r3, [pc, #348]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800585c:	f7fc fa6c 	bl	8001d38 <HAL_GetTick>
 8005860:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005864:	f7fc fa68 	bl	8001d38 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e09a      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005876:	4b50      	ldr	r3, [pc, #320]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8083 	beq.w	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	4b48      	ldr	r3, [pc, #288]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	4a47      	ldr	r2, [pc, #284]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589e:	6413      	str	r3, [r2, #64]	; 0x40
 80058a0:	4b45      	ldr	r3, [pc, #276]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058ac:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a42      	ldr	r2, [pc, #264]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058b8:	f7fc fa3e 	bl	8001d38 <HAL_GetTick>
 80058bc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058c0:	f7fc fa3a 	bl	8001d38 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e06c      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058d2:	4b3a      	ldr	r3, [pc, #232]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058de:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02f      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d028      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058fc:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005904:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590c:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005912:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d114      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005924:	f7fc fa08 	bl	8001d38 <HAL_GetTick>
 8005928:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592a:	e00a      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592c:	f7fc fa04 	bl	8001d38 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e034      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0ee      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595a:	d10d      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800596c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005970:	4911      	ldr	r1, [pc, #68]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
 8005976:	e005      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005978:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005982:	6093      	str	r3, [r2, #8]
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005990:	4909      	ldr	r1, [pc, #36]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005992:	4313      	orrs	r3, r2
 8005994:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	7d1a      	ldrb	r2, [r3, #20]
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80059a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	42470068 	.word	0x42470068
 80059b8:	40023800 	.word	0x40023800
 80059bc:	40007000 	.word	0x40007000
 80059c0:	42470e40 	.word	0x42470e40
 80059c4:	424711e0 	.word	0x424711e0

080059c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d13f      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059e6:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059ee:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d004      	beq.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d131      	bne.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059fa:	4b1f      	ldr	r3, [pc, #124]	; (8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059fc:	617b      	str	r3, [r7, #20]
          break;
 80059fe:	e031      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a00:	4b1c      	ldr	r3, [pc, #112]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a0c:	d109      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a0e:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a18:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	e008      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2c:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a34:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4e:	0f1b      	lsrs	r3, r3, #28
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	617b      	str	r3, [r7, #20]
          break;
 8005a5c:	e002      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
          break;
 8005a62:	bf00      	nop
        }
      }
      break;
 8005a64:	bf00      	nop
    }
  }
  return frequency;
 8005a66:	697b      	ldr	r3, [r7, #20]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40023800 	.word	0x40023800
 8005a78:	00bb8000 	.word	0x00bb8000
 8005a7c:	007a1200 	.word	0x007a1200
 8005a80:	00f42400 	.word	0x00f42400

08005a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e056      	b.n	8005b44 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fb ffb7 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005acc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	ea42 0103 	orr.w	r1, r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	0c1b      	lsrs	r3, r3, #16
 8005b14:	f003 0104 	and.w	r1, r3, #4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69da      	ldr	r2, [r3, #28]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e01d      	b.n	8005b9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb ff9e 	bl	8001ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f000 fa1e 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0201 	orr.w	r2, r2, #1
 8005bb8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	d007      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d122      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d11b      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f06f 0202 	mvn.w	r2, #2
 8005c16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9af 	bl	8005f90 <HAL_TIM_IC_CaptureCallback>
 8005c32:	e005      	b.n	8005c40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9a1 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9b2 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d122      	bne.n	8005c9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d11b      	bne.n	8005c9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f06f 0204 	mvn.w	r2, #4
 8005c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f985 	bl	8005f90 <HAL_TIM_IC_CaptureCallback>
 8005c86:	e005      	b.n	8005c94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f977 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f988 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d122      	bne.n	8005cee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d11b      	bne.n	8005cee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0208 	mvn.w	r2, #8
 8005cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f95b 	bl	8005f90 <HAL_TIM_IC_CaptureCallback>
 8005cda:	e005      	b.n	8005ce8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f94d 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f95e 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d122      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d11b      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0210 	mvn.w	r2, #16
 8005d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2208      	movs	r2, #8
 8005d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f931 	bl	8005f90 <HAL_TIM_IC_CaptureCallback>
 8005d2e:	e005      	b.n	8005d3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f923 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f934 	bl	8005fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10e      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d107      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f06f 0201 	mvn.w	r2, #1
 8005d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f8fd 	bl	8005f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d78:	2b80      	cmp	r3, #128	; 0x80
 8005d7a:	d10e      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d86:	2b80      	cmp	r3, #128	; 0x80
 8005d88:	d107      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 faab 	bl	80062f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d10e      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	d107      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f8f9 	bl	8005fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d10e      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d107      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f06f 0220 	mvn.w	r2, #32
 8005dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fa75 	bl	80062dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_ConfigClockSource+0x18>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e0a6      	b.n	8005f60 <HAL_TIM_ConfigClockSource+0x166>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e38:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d067      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x120>
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d80b      	bhi.n	8005e66 <HAL_TIM_ConfigClockSource+0x6c>
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d073      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x140>
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	d802      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x62>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d06f      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e5a:	e078      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d06c      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x140>
 8005e60:	2b30      	cmp	r3, #48	; 0x30
 8005e62:	d06a      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e64:	e073      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e66:	2b70      	cmp	r3, #112	; 0x70
 8005e68:	d00d      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x8c>
 8005e6a:	2b70      	cmp	r3, #112	; 0x70
 8005e6c:	d804      	bhi.n	8005e78 <HAL_TIM_ConfigClockSource+0x7e>
 8005e6e:	2b50      	cmp	r3, #80	; 0x50
 8005e70:	d033      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0xe0>
 8005e72:	2b60      	cmp	r3, #96	; 0x60
 8005e74:	d041      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005e76:	e06a      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7c:	d066      	beq.n	8005f4c <HAL_TIM_ConfigClockSource+0x152>
 8005e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e82:	d017      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005e84:	e063      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6899      	ldr	r1, [r3, #8]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f000 f993 	bl	80061c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ea8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	609a      	str	r2, [r3, #8]
      break;
 8005eb2:	e04c      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6899      	ldr	r1, [r3, #8]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f000 f97c 	bl	80061c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed6:	609a      	str	r2, [r3, #8]
      break;
 8005ed8:	e039      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f000 f8f0 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2150      	movs	r1, #80	; 0x50
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f949 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005ef8:	e029      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6859      	ldr	r1, [r3, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f000 f90f 	bl	800612a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2160      	movs	r1, #96	; 0x60
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f939 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005f18:	e019      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f000 f8d0 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2140      	movs	r1, #64	; 0x40
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f929 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005f38:	e009      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f000 f920 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005f4a:	e000      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0x38>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0x38>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a31      	ldr	r2, [pc, #196]	; (80060b4 <TIM_Base_SetConfig+0xe8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0x38>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a30      	ldr	r2, [pc, #192]	; (80060b8 <TIM_Base_SetConfig+0xec>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0x38>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <TIM_Base_SetConfig+0xf0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a25      	ldr	r2, [pc, #148]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01b      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d017      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a22      	ldr	r2, [pc, #136]	; (80060b4 <TIM_Base_SetConfig+0xe8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <TIM_Base_SetConfig+0xec>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00f      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a20      	ldr	r2, [pc, #128]	; (80060bc <TIM_Base_SetConfig+0xf0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <TIM_Base_SetConfig+0xf4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a1e      	ldr	r2, [pc, #120]	; (80060c4 <TIM_Base_SetConfig+0xf8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0x8a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <TIM_Base_SetConfig+0xfc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <TIM_Base_SetConfig+0xe4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	615a      	str	r2, [r3, #20]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800

080060cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 030a 	bic.w	r3, r3, #10
 8006108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612a:	b480      	push	{r7}
 800612c:	b087      	sub	sp, #28
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0210 	bic.w	r2, r3, #16
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006166:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f043 0307 	orr.w	r3, r3, #7
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	609a      	str	r2, [r3, #8]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006214:	2302      	movs	r3, #2
 8006216:	e050      	b.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d018      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d013      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a18      	ldr	r2, [pc, #96]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00e      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a16      	ldr	r2, [pc, #88]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d009      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d004      	beq.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d10c      	bne.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	4313      	orrs	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40000c00 	.word	0x40000c00
 80062d8:	40014000 	.word	0x40014000

080062dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006304:	b084      	sub	sp, #16
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	f107 001c 	add.w	r0, r7, #28
 8006312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	2b01      	cmp	r3, #1
 800631a:	d122      	bne.n	8006362 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d105      	bne.n	8006356 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 fac6 	bl	80078e8 <USB_CoreReset>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e01a      	b.n	8006398 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 faba 	bl	80078e8 <USB_CoreReset>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
 800638a:	e005      	b.n	8006398 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	2b01      	cmp	r3, #1
 800639c:	d10b      	bne.n	80063b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f043 0206 	orr.w	r2, r3, #6
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f043 0220 	orr.w	r2, r3, #32
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063c2:	b004      	add	sp, #16
 80063c4:	4770      	bx	lr
	...

080063c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d165      	bne.n	80064a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4a41      	ldr	r2, [pc, #260]	; (80064e4 <USB_SetTurnaroundTime+0x11c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d906      	bls.n	80063f2 <USB_SetTurnaroundTime+0x2a>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4a40      	ldr	r2, [pc, #256]	; (80064e8 <USB_SetTurnaroundTime+0x120>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d802      	bhi.n	80063f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063ec:	230f      	movs	r3, #15
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e062      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4a3c      	ldr	r2, [pc, #240]	; (80064e8 <USB_SetTurnaroundTime+0x120>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d906      	bls.n	8006408 <USB_SetTurnaroundTime+0x40>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4a3b      	ldr	r2, [pc, #236]	; (80064ec <USB_SetTurnaroundTime+0x124>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d802      	bhi.n	8006408 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006402:	230e      	movs	r3, #14
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	e057      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4a38      	ldr	r2, [pc, #224]	; (80064ec <USB_SetTurnaroundTime+0x124>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d906      	bls.n	800641e <USB_SetTurnaroundTime+0x56>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4a37      	ldr	r2, [pc, #220]	; (80064f0 <USB_SetTurnaroundTime+0x128>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d802      	bhi.n	800641e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006418:	230d      	movs	r3, #13
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e04c      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4a33      	ldr	r2, [pc, #204]	; (80064f0 <USB_SetTurnaroundTime+0x128>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d906      	bls.n	8006434 <USB_SetTurnaroundTime+0x6c>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4a32      	ldr	r2, [pc, #200]	; (80064f4 <USB_SetTurnaroundTime+0x12c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d802      	bhi.n	8006434 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800642e:	230c      	movs	r3, #12
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	e041      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4a2f      	ldr	r2, [pc, #188]	; (80064f4 <USB_SetTurnaroundTime+0x12c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d906      	bls.n	800644a <USB_SetTurnaroundTime+0x82>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4a2e      	ldr	r2, [pc, #184]	; (80064f8 <USB_SetTurnaroundTime+0x130>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d802      	bhi.n	800644a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006444:	230b      	movs	r3, #11
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e036      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <USB_SetTurnaroundTime+0x130>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d906      	bls.n	8006460 <USB_SetTurnaroundTime+0x98>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4a29      	ldr	r2, [pc, #164]	; (80064fc <USB_SetTurnaroundTime+0x134>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d802      	bhi.n	8006460 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800645a:	230a      	movs	r3, #10
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	e02b      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a26      	ldr	r2, [pc, #152]	; (80064fc <USB_SetTurnaroundTime+0x134>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d906      	bls.n	8006476 <USB_SetTurnaroundTime+0xae>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4a25      	ldr	r2, [pc, #148]	; (8006500 <USB_SetTurnaroundTime+0x138>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d802      	bhi.n	8006476 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006470:	2309      	movs	r3, #9
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e020      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4a21      	ldr	r2, [pc, #132]	; (8006500 <USB_SetTurnaroundTime+0x138>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d906      	bls.n	800648c <USB_SetTurnaroundTime+0xc4>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4a20      	ldr	r2, [pc, #128]	; (8006504 <USB_SetTurnaroundTime+0x13c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d802      	bhi.n	800648c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006486:	2308      	movs	r3, #8
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e015      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a1d      	ldr	r2, [pc, #116]	; (8006504 <USB_SetTurnaroundTime+0x13c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d906      	bls.n	80064a2 <USB_SetTurnaroundTime+0xda>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4a1c      	ldr	r2, [pc, #112]	; (8006508 <USB_SetTurnaroundTime+0x140>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d802      	bhi.n	80064a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800649c:	2307      	movs	r3, #7
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e00a      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064a2:	2306      	movs	r3, #6
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e007      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d102      	bne.n	80064b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064ae:	2309      	movs	r3, #9
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	e001      	b.n	80064b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064b4:	2309      	movs	r3, #9
 80064b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	029b      	lsls	r3, r3, #10
 80064cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80064d0:	431a      	orrs	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	00d8acbf 	.word	0x00d8acbf
 80064e8:	00e4e1bf 	.word	0x00e4e1bf
 80064ec:	00f423ff 	.word	0x00f423ff
 80064f0:	0106737f 	.word	0x0106737f
 80064f4:	011a499f 	.word	0x011a499f
 80064f8:	01312cff 	.word	0x01312cff
 80064fc:	014ca43f 	.word	0x014ca43f
 8006500:	016e35ff 	.word	0x016e35ff
 8006504:	01a6ab1f 	.word	0x01a6ab1f
 8006508:	01e847ff 	.word	0x01e847ff

0800650c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f043 0201 	orr.w	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 0201 	bic.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d106      	bne.n	800657c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60da      	str	r2, [r3, #12]
 800657a:	e00b      	b.n	8006594 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60da      	str	r2, [r3, #12]
 800658e:	e001      	b.n	8006594 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e003      	b.n	800659c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006594:	2032      	movs	r0, #50	; 0x32
 8006596:	f7fb fbdb 	bl	8001d50 <HAL_Delay>

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065a4:	b084      	sub	sp, #16
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065be:	2300      	movs	r3, #0
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	e009      	b.n	80065d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3340      	adds	r3, #64	; 0x40
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	2200      	movs	r2, #0
 80065d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	3301      	adds	r3, #1
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b0e      	cmp	r3, #14
 80065dc:	d9f2      	bls.n	80065c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11c      	bne.n	800661e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f2:	f043 0302 	orr.w	r3, r3, #2
 80065f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
 800661c:	e00b      	b.n	8006636 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800663c:	461a      	mov	r2, r3
 800663e:	2300      	movs	r3, #0
 8006640:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006648:	4619      	mov	r1, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	461a      	mov	r2, r3
 8006652:	680b      	ldr	r3, [r1, #0]
 8006654:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	2b01      	cmp	r3, #1
 800665a:	d10c      	bne.n	8006676 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006662:	2100      	movs	r1, #0
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f949 	bl	80068fc <USB_SetDevSpeed>
 800666a:	e008      	b.n	800667e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800666c:	2101      	movs	r1, #1
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f944 	bl	80068fc <USB_SetDevSpeed>
 8006674:	e003      	b.n	800667e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006676:	2103      	movs	r1, #3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f93f 	bl	80068fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800667e:	2110      	movs	r1, #16
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f8f3 	bl	800686c <USB_FlushTxFifo>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f911 	bl	80068b8 <USB_FlushRxFifo>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a6:	461a      	mov	r2, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	461a      	mov	r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	e043      	b.n	8006752 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e0:	d118      	bne.n	8006714 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	461a      	mov	r2, r3
 80066f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	e013      	b.n	8006726 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670a:	461a      	mov	r2, r3
 800670c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e008      	b.n	8006726 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006720:	461a      	mov	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006732:	461a      	mov	r2, r3
 8006734:	2300      	movs	r3, #0
 8006736:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	461a      	mov	r2, r3
 8006746:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800674a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3301      	adds	r3, #1
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	429a      	cmp	r2, r3
 8006758:	d3b7      	bcc.n	80066ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	e043      	b.n	80067e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006776:	d118      	bne.n	80067aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	461a      	mov	r2, r3
 800678c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e013      	b.n	80067bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	461a      	mov	r2, r3
 80067a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e008      	b.n	80067bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	461a      	mov	r2, r3
 80067b8:	2300      	movs	r3, #0
 80067ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	461a      	mov	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067da:	461a      	mov	r2, r3
 80067dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3301      	adds	r3, #1
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d3b7      	bcc.n	8006760 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006802:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006810:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2b00      	cmp	r3, #0
 8006816:	d105      	bne.n	8006824 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f043 0210 	orr.w	r2, r3, #16
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699a      	ldr	r2, [r3, #24]
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <USB_DevInit+0x2c4>)
 800682a:	4313      	orrs	r3, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f043 0208 	orr.w	r2, r3, #8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006850:	f043 0304 	orr.w	r3, r3, #4
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006858:	7dfb      	ldrb	r3, [r7, #23]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006864:	b004      	add	sp, #16
 8006866:	4770      	bx	lr
 8006868:	803c3800 	.word	0x803c3800

0800686c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	019b      	lsls	r3, r3, #6
 800687e:	f043 0220 	orr.w	r2, r3, #32
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <USB_FlushTxFifo+0x48>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e006      	b.n	80068a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d0f0      	beq.n	8006886 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	00030d40 	.word	0x00030d40

080068b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2210      	movs	r2, #16
 80068c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <USB_FlushRxFifo+0x40>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d901      	bls.n	80068dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e006      	b.n	80068ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d0f0      	beq.n	80068ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	00030d40 	.word	0x00030d40

080068fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	68f9      	ldr	r1, [r7, #12]
 8006918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800691c:	4313      	orrs	r3, r2
 800691e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800692e:	b480      	push	{r7}
 8006930:	b087      	sub	sp, #28
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0306 	and.w	r3, r3, #6
 8006946:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800694e:	2300      	movs	r3, #0
 8006950:	75fb      	strb	r3, [r7, #23]
 8006952:	e00a      	b.n	800696a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d002      	beq.n	8006960 <USB_GetDevSpeed+0x32>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b06      	cmp	r3, #6
 800695e:	d102      	bne.n	8006966 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006960:	2302      	movs	r3, #2
 8006962:	75fb      	strb	r3, [r7, #23]
 8006964:	e001      	b.n	800696a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006966:	230f      	movs	r3, #15
 8006968:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
}
 800696c:	4618      	mov	r0, r3
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d13a      	bne.n	8006a0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	2101      	movs	r1, #1
 80069a6:	fa01 f303 	lsl.w	r3, r1, r3
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	68f9      	ldr	r1, [r7, #12]
 80069ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b2:	4313      	orrs	r3, r2
 80069b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d155      	bne.n	8006a78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	78db      	ldrb	r3, [r3, #3]
 80069e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	059b      	lsls	r3, r3, #22
 80069ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069f0:	4313      	orrs	r3, r2
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	e036      	b.n	8006a78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a10:	69da      	ldr	r2, [r3, #28]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a20:	041b      	lsls	r3, r3, #16
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d11a      	bne.n	8006a78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	78db      	ldrb	r3, [r3, #3]
 8006a5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a5e:	430b      	orrs	r3, r1
 8006a60:	4313      	orrs	r3, r2
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d161      	bne.n	8006b68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aba:	d11f      	bne.n	8006afc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ada:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006afa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	43db      	mvns	r3, r3
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	2101      	movs	r1, #1
 8006b32:	fa01 f303 	lsl.w	r3, r1, r3
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	68f9      	ldr	r1, [r7, #12]
 8006b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b40:	4013      	ands	r3, r2
 8006b42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	0159      	lsls	r1, r3, #5
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	440b      	add	r3, r1
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4b35      	ldr	r3, [pc, #212]	; (8006c38 <USB_DeactivateEndpoint+0x1b0>)
 8006b62:	4013      	ands	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]
 8006b66:	e060      	b.n	8006c2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b7e:	d11f      	bne.n	8006bc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be0:	4013      	ands	r3, r2
 8006be2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfa:	041b      	lsls	r3, r3, #16
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c04:	4013      	ands	r3, r2
 8006c06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	0159      	lsls	r1, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	4619      	mov	r1, r3
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <USB_DeactivateEndpoint+0x1b4>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	ec337800 	.word	0xec337800
 8006c3c:	eff37800 	.word	0xeff37800

08006c40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	f040 815c 	bne.w	8006f1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d132      	bne.n	8006cd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	0151      	lsls	r1, r2, #5
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	440a      	add	r2, r1
 8006ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	0151      	lsls	r1, r2, #5
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	440a      	add	r2, r1
 8006cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc8:	0cdb      	lsrs	r3, r3, #19
 8006cca:	04db      	lsls	r3, r3, #19
 8006ccc:	6113      	str	r3, [r2, #16]
 8006cce:	e074      	b.n	8006dba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	0151      	lsls	r1, r2, #5
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	440a      	add	r2, r1
 8006ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cea:	0cdb      	lsrs	r3, r3, #19
 8006cec:	04db      	lsls	r3, r3, #19
 8006cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	0151      	lsls	r1, r2, #5
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	440a      	add	r2, r1
 8006d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	691a      	ldr	r2, [r3, #16]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6959      	ldr	r1, [r3, #20]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	440b      	add	r3, r1
 8006d2c:	1e59      	subs	r1, r3, #1
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d36:	04d9      	lsls	r1, r3, #19
 8006d38:	4b9d      	ldr	r3, [pc, #628]	; (8006fb0 <USB_EPStartXfer+0x370>)
 8006d3a:	400b      	ands	r3, r1
 8006d3c:	69b9      	ldr	r1, [r7, #24]
 8006d3e:	0148      	lsls	r0, r1, #5
 8006d40:	69f9      	ldr	r1, [r7, #28]
 8006d42:	4401      	add	r1, r0
 8006d44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d62:	69b9      	ldr	r1, [r7, #24]
 8006d64:	0148      	lsls	r0, r1, #5
 8006d66:	69f9      	ldr	r1, [r7, #28]
 8006d68:	4401      	add	r1, r0
 8006d6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	78db      	ldrb	r3, [r3, #3]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d11f      	bne.n	8006dba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006db8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d14b      	bne.n	8006e58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d009      	beq.n	8006ddc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	78db      	ldrb	r3, [r3, #3]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d128      	bne.n	8006e36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d110      	bne.n	8006e16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	e00f      	b.n	8006e36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e12f      	b.n	80070b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	78db      	ldrb	r3, [r3, #3]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d015      	beq.n	8006eac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 8117 	beq.w	80070b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea0:	69f9      	ldr	r1, [r7, #28]
 8006ea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	634b      	str	r3, [r1, #52]	; 0x34
 8006eaa:	e105      	b.n	80070b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d110      	bne.n	8006ede <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	e00f      	b.n	8006efe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	68d9      	ldr	r1, [r3, #12]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	b298      	uxth	r0, r3
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	4603      	mov	r3, r0
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fa2b 	bl	800736e <USB_WritePacket>
 8006f18:	e0ce      	b.n	80070b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f34:	0cdb      	lsrs	r3, r3, #19
 8006f36:	04db      	lsls	r3, r3, #19
 8006f38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d126      	bne.n	8006fb4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7c:	69b9      	ldr	r1, [r7, #24]
 8006f7e:	0148      	lsls	r0, r1, #5
 8006f80:	69f9      	ldr	r1, [r7, #28]
 8006f82:	4401      	add	r1, r0
 8006f84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006faa:	6113      	str	r3, [r2, #16]
 8006fac:	e036      	b.n	800701c <USB_EPStartXfer+0x3dc>
 8006fae:	bf00      	nop
 8006fb0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	695a      	ldr	r2, [r3, #20]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	1e5a      	subs	r2, r3, #1
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	8afb      	ldrh	r3, [r7, #22]
 8006fda:	04d9      	lsls	r1, r3, #19
 8006fdc:	4b39      	ldr	r3, [pc, #228]	; (80070c4 <USB_EPStartXfer+0x484>)
 8006fde:	400b      	ands	r3, r1
 8006fe0:	69b9      	ldr	r1, [r7, #24]
 8006fe2:	0148      	lsls	r0, r1, #5
 8006fe4:	69f9      	ldr	r1, [r7, #28]
 8006fe6:	4401      	add	r1, r0
 8006fe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fec:	4313      	orrs	r3, r2
 8006fee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	691a      	ldr	r2, [r3, #16]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	8af9      	ldrh	r1, [r7, #22]
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800700c:	69b9      	ldr	r1, [r7, #24]
 800700e:	0148      	lsls	r0, r1, #5
 8007010:	69f9      	ldr	r1, [r7, #28]
 8007012:	4401      	add	r1, r0
 8007014:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007018:	4313      	orrs	r3, r2
 800701a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10d      	bne.n	800703e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	68d9      	ldr	r1, [r3, #12]
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703a:	460a      	mov	r2, r1
 800703c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	78db      	ldrb	r3, [r3, #3]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d128      	bne.n	8007098 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007052:	2b00      	cmp	r3, #0
 8007054:	d110      	bne.n	8007078 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	4413      	add	r3, r2
 800705e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	0151      	lsls	r1, r2, #5
 8007068:	69fa      	ldr	r2, [r7, #28]
 800706a:	440a      	add	r2, r1
 800706c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007070:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e00f      	b.n	8007098 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007096:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	1ff80000 	.word	0x1ff80000

080070c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	f040 80cd 	bne.w	8007284 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d132      	bne.n	8007158 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007150:	0cdb      	lsrs	r3, r3, #19
 8007152:	04db      	lsls	r3, r3, #19
 8007154:	6113      	str	r3, [r2, #16]
 8007156:	e04e      	b.n	80071f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007172:	0cdb      	lsrs	r3, r3, #19
 8007174:	04db      	lsls	r3, r3, #19
 8007176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007192:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007196:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800719a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	695a      	ldr	r2, [r3, #20]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d903      	bls.n	80071b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	691a      	ldr	r2, [r3, #16]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071e6:	6939      	ldr	r1, [r7, #16]
 80071e8:	0148      	lsls	r0, r1, #5
 80071ea:	6979      	ldr	r1, [r7, #20]
 80071ec:	4401      	add	r1, r0
 80071ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071f2:	4313      	orrs	r3, r2
 80071f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d11e      	bne.n	800723a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	461a      	mov	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	440a      	add	r2, r1
 800722e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007232:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	e092      	b.n	8007360 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	0151      	lsls	r1, r2, #5
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	440a      	add	r2, r1
 8007250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007254:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007258:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d07e      	beq.n	8007360 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	f003 030f 	and.w	r3, r3, #15
 8007272:	2101      	movs	r1, #1
 8007274:	fa01 f303 	lsl.w	r3, r1, r3
 8007278:	6979      	ldr	r1, [r7, #20]
 800727a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800727e:	4313      	orrs	r3, r2
 8007280:	634b      	str	r3, [r1, #52]	; 0x34
 8007282:	e06d      	b.n	8007360 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	0151      	lsls	r1, r2, #5
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	440a      	add	r2, r1
 800729a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800729e:	0cdb      	lsrs	r3, r3, #19
 80072a0:	04db      	lsls	r3, r3, #19
 80072a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800730e:	6939      	ldr	r1, [r7, #16]
 8007310:	0148      	lsls	r0, r1, #5
 8007312:	6979      	ldr	r1, [r7, #20]
 8007314:	4401      	add	r1, r0
 8007316:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800731a:	4313      	orrs	r3, r2
 800731c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d10d      	bne.n	8007340 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68d9      	ldr	r1, [r3, #12]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	460a      	mov	r2, r1
 800733e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	440a      	add	r2, r1
 8007356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800735e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800736e:	b480      	push	{r7}
 8007370:	b089      	sub	sp, #36	; 0x24
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	4611      	mov	r1, r2
 800737a:	461a      	mov	r2, r3
 800737c:	460b      	mov	r3, r1
 800737e:	71fb      	strb	r3, [r7, #7]
 8007380:	4613      	mov	r3, r2
 8007382:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800738c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007390:	2b00      	cmp	r3, #0
 8007392:	d11a      	bne.n	80073ca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007394:	88bb      	ldrh	r3, [r7, #4]
 8007396:	3303      	adds	r3, #3
 8007398:	089b      	lsrs	r3, r3, #2
 800739a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800739c:	2300      	movs	r3, #0
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	e00f      	b.n	80073c2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	031a      	lsls	r2, r3, #12
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ae:	461a      	mov	r2, r3
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	3304      	adds	r3, #4
 80073ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	3301      	adds	r3, #1
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d3eb      	bcc.n	80073a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3724      	adds	r7, #36	; 0x24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073d8:	b480      	push	{r7}
 80073da:	b089      	sub	sp, #36	; 0x24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	3303      	adds	r3, #3
 80073f2:	089b      	lsrs	r3, r3, #2
 80073f4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80073f6:	2300      	movs	r3, #0
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	e00b      	b.n	8007414 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	601a      	str	r2, [r3, #0]
    pDest++;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	3304      	adds	r3, #4
 800740c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	3301      	adds	r3, #1
 8007412:	61bb      	str	r3, [r7, #24]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	429a      	cmp	r2, r3
 800741a:	d3ef      	bcc.n	80073fc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800741c:	69fb      	ldr	r3, [r7, #28]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3724      	adds	r7, #36	; 0x24
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d12c      	bne.n	80074a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	db12      	blt.n	800747e <USB_EPSetStall+0x54>
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00f      	beq.n	800747e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007478:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800747c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	440a      	add	r2, r1
 8007494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	e02b      	b.n	80074f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	db12      	blt.n	80074d8 <USB_EPSetStall+0xae>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00f      	beq.n	80074d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	785b      	ldrb	r3, [r3, #1]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d128      	bne.n	8007574 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007540:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	78db      	ldrb	r3, [r3, #3]
 8007546:	2b03      	cmp	r3, #3
 8007548:	d003      	beq.n	8007552 <USB_EPClearStall+0x4c>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	78db      	ldrb	r3, [r3, #3]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d138      	bne.n	80075c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	e027      	b.n	80075c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	440a      	add	r2, r1
 800758a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007592:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	78db      	ldrb	r3, [r3, #3]
 8007598:	2b03      	cmp	r3, #3
 800759a:	d003      	beq.n	80075a4 <USB_EPClearStall+0x9e>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	78db      	ldrb	r3, [r3, #3]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d10f      	bne.n	80075c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b085      	sub	sp, #20
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80075f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800760c:	4313      	orrs	r3, r2
 800760e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007638:	f023 0303 	bic.w	r3, r3, #3
 800763c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800764c:	f023 0302 	bic.w	r3, r3, #2
 8007650:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800768e:	f043 0302 	orr.w	r3, r3, #2
 8007692:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4013      	ands	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	4013      	ands	r3, r2
 80076ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	0c1b      	lsrs	r3, r3, #16
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4013      	ands	r3, r2
 800771e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	b29b      	uxth	r3, r3
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	4013      	ands	r3, r2
 800775c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800775e:	68bb      	ldr	r3, [r7, #8]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
 800779c:	01db      	lsls	r3, r3, #7
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	4013      	ands	r3, r2
 80077b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077ba:	68bb      	ldr	r3, [r7, #8]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	f003 0301 	and.w	r3, r3, #1
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007802:	f023 0307 	bic.w	r3, r3, #7
 8007806:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800781a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
	...

0800782c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	460b      	mov	r3, r1
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	333c      	adds	r3, #60	; 0x3c
 8007842:	3304      	adds	r3, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	4a26      	ldr	r2, [pc, #152]	; (80078e4 <USB_EP0_OutStart+0xb8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d90a      	bls.n	8007866 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800785c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007860:	d101      	bne.n	8007866 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	e037      	b.n	80078d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	461a      	mov	r2, r3
 800786e:	2300      	movs	r3, #0
 8007870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007894:	f043 0318 	orr.w	r3, r3, #24
 8007898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80078ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d10f      	bne.n	80078d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80078d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	4f54300a 	.word	0x4f54300a

080078e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3301      	adds	r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4a13      	ldr	r2, [pc, #76]	; (800794c <USB_CoreReset+0x64>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d901      	bls.n	8007906 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e01b      	b.n	800793e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	daf2      	bge.n	80078f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f043 0201 	orr.w	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <USB_CoreReset+0x64>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d901      	bls.n	8007930 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e006      	b.n	800793e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b01      	cmp	r3, #1
 800793a:	d0f0      	beq.n	800791e <USB_CoreReset+0x36>

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	00030d40 	.word	0x00030d40

08007950 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800795c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007960:	f004 fe3a 	bl	800c5d8 <malloc>
 8007964:	4603      	mov	r3, r0
 8007966:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007976:	2302      	movs	r3, #2
 8007978:	e066      	b.n	8007a48 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7c1b      	ldrb	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d119      	bne.n	80079be <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800798a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800798e:	2202      	movs	r2, #2
 8007990:	2181      	movs	r1, #129	; 0x81
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f004 fca7 	bl	800c2e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800799e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a2:	2202      	movs	r2, #2
 80079a4:	2101      	movs	r1, #1
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f004 fc9d 	bl	800c2e6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2210      	movs	r2, #16
 80079b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80079bc:	e016      	b.n	80079ec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079be:	2340      	movs	r3, #64	; 0x40
 80079c0:	2202      	movs	r2, #2
 80079c2:	2181      	movs	r1, #129	; 0x81
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f004 fc8e 	bl	800c2e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079d0:	2340      	movs	r3, #64	; 0x40
 80079d2:	2202      	movs	r2, #2
 80079d4:	2101      	movs	r1, #1
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f004 fc85 	bl	800c2e6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2210      	movs	r2, #16
 80079e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079ec:	2308      	movs	r3, #8
 80079ee:	2203      	movs	r2, #3
 80079f0:	2182      	movs	r1, #130	; 0x82
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f004 fc77 	bl	800c2e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7c1b      	ldrb	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f004 fd48 	bl	800c4c4 <USBD_LL_PrepareReceive>
 8007a34:	e007      	b.n	8007a46 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	2101      	movs	r1, #1
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f004 fd3f 	bl	800c4c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a60:	2181      	movs	r1, #129	; 0x81
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f004 fc65 	bl	800c332 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a6e:	2101      	movs	r1, #1
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f004 fc5e 	bl	800c332 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a7e:	2182      	movs	r1, #130	; 0x82
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f004 fc56 	bl	800c332 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00e      	beq.n	8007abe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f004 fd99 	bl	800c5e8 <free>
    pdev->pClassData = NULL;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ad8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d03a      	beq.n	8007b68 <USBD_CDC_Setup+0xa0>
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	f040 8097 	bne.w	8007c26 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	88db      	ldrh	r3, [r3, #6]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d029      	beq.n	8007b54 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	b25b      	sxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da11      	bge.n	8007b2e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007b16:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	88d2      	ldrh	r2, [r2, #6]
 8007b1c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b1e:	6939      	ldr	r1, [r7, #16]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	88db      	ldrh	r3, [r3, #6]
 8007b24:	461a      	mov	r2, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 fa9d 	bl	8009066 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007b2c:	e082      	b.n	8007c34 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	785a      	ldrb	r2, [r3, #1]
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	88db      	ldrh	r3, [r3, #6]
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b44:	6939      	ldr	r1, [r7, #16]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88db      	ldrh	r3, [r3, #6]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 fab6 	bl	80090be <USBD_CtlPrepareRx>
    break;
 8007b52:	e06f      	b.n	8007c34 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	7850      	ldrb	r0, [r2, #1]
 8007b60:	2200      	movs	r2, #0
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	4798      	blx	r3
    break;
 8007b66:	e065      	b.n	8007c34 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	2b0b      	cmp	r3, #11
 8007b6e:	d84f      	bhi.n	8007c10 <USBD_CDC_Setup+0x148>
 8007b70:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <USBD_CDC_Setup+0xb0>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007ba9 	.word	0x08007ba9
 8007b7c:	08007c1f 	.word	0x08007c1f
 8007b80:	08007c11 	.word	0x08007c11
 8007b84:	08007c11 	.word	0x08007c11
 8007b88:	08007c11 	.word	0x08007c11
 8007b8c:	08007c11 	.word	0x08007c11
 8007b90:	08007c11 	.word	0x08007c11
 8007b94:	08007c11 	.word	0x08007c11
 8007b98:	08007c11 	.word	0x08007c11
 8007b9c:	08007c11 	.word	0x08007c11
 8007ba0:	08007bd1 	.word	0x08007bd1
 8007ba4:	08007bf9 	.word	0x08007bf9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d107      	bne.n	8007bc2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007bb2:	f107 030c 	add.w	r3, r7, #12
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 fa53 	bl	8009066 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007bc0:	e030      	b.n	8007c24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f9dd 	bl	8008f84 <USBD_CtlError>
        ret = USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bce:	e029      	b.n	8007c24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d107      	bne.n	8007bea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bda:	f107 030f 	add.w	r3, r7, #15
 8007bde:	2201      	movs	r2, #1
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 fa3f 	bl	8009066 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007be8:	e01c      	b.n	8007c24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 f9c9 	bl	8008f84 <USBD_CtlError>
        ret = USBD_FAIL;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf6:	e015      	b.n	8007c24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d00f      	beq.n	8007c22 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 f9bd 	bl	8008f84 <USBD_CtlError>
        ret = USBD_FAIL;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007c0e:	e008      	b.n	8007c22 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 f9b6 	bl	8008f84 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c1c:	e002      	b.n	8007c24 <USBD_CDC_Setup+0x15c>
      break;
 8007c1e:	bf00      	nop
 8007c20:	e008      	b.n	8007c34 <USBD_CDC_Setup+0x16c>
      break;
 8007c22:	bf00      	nop
    }
    break;
 8007c24:	e006      	b.n	8007c34 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 f9ab 	bl	8008f84 <USBD_CtlError>
    ret = USBD_FAIL;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	75fb      	strb	r3, [r7, #23]
    break;
 8007c32:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop

08007c40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e049      	b.n	8007cf6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c6a:	78fa      	ldrb	r2, [r7, #3]
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	3318      	adds	r3, #24
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d029      	beq.n	8007cd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3318      	adds	r3, #24
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	78f9      	ldrb	r1, [r7, #3]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	460b      	mov	r3, r1
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	1a5b      	subs	r3, r3, r1
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4403      	add	r3, r0
 8007ca0:	3344      	adds	r3, #68	; 0x44
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ca8:	fb03 f301 	mul.w	r3, r3, r1
 8007cac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d110      	bne.n	8007cd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3318      	adds	r3, #24
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cc6:	78f9      	ldrb	r1, [r7, #3]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	2200      	movs	r2, #0
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f004 fbd8 	bl	800c482 <USBD_LL_Transmit>
 8007cd2:	e00f      	b.n	8007cf4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e015      	b.n	8007d4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f004 fbee 	bl	800c506 <USBD_LL_GetRxDataSize>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d46:	4611      	mov	r1, r2
 8007d48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d62:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d015      	beq.n	8007d9a <USBD_CDC_EP0_RxReady+0x46>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d74:	2bff      	cmp	r3, #255	; 0xff
 8007d76:	d010      	beq.n	8007d9a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d8e:	b292      	uxth	r2, r2
 8007d90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	22ff      	movs	r2, #255	; 0xff
 8007d96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2243      	movs	r2, #67	; 0x43
 8007db0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007db2:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20000094 	.word	0x20000094

08007dc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2243      	movs	r2, #67	; 0x43
 8007dd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007dd2:	4b03      	ldr	r3, [pc, #12]	; (8007de0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	20000050 	.word	0x20000050

08007de4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2243      	movs	r2, #67	; 0x43
 8007df0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	200000d8 	.word	0x200000d8

08007e04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	220a      	movs	r2, #10
 8007e10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e12:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	2000000c 	.word	0x2000000c

08007e24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e004      	b.n	8007e42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b087      	sub	sp, #28
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e90:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eb6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e01a      	b.n	8007f00 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d114      	bne.n	8007efe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ef2:	2181      	movs	r1, #129	; 0x81
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f004 fac4 	bl	800c482 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e016      	b.n	8007f54 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7c1b      	ldrb	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f38:	2101      	movs	r1, #1
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f004 fac2 	bl	800c4c4 <USBD_LL_PrepareReceive>
 8007f40:	e007      	b.n	8007f52 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f48:	2340      	movs	r3, #64	; 0x40
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f004 fab9 	bl	800c4c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e025      	b.n	8007fc0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	79fa      	ldrb	r2, [r7, #7]
 8007fb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f004 f92f 	bl	800c218 <USBD_LL_Init>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e010      	b.n	8008002 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff0:	f107 020e 	add.w	r2, r7, #14
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4798      	blx	r3
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f004 f94c 	bl	800c2b0 <USBD_LL_Start>
 8008018:	4603      	mov	r3, r0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008044:	2303      	movs	r3, #3
 8008046:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	4611      	mov	r1, r2
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	4611      	mov	r1, r2
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
  }

  return USBD_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 ff2c 	bl	8008f10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080c6:	461a      	mov	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d00e      	beq.n	80080fa <USBD_LL_SetupStage+0x5a>
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d302      	bcc.n	80080e6 <USBD_LL_SetupStage+0x46>
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d014      	beq.n	800810e <USBD_LL_SetupStage+0x6e>
 80080e4:	e01d      	b.n	8008122 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa18 	bl	8008524 <USBD_StdDevReq>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
      break;
 80080f8:	e020      	b.n	800813c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa7c 	bl	8008600 <USBD_StdItfReq>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]
      break;
 800810c:	e016      	b.n	800813c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fab8 	bl	800868c <USBD_StdEPReq>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]
      break;
 8008120:	e00c      	b.n	800813c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800812c:	b2db      	uxtb	r3, r3
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f004 f91d 	bl	800c370 <USBD_LL_StallEP>
 8008136:	4603      	mov	r3, r0
 8008138:	73fb      	strb	r3, [r7, #15]
      break;
 800813a:	bf00      	nop
  }

  return ret;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b086      	sub	sp, #24
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	460b      	mov	r3, r1
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d137      	bne.n	80081ca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008160:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008168:	2b03      	cmp	r3, #3
 800816a:	d14a      	bne.n	8008202 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	689a      	ldr	r2, [r3, #8]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	429a      	cmp	r2, r3
 8008176:	d913      	bls.n	80081a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	1ad2      	subs	r2, r2, r3
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	4293      	cmp	r3, r2
 8008190:	bf28      	it	cs
 8008192:	4613      	movcs	r3, r2
 8008194:	461a      	mov	r2, r3
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 ffad 	bl	80090f8 <USBD_CtlContinueRx>
 800819e:	e030      	b.n	8008202 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d105      	bne.n	80081c2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 ffa9 	bl	800911a <USBD_CtlSendStatus>
 80081c8:	e01b      	b.n	8008202 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d013      	beq.n	80081fe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d10e      	bne.n	80081fe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	7afa      	ldrb	r2, [r7, #11]
 80081ea:	4611      	mov	r1, r2
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	4798      	blx	r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	e002      	b.n	8008204 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081fe:	2303      	movs	r3, #3
 8008200:	e000      	b.n	8008204 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	460b      	mov	r3, r1
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d16a      	bne.n	80082f6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3314      	adds	r3, #20
 8008224:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800822c:	2b02      	cmp	r3, #2
 800822e:	d155      	bne.n	80082dc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	429a      	cmp	r2, r3
 800823a:	d914      	bls.n	8008266 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	1ad2      	subs	r2, r2, r3
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	461a      	mov	r2, r3
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 ff22 	bl	800909c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008258:	2300      	movs	r3, #0
 800825a:	2200      	movs	r2, #0
 800825c:	2100      	movs	r1, #0
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f004 f930 	bl	800c4c4 <USBD_LL_PrepareReceive>
 8008264:	e03a      	b.n	80082dc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	429a      	cmp	r2, r3
 8008270:	d11c      	bne.n	80082ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800827a:	429a      	cmp	r2, r3
 800827c:	d316      	bcc.n	80082ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008288:	429a      	cmp	r2, r3
 800828a:	d20f      	bcs.n	80082ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800828c:	2200      	movs	r2, #0
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 ff03 	bl	800909c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800829e:	2300      	movs	r3, #0
 80082a0:	2200      	movs	r2, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f004 f90d 	bl	800c4c4 <USBD_LL_PrepareReceive>
 80082aa:	e017      	b.n	80082dc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d105      	bne.n	80082ce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082ce:	2180      	movs	r1, #128	; 0x80
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f004 f84d 	bl	800c370 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 ff32 	bl	8009140 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d123      	bne.n	800832e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fe9b 	bl	8008022 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082f4:	e01b      	b.n	800832e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d013      	beq.n	800832a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008308:	2b03      	cmp	r3, #3
 800830a:	d10e      	bne.n	800832a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	7afa      	ldrb	r2, [r7, #11]
 8008316:	4611      	mov	r1, r2
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	4798      	blx	r3
 800831c:	4603      	mov	r3, r0
 800831e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	e002      	b.n	8008330 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800832a:	2303      	movs	r3, #3
 800832c:	e000      	b.n	8008330 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6852      	ldr	r2, [r2, #4]
 8008374:	b2d2      	uxtb	r2, r2
 8008376:	4611      	mov	r1, r2
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f003 ffaf 	bl	800c2e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2240      	movs	r2, #64	; 0x40
 8008394:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008398:	2340      	movs	r3, #64	; 0x40
 800839a:	2200      	movs	r2, #0
 800839c:	2180      	movs	r1, #128	; 0x80
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f003 ffa1 	bl	800c2e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2240      	movs	r2, #64	; 0x40
 80083ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	78fa      	ldrb	r2, [r7, #3]
 80083ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2204      	movs	r2, #4
 80083f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008412:	2b04      	cmp	r3, #4
 8008414:	d105      	bne.n	8008422 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843e:	2b03      	cmp	r3, #3
 8008440:	d10b      	bne.n	800845a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d009      	beq.n	80084dc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6852      	ldr	r2, [r2, #4]
 80084d4:	b2d2      	uxtb	r2, r2
 80084d6:	4611      	mov	r1, r2
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
  }

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b087      	sub	sp, #28
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	3301      	adds	r3, #1
 80084fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008504:	8a3b      	ldrh	r3, [r7, #16]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	b21a      	sxth	r2, r3
 800850a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800850e:	4313      	orrs	r3, r2
 8008510:	b21b      	sxth	r3, r3
 8008512:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008514:	89fb      	ldrh	r3, [r7, #14]
}
 8008516:	4618      	mov	r0, r3
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800853a:	2b20      	cmp	r3, #32
 800853c:	d004      	beq.n	8008548 <USBD_StdDevReq+0x24>
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	d002      	beq.n	8008548 <USBD_StdDevReq+0x24>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <USBD_StdDevReq+0x38>
 8008546:	e050      	b.n	80085ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
    break;
 800855a:	e04b      	b.n	80085f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	2b09      	cmp	r3, #9
 8008562:	d83c      	bhi.n	80085de <USBD_StdDevReq+0xba>
 8008564:	a201      	add	r2, pc, #4	; (adr r2, 800856c <USBD_StdDevReq+0x48>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	080085c1 	.word	0x080085c1
 8008570:	080085d5 	.word	0x080085d5
 8008574:	080085df 	.word	0x080085df
 8008578:	080085cb 	.word	0x080085cb
 800857c:	080085df 	.word	0x080085df
 8008580:	0800859f 	.word	0x0800859f
 8008584:	08008595 	.word	0x08008595
 8008588:	080085df 	.word	0x080085df
 800858c:	080085b7 	.word	0x080085b7
 8008590:	080085a9 	.word	0x080085a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9ce 	bl	8008938 <USBD_GetDescriptor>
      break;
 800859c:	e024      	b.n	80085e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fb33 	bl	8008c0c <USBD_SetAddress>
      break;
 80085a6:	e01f      	b.n	80085e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fb70 	bl	8008c90 <USBD_SetConfig>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]
      break;
 80085b4:	e018      	b.n	80085e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fc0d 	bl	8008dd8 <USBD_GetConfig>
      break;
 80085be:	e013      	b.n	80085e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fc3c 	bl	8008e40 <USBD_GetStatus>
      break;
 80085c8:	e00e      	b.n	80085e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fc6a 	bl	8008ea6 <USBD_SetFeature>
      break;
 80085d2:	e009      	b.n	80085e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fc79 	bl	8008ece <USBD_ClrFeature>
      break;
 80085dc:	e004      	b.n	80085e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fccf 	bl	8008f84 <USBD_CtlError>
      break;
 80085e6:	bf00      	nop
    }
    break;
 80085e8:	e004      	b.n	80085f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fcc9 	bl	8008f84 <USBD_CtlError>
    break;
 80085f2:	bf00      	nop
  }

  return ret;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop

08008600 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008616:	2b20      	cmp	r3, #32
 8008618:	d003      	beq.n	8008622 <USBD_StdItfReq+0x22>
 800861a:	2b40      	cmp	r3, #64	; 0x40
 800861c:	d001      	beq.n	8008622 <USBD_StdItfReq+0x22>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d12a      	bne.n	8008678 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	3b01      	subs	r3, #1
 800862a:	2b02      	cmp	r3, #2
 800862c:	d81d      	bhi.n	800866a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	889b      	ldrh	r3, [r3, #4]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	d813      	bhi.n	8008660 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
 8008646:	4603      	mov	r3, r0
 8008648:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d110      	bne.n	8008674 <USBD_StdItfReq+0x74>
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10d      	bne.n	8008674 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fd5e 	bl	800911a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800865e:	e009      	b.n	8008674 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fc8e 	bl	8008f84 <USBD_CtlError>
      break;
 8008668:	e004      	b.n	8008674 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fc89 	bl	8008f84 <USBD_CtlError>
      break;
 8008672:	e000      	b.n	8008676 <USBD_StdItfReq+0x76>
      break;
 8008674:	bf00      	nop
    }
    break;
 8008676:	e004      	b.n	8008682 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fc82 	bl	8008f84 <USBD_CtlError>
    break;
 8008680:	bf00      	nop
  }

  return ret;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	889b      	ldrh	r3, [r3, #4]
 800869e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d004      	beq.n	80086b6 <USBD_StdEPReq+0x2a>
 80086ac:	2b40      	cmp	r3, #64	; 0x40
 80086ae:	d002      	beq.n	80086b6 <USBD_StdEPReq+0x2a>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <USBD_StdEPReq+0x3e>
 80086b4:	e135      	b.n	8008922 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	4798      	blx	r3
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]
    break;
 80086c8:	e130      	b.n	800892c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d03e      	beq.n	8008750 <USBD_StdEPReq+0xc4>
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d002      	beq.n	80086dc <USBD_StdEPReq+0x50>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d077      	beq.n	80087ca <USBD_StdEPReq+0x13e>
 80086da:	e11c      	b.n	8008916 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d002      	beq.n	80086ec <USBD_StdEPReq+0x60>
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d015      	beq.n	8008716 <USBD_StdEPReq+0x8a>
 80086ea:	e02b      	b.n	8008744 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00c      	beq.n	800870c <USBD_StdEPReq+0x80>
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b80      	cmp	r3, #128	; 0x80
 80086f6:	d009      	beq.n	800870c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f003 fe37 	bl	800c370 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008702:	2180      	movs	r1, #128	; 0x80
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f003 fe33 	bl	800c370 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800870a:	e020      	b.n	800874e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fc38 	bl	8008f84 <USBD_CtlError>
        break;
 8008714:	e01b      	b.n	800874e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	885b      	ldrh	r3, [r3, #2]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10e      	bne.n	800873c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00b      	beq.n	800873c <USBD_StdEPReq+0xb0>
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b80      	cmp	r3, #128	; 0x80
 8008728:	d008      	beq.n	800873c <USBD_StdEPReq+0xb0>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	88db      	ldrh	r3, [r3, #6]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d104      	bne.n	800873c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f003 fe1a 	bl	800c370 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fcec 	bl	800911a <USBD_CtlSendStatus>

        break;
 8008742:	e004      	b.n	800874e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fc1c 	bl	8008f84 <USBD_CtlError>
        break;
 800874c:	bf00      	nop
      }
      break;
 800874e:	e0e7      	b.n	8008920 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008756:	2b02      	cmp	r3, #2
 8008758:	d002      	beq.n	8008760 <USBD_StdEPReq+0xd4>
 800875a:	2b03      	cmp	r3, #3
 800875c:	d015      	beq.n	800878a <USBD_StdEPReq+0xfe>
 800875e:	e02d      	b.n	80087bc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00c      	beq.n	8008780 <USBD_StdEPReq+0xf4>
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	2b80      	cmp	r3, #128	; 0x80
 800876a:	d009      	beq.n	8008780 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f003 fdfd 	bl	800c370 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008776:	2180      	movs	r1, #128	; 0x80
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f003 fdf9 	bl	800c370 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800877e:	e023      	b.n	80087c8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fbfe 	bl	8008f84 <USBD_CtlError>
        break;
 8008788:	e01e      	b.n	80087c8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	885b      	ldrh	r3, [r3, #2]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d119      	bne.n	80087c6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f003 fe04 	bl	800c3ae <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fcb7 	bl	800911a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	4798      	blx	r3
        }
        break;
 80087ba:	e004      	b.n	80087c6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fbe0 	bl	8008f84 <USBD_CtlError>
        break;
 80087c4:	e000      	b.n	80087c8 <USBD_StdEPReq+0x13c>
        break;
 80087c6:	bf00      	nop
      }
      break;
 80087c8:	e0aa      	b.n	8008920 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d002      	beq.n	80087da <USBD_StdEPReq+0x14e>
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d032      	beq.n	800883e <USBD_StdEPReq+0x1b2>
 80087d8:	e097      	b.n	800890a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d007      	beq.n	80087f0 <USBD_StdEPReq+0x164>
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	2b80      	cmp	r3, #128	; 0x80
 80087e4:	d004      	beq.n	80087f0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fbcb 	bl	8008f84 <USBD_CtlError>
          break;
 80087ee:	e091      	b.n	8008914 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	da0b      	bge.n	8008810 <USBD_StdEPReq+0x184>
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	3310      	adds	r3, #16
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	3304      	adds	r3, #4
 800880e:	e00b      	b.n	8008828 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	3304      	adds	r3, #4
 8008828:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2202      	movs	r2, #2
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fc15 	bl	8009066 <USBD_CtlSendData>
        break;
 800883c:	e06a      	b.n	8008914 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800883e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008842:	2b00      	cmp	r3, #0
 8008844:	da11      	bge.n	800886a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	f003 020f 	and.w	r2, r3, #15
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	3324      	adds	r3, #36	; 0x24
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d117      	bne.n	8008890 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fb8e 	bl	8008f84 <USBD_CtlError>
            break;
 8008868:	e054      	b.n	8008914 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	f003 020f 	and.w	r2, r3, #15
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	440b      	add	r3, r1
 800887c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d104      	bne.n	8008890 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fb7b 	bl	8008f84 <USBD_CtlError>
            break;
 800888e:	e041      	b.n	8008914 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008894:	2b00      	cmp	r3, #0
 8008896:	da0b      	bge.n	80088b0 <USBD_StdEPReq+0x224>
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	3310      	adds	r3, #16
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	4413      	add	r3, r2
 80088ac:	3304      	adds	r3, #4
 80088ae:	e00b      	b.n	80088c8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	4413      	add	r3, r2
 80088c6:	3304      	adds	r3, #4
 80088c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <USBD_StdEPReq+0x24a>
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	2b80      	cmp	r3, #128	; 0x80
 80088d4:	d103      	bne.n	80088de <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e00e      	b.n	80088fc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f003 fd82 	bl	800c3ec <USBD_LL_IsStallEP>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2201      	movs	r2, #1
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	e002      	b.n	80088fc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2202      	movs	r2, #2
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fbaf 	bl	8009066 <USBD_CtlSendData>
          break;
 8008908:	e004      	b.n	8008914 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fb39 	bl	8008f84 <USBD_CtlError>
        break;
 8008912:	bf00      	nop
      }
      break;
 8008914:	e004      	b.n	8008920 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fb33 	bl	8008f84 <USBD_CtlError>
      break;
 800891e:	bf00      	nop
    }
    break;
 8008920:	e004      	b.n	800892c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fb2d 	bl	8008f84 <USBD_CtlError>
    break;
 800892a:	bf00      	nop
  }

  return ret;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	885b      	ldrh	r3, [r3, #2]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	2b06      	cmp	r3, #6
 800895a:	f200 8128 	bhi.w	8008bae <USBD_GetDescriptor+0x276>
 800895e:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <USBD_GetDescriptor+0x2c>)
 8008960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008964:	08008981 	.word	0x08008981
 8008968:	08008999 	.word	0x08008999
 800896c:	080089d9 	.word	0x080089d9
 8008970:	08008baf 	.word	0x08008baf
 8008974:	08008baf 	.word	0x08008baf
 8008978:	08008b4f 	.word	0x08008b4f
 800897c:	08008b7b 	.word	0x08008b7b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
    break;
 8008996:	e112      	b.n	8008bbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7c1b      	ldrb	r3, [r3, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10d      	bne.n	80089bc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	f107 0208 	add.w	r2, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3301      	adds	r3, #1
 80089b6:	2202      	movs	r2, #2
 80089b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80089ba:	e100      	b.n	8008bbe <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	f107 0208 	add.w	r2, r7, #8
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
 80089cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3301      	adds	r3, #1
 80089d2:	2202      	movs	r2, #2
 80089d4:	701a      	strb	r2, [r3, #0]
    break;
 80089d6:	e0f2      	b.n	8008bbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b05      	cmp	r3, #5
 80089e0:	f200 80ac 	bhi.w	8008b3c <USBD_GetDescriptor+0x204>
 80089e4:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <USBD_GetDescriptor+0xb4>)
 80089e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ea:	bf00      	nop
 80089ec:	08008a05 	.word	0x08008a05
 80089f0:	08008a39 	.word	0x08008a39
 80089f4:	08008a6d 	.word	0x08008a6d
 80089f8:	08008aa1 	.word	0x08008aa1
 80089fc:	08008ad5 	.word	0x08008ad5
 8008a00:	08008b09 	.word	0x08008b09
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a26:	e091      	b.n	8008b4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 faaa 	bl	8008f84 <USBD_CtlError>
        err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
      break;
 8008a36:	e089      	b.n	8008b4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a5a:	e077      	b.n	8008b4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa90 	bl	8008f84 <USBD_CtlError>
        err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
      break;
 8008a6a:	e06f      	b.n	8008b4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a8e:	e05d      	b.n	8008b4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa76 	bl	8008f84 <USBD_CtlError>
        err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a9e:	e055      	b.n	8008b4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7c12      	ldrb	r2, [r2, #16]
 8008ab8:	f107 0108 	add.w	r1, r7, #8
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac2:	e043      	b.n	8008b4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa5c 	bl	8008f84 <USBD_CtlError>
        err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad2:	e03b      	b.n	8008b4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008af6:	e029      	b.n	8008b4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa42 	bl	8008f84 <USBD_CtlError>
        err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
      break;
 8008b06:	e021      	b.n	8008b4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 0108 	add.w	r1, r7, #8
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b2a:	e00f      	b.n	8008b4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa28 	bl	8008f84 <USBD_CtlError>
        err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
      break;
 8008b3a:	e007      	b.n	8008b4c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa20 	bl	8008f84 <USBD_CtlError>
      err++;
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	3301      	adds	r3, #1
 8008b48:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008b4a:	bf00      	nop
    }
    break;
 8008b4c:	e037      	b.n	8008bbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	7c1b      	ldrb	r3, [r3, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	f107 0208 	add.w	r2, r7, #8
 8008b62:	4610      	mov	r0, r2
 8008b64:	4798      	blx	r3
 8008b66:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b68:	e029      	b.n	8008bbe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa09 	bl	8008f84 <USBD_CtlError>
      err++;
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	3301      	adds	r3, #1
 8008b76:	72fb      	strb	r3, [r7, #11]
    break;
 8008b78:	e021      	b.n	8008bbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	7c1b      	ldrb	r3, [r3, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10d      	bne.n	8008b9e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	f107 0208 	add.w	r2, r7, #8
 8008b8e:	4610      	mov	r0, r2
 8008b90:	4798      	blx	r3
 8008b92:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	2207      	movs	r2, #7
 8008b9a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b9c:	e00f      	b.n	8008bbe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f9ef 	bl	8008f84 <USBD_CtlError>
      err++;
 8008ba6:	7afb      	ldrb	r3, [r7, #11]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	72fb      	strb	r3, [r7, #11]
    break;
 8008bac:	e007      	b.n	8008bbe <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f9e7 	bl	8008f84 <USBD_CtlError>
    err++;
 8008bb6:	7afb      	ldrb	r3, [r7, #11]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	72fb      	strb	r3, [r7, #11]
    break;
 8008bbc:	bf00      	nop
  }

  if (err != 0U)
 8008bbe:	7afb      	ldrb	r3, [r7, #11]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11e      	bne.n	8008c02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	88db      	ldrh	r3, [r3, #6]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d016      	beq.n	8008bfa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008bcc:	893b      	ldrh	r3, [r7, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00e      	beq.n	8008bf0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	88da      	ldrh	r2, [r3, #6]
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	bf28      	it	cs
 8008bdc:	4613      	movcs	r3, r2
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008be2:	893b      	ldrh	r3, [r7, #8]
 8008be4:	461a      	mov	r2, r3
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa3c 	bl	8009066 <USBD_CtlSendData>
 8008bee:	e009      	b.n	8008c04 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f9c6 	bl	8008f84 <USBD_CtlError>
 8008bf8:	e004      	b.n	8008c04 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa8d 	bl	800911a <USBD_CtlSendStatus>
 8008c00:	e000      	b.n	8008c04 <USBD_GetDescriptor+0x2cc>
    return;
 8008c02:	bf00      	nop
    }
  }
}
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop

08008c0c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	889b      	ldrh	r3, [r3, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d130      	bne.n	8008c80 <USBD_SetAddress+0x74>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d12c      	bne.n	8008c80 <USBD_SetAddress+0x74>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	885b      	ldrh	r3, [r3, #2]
 8008c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c2c:	d828      	bhi.n	8008c80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	885b      	ldrh	r3, [r3, #2]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d104      	bne.n	8008c4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f99c 	bl	8008f84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4c:	e01c      	b.n	8008c88 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	7bfa      	ldrb	r2, [r7, #15]
 8008c52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f003 fbf2 	bl	800c444 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fa5a 	bl	800911a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c74:	e008      	b.n	8008c88 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7e:	e003      	b.n	8008c88 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f97e 	bl	8008f84 <USBD_CtlError>
  }
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	885b      	ldrh	r3, [r3, #2]
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	4b4b      	ldr	r3, [pc, #300]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008ca6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ca8:	4b4a      	ldr	r3, [pc, #296]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d905      	bls.n	8008cbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f966 	bl	8008f84 <USBD_CtlError>
    return USBD_FAIL;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e087      	b.n	8008dcc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d002      	beq.n	8008ccc <USBD_SetConfig+0x3c>
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d025      	beq.n	8008d16 <USBD_SetConfig+0x86>
 8008cca:	e071      	b.n	8008db0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008ccc:	4b41      	ldr	r3, [pc, #260]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d01c      	beq.n	8008d0e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008cd4:	4b3f      	ldr	r3, [pc, #252]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cde:	4b3d      	ldr	r3, [pc, #244]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff f9a7 	bl	8008038 <USBD_SetClassConfig>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d004      	beq.n	8008cfe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f944 	bl	8008f84 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008cfc:	e065      	b.n	8008dca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fa0b 	bl	800911a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2203      	movs	r2, #3
 8008d08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d0c:	e05d      	b.n	8008dca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fa03 	bl	800911a <USBD_CtlSendStatus>
    break;
 8008d14:	e059      	b.n	8008dca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008d16:	4b2f      	ldr	r3, [pc, #188]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d112      	bne.n	8008d44 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2202      	movs	r2, #2
 8008d22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008d26:	4b2b      	ldr	r3, [pc, #172]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d30:	4b28      	ldr	r3, [pc, #160]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff f99a 	bl	8008070 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f9ec 	bl	800911a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d42:	e042      	b.n	8008dca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008d44:	4b23      	ldr	r3, [pc, #140]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d02a      	beq.n	8008da8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff f988 	bl	8008070 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008d60:	4b1c      	ldr	r3, [pc, #112]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d6a:	4b1a      	ldr	r3, [pc, #104]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff f961 	bl	8008038 <USBD_SetClassConfig>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00f      	beq.n	8008da0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f8fe 	bl	8008f84 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff f96d 	bl	8008070 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d9e:	e014      	b.n	8008dca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f9ba 	bl	800911a <USBD_CtlSendStatus>
    break;
 8008da6:	e010      	b.n	8008dca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f9b6 	bl	800911a <USBD_CtlSendStatus>
    break;
 8008dae:	e00c      	b.n	8008dca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f8e6 	bl	8008f84 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008db8:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <USBD_SetConfig+0x144>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7ff f956 	bl	8008070 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc8:	bf00      	nop
  }

  return ret;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	2000037c 	.word	0x2000037c

08008dd8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	88db      	ldrh	r3, [r3, #6]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d004      	beq.n	8008df4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f8c9 	bl	8008f84 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008df2:	e021      	b.n	8008e38 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	db17      	blt.n	8008e2e <USBD_GetConfig+0x56>
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	dd02      	ble.n	8008e08 <USBD_GetConfig+0x30>
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d00b      	beq.n	8008e1e <USBD_GetConfig+0x46>
 8008e06:	e012      	b.n	8008e2e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3308      	adds	r3, #8
 8008e12:	2201      	movs	r2, #1
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f925 	bl	8009066 <USBD_CtlSendData>
      break;
 8008e1c:	e00c      	b.n	8008e38 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3304      	adds	r3, #4
 8008e22:	2201      	movs	r2, #1
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f91d 	bl	8009066 <USBD_CtlSendData>
      break;
 8008e2c:	e004      	b.n	8008e38 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f8a7 	bl	8008f84 <USBD_CtlError>
      break;
 8008e36:	bf00      	nop
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e50:	3b01      	subs	r3, #1
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d81e      	bhi.n	8008e94 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	88db      	ldrh	r3, [r3, #6]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d004      	beq.n	8008e68 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f88f 	bl	8008f84 <USBD_CtlError>
      break;
 8008e66:	e01a      	b.n	8008e9e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f043 0202 	orr.w	r2, r3, #2
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	330c      	adds	r3, #12
 8008e88:	2202      	movs	r2, #2
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f8ea 	bl	8009066 <USBD_CtlSendData>
    break;
 8008e92:	e004      	b.n	8008e9e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f874 	bl	8008f84 <USBD_CtlError>
    break;
 8008e9c:	bf00      	nop
  }
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	885b      	ldrh	r3, [r3, #2]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d106      	bne.n	8008ec6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f92a 	bl	800911a <USBD_CtlSendStatus>
  }
}
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d80b      	bhi.n	8008efc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	885b      	ldrh	r3, [r3, #2]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d10c      	bne.n	8008f06 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f910 	bl	800911a <USBD_CtlSendStatus>
      }
      break;
 8008efa:	e004      	b.n	8008f06 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f840 	bl	8008f84 <USBD_CtlError>
      break;
 8008f04:	e000      	b.n	8008f08 <USBD_ClrFeature+0x3a>
      break;
 8008f06:	bf00      	nop
  }
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	781a      	ldrb	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3301      	adds	r3, #1
 8008f38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7ff fad3 	bl	80084e6 <SWAPBYTE>
 8008f40:	4603      	mov	r3, r0
 8008f42:	461a      	mov	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3301      	adds	r3, #1
 8008f52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fac6 	bl	80084e6 <SWAPBYTE>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7ff fab9 	bl	80084e6 <SWAPBYTE>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	80da      	strh	r2, [r3, #6]
}
 8008f7c:	bf00      	nop
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f8e:	2180      	movs	r1, #128	; 0x80
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f003 f9ed 	bl	800c370 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f96:	2100      	movs	r1, #0
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f003 f9e9 	bl	800c370 <USBD_LL_StallEP>
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b086      	sub	sp, #24
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d036      	beq.n	800902a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fc0:	6938      	ldr	r0, [r7, #16]
 8008fc2:	f000 f836 	bl	8009032 <USBD_GetLen>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	3301      	adds	r3, #1
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4413      	add	r3, r2
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	7812      	ldrb	r2, [r2, #0]
 8008fde:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	4413      	add	r3, r2
 8008fec:	2203      	movs	r2, #3
 8008fee:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ff6:	e013      	b.n	8009020 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	7812      	ldrb	r2, [r2, #0]
 8009002:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	3301      	adds	r3, #1
 8009008:	613b      	str	r3, [r7, #16]
    idx++;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	3301      	adds	r3, #1
 800900e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	4413      	add	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	701a      	strb	r2, [r3, #0]
    idx++;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	3301      	adds	r3, #1
 800901e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e7      	bne.n	8008ff8 <USBD_GetString+0x52>
 8009028:	e000      	b.n	800902c <USBD_GetString+0x86>
    return;
 800902a:	bf00      	nop
  }
}
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009032:	b480      	push	{r7}
 8009034:	b085      	sub	sp, #20
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009042:	e005      	b.n	8009050 <USBD_GetLen+0x1e>
  {
    len++;
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	3301      	adds	r3, #1
 8009048:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	3301      	adds	r3, #1
 800904e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f5      	bne.n	8009044 <USBD_GetLen+0x12>
  }

  return len;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2202      	movs	r2, #2
 8009076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	2100      	movs	r1, #0
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f003 f9f8 	bl	800c482 <USBD_LL_Transmit>

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	2100      	movs	r1, #0
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f003 f9e7 	bl	800c482 <USBD_LL_Transmit>

  return USBD_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2203      	movs	r2, #3
 80090ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	2100      	movs	r1, #0
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f003 f9eb 	bl	800c4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	2100      	movs	r1, #0
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f003 f9da 	bl	800c4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2204      	movs	r2, #4
 8009126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800912a:	2300      	movs	r3, #0
 800912c:	2200      	movs	r2, #0
 800912e:	2100      	movs	r1, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f003 f9a6 	bl	800c482 <USBD_LL_Transmit>

  return USBD_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2205      	movs	r2, #5
 800914c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009150:	2300      	movs	r3, #0
 8009152:	2200      	movs	r2, #0
 8009154:	2100      	movs	r1, #0
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f003 f9b4 	bl	800c4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <osKernelInitialize>:
#endif
}

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800916e:	f3ef 8305 	mrs	r3, IPSR
 8009172:	60bb      	str	r3, [r7, #8]
  return(result);
 8009174:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10f      	bne.n	800919a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917a:	f3ef 8310 	mrs	r3, PRIMASK
 800917e:	607b      	str	r3, [r7, #4]
  return(result);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d105      	bne.n	8009192 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009186:	f3ef 8311 	mrs	r3, BASEPRI
 800918a:	603b      	str	r3, [r7, #0]
  return(result);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <osKernelInitialize+0x3a>
 8009192:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <osKernelInitialize+0x64>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d103      	bne.n	80091a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800919a:	f06f 0305 	mvn.w	r3, #5
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	e00c      	b.n	80091bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80091a2:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <osKernelInitialize+0x64>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80091aa:	4b08      	ldr	r3, [pc, #32]	; (80091cc <osKernelInitialize+0x64>)
 80091ac:	2201      	movs	r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	e002      	b.n	80091bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80091b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80091bc:	68fb      	ldr	r3, [r7, #12]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	20000380 	.word	0x20000380

080091d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b090      	sub	sp, #64	; 0x40
 80091d4:	af04      	add	r7, sp, #16
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091e0:	f3ef 8305 	mrs	r3, IPSR
 80091e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80091e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 808f 	bne.w	800930c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ee:	f3ef 8310 	mrs	r3, PRIMASK
 80091f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d105      	bne.n	8009206 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091fa:	f3ef 8311 	mrs	r3, BASEPRI
 80091fe:	617b      	str	r3, [r7, #20]
  return(result);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <osThreadNew+0x3e>
 8009206:	4b44      	ldr	r3, [pc, #272]	; (8009318 <osThreadNew+0x148>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b02      	cmp	r3, #2
 800920c:	d07e      	beq.n	800930c <osThreadNew+0x13c>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d07b      	beq.n	800930c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009214:	2380      	movs	r3, #128	; 0x80
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009218:	2318      	movs	r3, #24
 800921a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800921c:	2300      	movs	r3, #0
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009224:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d045      	beq.n	80092b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <osThreadNew+0x6a>
        name = attr->name;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <osThreadNew+0x90>
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	2b38      	cmp	r3, #56	; 0x38
 8009252:	d805      	bhi.n	8009260 <osThreadNew+0x90>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <osThreadNew+0x94>
        return (NULL);
 8009260:	2300      	movs	r3, #0
 8009262:	e054      	b.n	800930e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	089b      	lsrs	r3, r3, #2
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00e      	beq.n	800929a <osThreadNew+0xca>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	2b5b      	cmp	r3, #91	; 0x5b
 8009282:	d90a      	bls.n	800929a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009288:	2b00      	cmp	r3, #0
 800928a:	d006      	beq.n	800929a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <osThreadNew+0xca>
        mem = 1;
 8009294:	2301      	movs	r3, #1
 8009296:	623b      	str	r3, [r7, #32]
 8009298:	e010      	b.n	80092bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10c      	bne.n	80092bc <osThreadNew+0xec>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d108      	bne.n	80092bc <osThreadNew+0xec>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <osThreadNew+0xec>
          mem = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	623b      	str	r3, [r7, #32]
 80092b6:	e001      	b.n	80092bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d110      	bne.n	80092e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092ca:	9202      	str	r2, [sp, #8]
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 fe09 	bl	8009ef0 <xTaskCreateStatic>
 80092de:	4603      	mov	r3, r0
 80092e0:	613b      	str	r3, [r7, #16]
 80092e2:	e013      	b.n	800930c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d110      	bne.n	800930c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	f107 0310 	add.w	r3, r7, #16
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 fe51 	bl	8009fa4 <xTaskCreate>
 8009302:	4603      	mov	r3, r0
 8009304:	2b01      	cmp	r3, #1
 8009306:	d001      	beq.n	800930c <osThreadNew+0x13c>
          hTask = NULL;
 8009308:	2300      	movs	r3, #0
 800930a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800930c:	693b      	ldr	r3, [r7, #16]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3730      	adds	r7, #48	; 0x30
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000380 	.word	0x20000380

0800931c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009324:	f3ef 8305 	mrs	r3, IPSR
 8009328:	613b      	str	r3, [r7, #16]
  return(result);
 800932a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10f      	bne.n	8009350 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009330:	f3ef 8310 	mrs	r3, PRIMASK
 8009334:	60fb      	str	r3, [r7, #12]
  return(result);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800933c:	f3ef 8311 	mrs	r3, BASEPRI
 8009340:	60bb      	str	r3, [r7, #8]
  return(result);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <osDelay+0x3c>
 8009348:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <osDelay+0x58>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d103      	bne.n	8009358 <osDelay+0x3c>
    stat = osErrorISR;
 8009350:	f06f 0305 	mvn.w	r3, #5
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e007      	b.n	8009368 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009358:	2300      	movs	r3, #0
 800935a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 ff62 	bl	800a22c <vTaskDelay>
    }
  }

  return (stat);
 8009368:	697b      	ldr	r3, [r7, #20]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20000380 	.word	0x20000380

08009378 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4a07      	ldr	r2, [pc, #28]	; (80093a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	4a06      	ldr	r2, [pc, #24]	; (80093a8 <vApplicationGetIdleTaskMemory+0x30>)
 800938e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2280      	movs	r2, #128	; 0x80
 8009394:	601a      	str	r2, [r3, #0]
}
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000384 	.word	0x20000384
 80093a8:	200003e0 	.word	0x200003e0

080093ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4a07      	ldr	r2, [pc, #28]	; (80093d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80093bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	4a06      	ldr	r2, [pc, #24]	; (80093dc <vApplicationGetTimerTaskMemory+0x30>)
 80093c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093ca:	601a      	str	r2, [r3, #0]
}
 80093cc:	bf00      	nop
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	200005e0 	.word	0x200005e0
 80093dc:	2000063c 	.word	0x2000063c

080093e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f103 0208 	add.w	r2, r3, #8
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f103 0208 	add.w	r2, r3, #8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f103 0208 	add.w	r2, r3, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	601a      	str	r2, [r3, #0]
}
 8009476:	bf00      	nop
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009498:	d103      	bne.n	80094a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e00c      	b.n	80094bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3308      	adds	r3, #8
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	e002      	b.n	80094b0 <vListInsert+0x2e>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d2f6      	bcs.n	80094aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	685a      	ldr	r2, [r3, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	601a      	str	r2, [r3, #0]
}
 80094e8:	bf00      	nop
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6892      	ldr	r2, [r2, #8]
 800950a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	6852      	ldr	r2, [r2, #4]
 8009514:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d103      	bne.n	8009528 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	1e5a      	subs	r2, r3, #1
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d109      	bne.n	8009570 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	60bb      	str	r3, [r7, #8]
 800956e:	e7fe      	b.n	800956e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009570:	f002 f814 	bl	800b59c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957c:	68f9      	ldr	r1, [r7, #12]
 800957e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009580:	fb01 f303 	mul.w	r3, r1, r3
 8009584:	441a      	add	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a0:	3b01      	subs	r3, #1
 80095a2:	68f9      	ldr	r1, [r7, #12]
 80095a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095a6:	fb01 f303 	mul.w	r3, r1, r3
 80095aa:	441a      	add	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	22ff      	movs	r2, #255	; 0xff
 80095b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	22ff      	movs	r2, #255	; 0xff
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d114      	bne.n	80095f0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d01a      	beq.n	8009604 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3310      	adds	r3, #16
 80095d2:	4618      	mov	r0, r3
 80095d4:	f001 f8de 	bl	800a794 <xTaskRemoveFromEventList>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d012      	beq.n	8009604 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095de:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <xQueueGenericReset+0xcc>)
 80095e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	e009      	b.n	8009604 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3310      	adds	r3, #16
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff fef3 	bl	80093e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	3324      	adds	r3, #36	; 0x24
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff feee 	bl	80093e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009604:	f001 fff8 	bl	800b5f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009608:	2301      	movs	r3, #1
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08e      	sub	sp, #56	; 0x38
 800961c:	af02      	add	r7, sp, #8
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d109      	bne.n	8009640 <xQueueGenericCreateStatic+0x28>
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
 800963e:	e7fe      	b.n	800963e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d109      	bne.n	800965a <xQueueGenericCreateStatic+0x42>
 8009646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
 8009658:	e7fe      	b.n	8009658 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <xQueueGenericCreateStatic+0x4e>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <xQueueGenericCreateStatic+0x52>
 8009666:	2301      	movs	r3, #1
 8009668:	e000      	b.n	800966c <xQueueGenericCreateStatic+0x54>
 800966a:	2300      	movs	r3, #0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d109      	bne.n	8009684 <xQueueGenericCreateStatic+0x6c>
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	623b      	str	r3, [r7, #32]
 8009682:	e7fe      	b.n	8009682 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <xQueueGenericCreateStatic+0x78>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <xQueueGenericCreateStatic+0x7c>
 8009690:	2301      	movs	r3, #1
 8009692:	e000      	b.n	8009696 <xQueueGenericCreateStatic+0x7e>
 8009694:	2300      	movs	r3, #0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d109      	bne.n	80096ae <xQueueGenericCreateStatic+0x96>
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	61fb      	str	r3, [r7, #28]
 80096ac:	e7fe      	b.n	80096ac <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096ae:	2350      	movs	r3, #80	; 0x50
 80096b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b50      	cmp	r3, #80	; 0x50
 80096b6:	d009      	beq.n	80096cc <xQueueGenericCreateStatic+0xb4>
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	e7fe      	b.n	80096ca <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00d      	beq.n	80096f4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4613      	mov	r3, r2
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 f805 	bl	80096fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3730      	adds	r7, #48	; 0x30
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	607a      	str	r2, [r7, #4]
 800970a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e002      	b.n	8009720 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800972c:	2101      	movs	r1, #1
 800972e:	69b8      	ldr	r0, [r7, #24]
 8009730:	f7ff ff0a 	bl	8009548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	78fa      	ldrb	r2, [r7, #3]
 8009738:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800973c:	bf00      	nop
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08e      	sub	sp, #56	; 0x38
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009752:	2300      	movs	r3, #0
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <xQueueGenericSend+0x30>
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	62bb      	str	r3, [r7, #40]	; 0x28
 8009772:	e7fe      	b.n	8009772 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d103      	bne.n	8009782 <xQueueGenericSend+0x3e>
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <xQueueGenericSend+0x42>
 8009782:	2301      	movs	r3, #1
 8009784:	e000      	b.n	8009788 <xQueueGenericSend+0x44>
 8009786:	2300      	movs	r3, #0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d109      	bne.n	80097a0 <xQueueGenericSend+0x5c>
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
 800979e:	e7fe      	b.n	800979e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d103      	bne.n	80097ae <xQueueGenericSend+0x6a>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <xQueueGenericSend+0x6e>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e000      	b.n	80097b4 <xQueueGenericSend+0x70>
 80097b2:	2300      	movs	r3, #0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d109      	bne.n	80097cc <xQueueGenericSend+0x88>
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	623b      	str	r3, [r7, #32]
 80097ca:	e7fe      	b.n	80097ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097cc:	f001 f998 	bl	800ab00 <xTaskGetSchedulerState>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d102      	bne.n	80097dc <xQueueGenericSend+0x98>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <xQueueGenericSend+0x9c>
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <xQueueGenericSend+0x9e>
 80097e0:	2300      	movs	r3, #0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <xQueueGenericSend+0xb6>
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	61fb      	str	r3, [r7, #28]
 80097f8:	e7fe      	b.n	80097f8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097fa:	f001 fecf 	bl	800b59c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009806:	429a      	cmp	r2, r3
 8009808:	d302      	bcc.n	8009810 <xQueueGenericSend+0xcc>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d129      	bne.n	8009864 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009816:	f000 f9ff 	bl	8009c18 <prvCopyDataToQueue>
 800981a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d010      	beq.n	8009846 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	4618      	mov	r0, r3
 800982a:	f000 ffb3 	bl	800a794 <xTaskRemoveFromEventList>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d013      	beq.n	800985c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009834:	4b3f      	ldr	r3, [pc, #252]	; (8009934 <xQueueGenericSend+0x1f0>)
 8009836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	e00a      	b.n	800985c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d007      	beq.n	800985c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800984c:	4b39      	ldr	r3, [pc, #228]	; (8009934 <xQueueGenericSend+0x1f0>)
 800984e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800985c:	f001 fecc 	bl	800b5f8 <vPortExitCritical>
				return pdPASS;
 8009860:	2301      	movs	r3, #1
 8009862:	e063      	b.n	800992c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d103      	bne.n	8009872 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800986a:	f001 fec5 	bl	800b5f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800986e:	2300      	movs	r3, #0
 8009870:	e05c      	b.n	800992c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009878:	f107 0314 	add.w	r3, r7, #20
 800987c:	4618      	mov	r0, r3
 800987e:	f000 ffeb 	bl	800a858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009882:	2301      	movs	r3, #1
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009886:	f001 feb7 	bl	800b5f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800988a:	f000 fd67 	bl	800a35c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800988e:	f001 fe85 	bl	800b59c <vPortEnterCritical>
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009898:	b25b      	sxtb	r3, r3
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989e:	d103      	bne.n	80098a8 <xQueueGenericSend+0x164>
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ae:	b25b      	sxtb	r3, r3
 80098b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b4:	d103      	bne.n	80098be <xQueueGenericSend+0x17a>
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098be:	f001 fe9b 	bl	800b5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098c2:	1d3a      	adds	r2, r7, #4
 80098c4:	f107 0314 	add.w	r3, r7, #20
 80098c8:	4611      	mov	r1, r2
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 ffda 	bl	800a884 <xTaskCheckForTimeOut>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d124      	bne.n	8009920 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098d8:	f000 fa96 	bl	8009e08 <prvIsQueueFull>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d018      	beq.n	8009914 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e4:	3310      	adds	r3, #16
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 ff04 	bl	800a6f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098f2:	f000 fa21 	bl	8009d38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098f6:	f000 fd3f 	bl	800a378 <xTaskResumeAll>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f47f af7c 	bne.w	80097fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009902:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <xQueueGenericSend+0x1f0>)
 8009904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	e772      	b.n	80097fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009916:	f000 fa0f 	bl	8009d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800991a:	f000 fd2d 	bl	800a378 <xTaskResumeAll>
 800991e:	e76c      	b.n	80097fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009922:	f000 fa09 	bl	8009d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009926:	f000 fd27 	bl	800a378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800992a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800992c:	4618      	mov	r0, r3
 800992e:	3738      	adds	r7, #56	; 0x38
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	e000ed04 	.word	0xe000ed04

08009938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08e      	sub	sp, #56	; 0x38
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	2b00      	cmp	r3, #0
 800994e:	d109      	bne.n	8009964 <xQueueGenericSendFromISR+0x2c>
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	627b      	str	r3, [r7, #36]	; 0x24
 8009962:	e7fe      	b.n	8009962 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d103      	bne.n	8009972 <xQueueGenericSendFromISR+0x3a>
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <xQueueGenericSendFromISR+0x3e>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <xQueueGenericSendFromISR+0x40>
 8009976:	2300      	movs	r3, #0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <xQueueGenericSendFromISR+0x58>
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	623b      	str	r3, [r7, #32]
 800998e:	e7fe      	b.n	800998e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d103      	bne.n	800999e <xQueueGenericSendFromISR+0x66>
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <xQueueGenericSendFromISR+0x6a>
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <xQueueGenericSendFromISR+0x6c>
 80099a2:	2300      	movs	r3, #0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d109      	bne.n	80099bc <xQueueGenericSendFromISR+0x84>
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	61fb      	str	r3, [r7, #28]
 80099ba:	e7fe      	b.n	80099ba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099bc:	f001 feca 	bl	800b754 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099c0:	f3ef 8211 	mrs	r2, BASEPRI
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	61ba      	str	r2, [r7, #24]
 80099d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d302      	bcc.n	80099ee <xQueueGenericSendFromISR+0xb6>
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d12c      	bne.n	8009a48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099fe:	f000 f90b 	bl	8009c18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a0a:	d112      	bne.n	8009a32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d016      	beq.n	8009a42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	3324      	adds	r3, #36	; 0x24
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 febb 	bl	800a794 <xTaskRemoveFromEventList>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00e      	beq.n	8009a42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e007      	b.n	8009a42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a36:	3301      	adds	r3, #1
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	b25a      	sxtb	r2, r3
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a42:	2301      	movs	r3, #1
 8009a44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009a46:	e001      	b.n	8009a4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3738      	adds	r7, #56	; 0x38
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08c      	sub	sp, #48	; 0x30
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <xQueueReceive+0x2e>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	623b      	str	r3, [r7, #32]
 8009a8c:	e7fe      	b.n	8009a8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d103      	bne.n	8009a9c <xQueueReceive+0x3c>
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <xQueueReceive+0x40>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e000      	b.n	8009aa2 <xQueueReceive+0x42>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <xQueueReceive+0x5a>
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	61fb      	str	r3, [r7, #28]
 8009ab8:	e7fe      	b.n	8009ab8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009aba:	f001 f821 	bl	800ab00 <xTaskGetSchedulerState>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d102      	bne.n	8009aca <xQueueReceive+0x6a>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <xQueueReceive+0x6e>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e000      	b.n	8009ad0 <xQueueReceive+0x70>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d109      	bne.n	8009ae8 <xQueueReceive+0x88>
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	61bb      	str	r3, [r7, #24]
 8009ae6:	e7fe      	b.n	8009ae6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ae8:	f001 fd58 	bl	800b59c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01f      	beq.n	8009b38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009af8:	68b9      	ldr	r1, [r7, #8]
 8009afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009afc:	f000 f8f6 	bl	8009cec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	1e5a      	subs	r2, r3, #1
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00f      	beq.n	8009b30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	3310      	adds	r3, #16
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fe3d 	bl	800a794 <xTaskRemoveFromEventList>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b20:	4b3c      	ldr	r3, [pc, #240]	; (8009c14 <xQueueReceive+0x1b4>)
 8009b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b30:	f001 fd62 	bl	800b5f8 <vPortExitCritical>
				return pdPASS;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e069      	b.n	8009c0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d103      	bne.n	8009b46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b3e:	f001 fd5b 	bl	800b5f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b42:	2300      	movs	r3, #0
 8009b44:	e062      	b.n	8009c0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b4c:	f107 0310 	add.w	r3, r7, #16
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 fe81 	bl	800a858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b56:	2301      	movs	r3, #1
 8009b58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b5a:	f001 fd4d 	bl	800b5f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b5e:	f000 fbfd 	bl	800a35c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b62:	f001 fd1b 	bl	800b59c <vPortEnterCritical>
 8009b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b6c:	b25b      	sxtb	r3, r3
 8009b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b72:	d103      	bne.n	8009b7c <xQueueReceive+0x11c>
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b82:	b25b      	sxtb	r3, r3
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b88:	d103      	bne.n	8009b92 <xQueueReceive+0x132>
 8009b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b92:	f001 fd31 	bl	800b5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b96:	1d3a      	adds	r2, r7, #4
 8009b98:	f107 0310 	add.w	r3, r7, #16
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fe70 	bl	800a884 <xTaskCheckForTimeOut>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d123      	bne.n	8009bf2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bac:	f000 f916 	bl	8009ddc <prvIsQueueEmpty>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d017      	beq.n	8009be6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	3324      	adds	r3, #36	; 0x24
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 fd9a 	bl	800a6f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc6:	f000 f8b7 	bl	8009d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009bca:	f000 fbd5 	bl	800a378 <xTaskResumeAll>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d189      	bne.n	8009ae8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009bd4:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <xQueueReceive+0x1b4>)
 8009bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	e780      	b.n	8009ae8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009be8:	f000 f8a6 	bl	8009d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bec:	f000 fbc4 	bl	800a378 <xTaskResumeAll>
 8009bf0:	e77a      	b.n	8009ae8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bf4:	f000 f8a0 	bl	8009d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bf8:	f000 fbbe 	bl	800a378 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfe:	f000 f8ed 	bl	8009ddc <prvIsQueueEmpty>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f43f af6f 	beq.w	8009ae8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3730      	adds	r7, #48	; 0x30
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	e000ed04 	.word	0xe000ed04

08009c18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10d      	bne.n	8009c52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d14d      	bne.n	8009cda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 ff7a 	bl	800ab3c <xTaskPriorityDisinherit>
 8009c48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	609a      	str	r2, [r3, #8]
 8009c50:	e043      	b.n	8009cda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d119      	bne.n	8009c8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6858      	ldr	r0, [r3, #4]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c60:	461a      	mov	r2, r3
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	f002 fcc8 	bl	800c5f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	441a      	add	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d32b      	bcc.n	8009cda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	605a      	str	r2, [r3, #4]
 8009c8a:	e026      	b.n	8009cda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	68d8      	ldr	r0, [r3, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c94:	461a      	mov	r2, r3
 8009c96:	68b9      	ldr	r1, [r7, #8]
 8009c98:	f002 fcae 	bl	800c5f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68da      	ldr	r2, [r3, #12]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca4:	425b      	negs	r3, r3
 8009ca6:	441a      	add	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	68da      	ldr	r2, [r3, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d207      	bcs.n	8009cc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	689a      	ldr	r2, [r3, #8]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc0:	425b      	negs	r3, r3
 8009cc2:	441a      	add	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d105      	bne.n	8009cda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	1c5a      	adds	r2, r3, #1
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ce2:	697b      	ldr	r3, [r7, #20]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d018      	beq.n	8009d30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	441a      	add	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d303      	bcc.n	8009d20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68d9      	ldr	r1, [r3, #12]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6838      	ldr	r0, [r7, #0]
 8009d2c:	f002 fc64 	bl	800c5f8 <memcpy>
	}
}
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d40:	f001 fc2c 	bl	800b59c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d4c:	e011      	b.n	8009d72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d012      	beq.n	8009d7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3324      	adds	r3, #36	; 0x24
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fd1a 	bl	800a794 <xTaskRemoveFromEventList>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d66:	f000 fded 	bl	800a944 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dce9      	bgt.n	8009d4e <prvUnlockQueue+0x16>
 8009d7a:	e000      	b.n	8009d7e <prvUnlockQueue+0x46>
					break;
 8009d7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	22ff      	movs	r2, #255	; 0xff
 8009d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d86:	f001 fc37 	bl	800b5f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d8a:	f001 fc07 	bl	800b59c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d96:	e011      	b.n	8009dbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d012      	beq.n	8009dc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3310      	adds	r3, #16
 8009da4:	4618      	mov	r0, r3
 8009da6:	f000 fcf5 	bl	800a794 <xTaskRemoveFromEventList>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009db0:	f000 fdc8 	bl	800a944 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	dce9      	bgt.n	8009d98 <prvUnlockQueue+0x60>
 8009dc4:	e000      	b.n	8009dc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009dc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	22ff      	movs	r2, #255	; 0xff
 8009dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009dd0:	f001 fc12 	bl	800b5f8 <vPortExitCritical>
}
 8009dd4:	bf00      	nop
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009de4:	f001 fbda 	bl	800b59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009df0:	2301      	movs	r3, #1
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	e001      	b.n	8009dfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dfa:	f001 fbfd 	bl	800b5f8 <vPortExitCritical>

	return xReturn;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e10:	f001 fbc4 	bl	800b59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d102      	bne.n	8009e26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e20:	2301      	movs	r3, #1
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e001      	b.n	8009e2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e2a:	f001 fbe5 	bl	800b5f8 <vPortExitCritical>

	return xReturn;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	e014      	b.n	8009e72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e48:	4a0e      	ldr	r2, [pc, #56]	; (8009e84 <vQueueAddToRegistry+0x4c>)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10b      	bne.n	8009e6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e54:	490b      	ldr	r1, [pc, #44]	; (8009e84 <vQueueAddToRegistry+0x4c>)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e5e:	4a09      	ldr	r2, [pc, #36]	; (8009e84 <vQueueAddToRegistry+0x4c>)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	4413      	add	r3, r2
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e6a:	e005      	b.n	8009e78 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b07      	cmp	r3, #7
 8009e76:	d9e7      	bls.n	8009e48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e78:	bf00      	nop
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	20005034 	.word	0x20005034

08009e88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e98:	f001 fb80 	bl	800b59c <vPortEnterCritical>
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ea2:	b25b      	sxtb	r3, r3
 8009ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ea8:	d103      	bne.n	8009eb2 <vQueueWaitForMessageRestricted+0x2a>
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eb8:	b25b      	sxtb	r3, r3
 8009eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ebe:	d103      	bne.n	8009ec8 <vQueueWaitForMessageRestricted+0x40>
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec8:	f001 fb96 	bl	800b5f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d106      	bne.n	8009ee2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	3324      	adds	r3, #36	; 0x24
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fc2f 	bl	800a740 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ee2:	6978      	ldr	r0, [r7, #20]
 8009ee4:	f7ff ff28 	bl	8009d38 <prvUnlockQueue>
	}
 8009ee8:	bf00      	nop
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08e      	sub	sp, #56	; 0x38
 8009ef4:	af04      	add	r7, sp, #16
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d109      	bne.n	8009f18 <xTaskCreateStatic+0x28>
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	623b      	str	r3, [r7, #32]
 8009f16:	e7fe      	b.n	8009f16 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d109      	bne.n	8009f32 <xTaskCreateStatic+0x42>
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	e7fe      	b.n	8009f30 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f32:	235c      	movs	r3, #92	; 0x5c
 8009f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b5c      	cmp	r3, #92	; 0x5c
 8009f3a:	d009      	beq.n	8009f50 <xTaskCreateStatic+0x60>
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	e7fe      	b.n	8009f4e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01e      	beq.n	8009f96 <xTaskCreateStatic+0xa6>
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d01b      	beq.n	8009f96 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f70:	2300      	movs	r3, #0
 8009f72:	9303      	str	r3, [sp, #12]
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	9302      	str	r3, [sp, #8]
 8009f78:	f107 0314 	add.w	r3, r7, #20
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f850 	bl	800a02e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f90:	f000 f8dc 	bl	800a14c <prvAddNewTaskToReadyList>
 8009f94:	e001      	b.n	8009f9a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f9a:	697b      	ldr	r3, [r7, #20]
	}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3728      	adds	r7, #40	; 0x28
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08c      	sub	sp, #48	; 0x30
 8009fa8:	af04      	add	r7, sp, #16
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fb4:	88fb      	ldrh	r3, [r7, #6]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f001 fc09 	bl	800b7d0 <pvPortMalloc>
 8009fbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00e      	beq.n	8009fe4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009fc6:	205c      	movs	r0, #92	; 0x5c
 8009fc8:	f001 fc02 	bl	800b7d0 <pvPortMalloc>
 8009fcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8009fda:	e005      	b.n	8009fe8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fdc:	6978      	ldr	r0, [r7, #20]
 8009fde:	f001 fcb9 	bl	800b954 <vPortFree>
 8009fe2:	e001      	b.n	8009fe8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d017      	beq.n	800a01e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ff6:	88fa      	ldrh	r2, [r7, #6]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9303      	str	r3, [sp, #12]
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	9302      	str	r3, [sp, #8]
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	9301      	str	r3, [sp, #4]
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	68b9      	ldr	r1, [r7, #8]
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 f80e 	bl	800a02e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a012:	69f8      	ldr	r0, [r7, #28]
 800a014:	f000 f89a 	bl	800a14c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a018:	2301      	movs	r3, #1
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	e002      	b.n	800a024 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a022:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a024:	69bb      	ldr	r3, [r7, #24]
	}
 800a026:	4618      	mov	r0, r3
 800a028:	3720      	adds	r7, #32
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b088      	sub	sp, #32
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	461a      	mov	r2, r3
 800a046:	21a5      	movs	r1, #165	; 0xa5
 800a048:	f002 fae1 	bl	800c60e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a056:	3b01      	subs	r3, #1
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	f023 0307 	bic.w	r3, r3, #7
 800a064:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d009      	beq.n	800a084 <prvInitialiseNewTask+0x56>
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	617b      	str	r3, [r7, #20]
 800a082:	e7fe      	b.n	800a082 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d01f      	beq.n	800a0ca <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a08a:	2300      	movs	r3, #0
 800a08c:	61fb      	str	r3, [r7, #28]
 800a08e:	e012      	b.n	800a0b6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	4413      	add	r3, r2
 800a096:	7819      	ldrb	r1, [r3, #0]
 800a098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	4413      	add	r3, r2
 800a09e:	3334      	adds	r3, #52	; 0x34
 800a0a0:	460a      	mov	r2, r1
 800a0a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d006      	beq.n	800a0be <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	61fb      	str	r3, [r7, #28]
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	2b0f      	cmp	r3, #15
 800a0ba:	d9e9      	bls.n	800a090 <prvInitialiseNewTask+0x62>
 800a0bc:	e000      	b.n	800a0c0 <prvInitialiseNewTask+0x92>
			{
				break;
 800a0be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0c8:	e003      	b.n	800a0d2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	2b37      	cmp	r3, #55	; 0x37
 800a0d6:	d901      	bls.n	800a0dc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0d8:	2337      	movs	r3, #55	; 0x37
 800a0da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff f994 	bl	8009420 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fa:	3318      	adds	r3, #24
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff f98f 	bl	8009420 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a116:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11a:	2200      	movs	r2, #0
 800a11c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	68f9      	ldr	r1, [r7, #12]
 800a12a:	69b8      	ldr	r0, [r7, #24]
 800a12c:	f001 f90c 	bl	800b348 <pxPortInitialiseStack>
 800a130:	4602      	mov	r2, r0
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a140:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a142:	bf00      	nop
 800a144:	3720      	adds	r7, #32
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a154:	f001 fa22 	bl	800b59c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a158:	4b2d      	ldr	r3, [pc, #180]	; (800a210 <prvAddNewTaskToReadyList+0xc4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3301      	adds	r3, #1
 800a15e:	4a2c      	ldr	r2, [pc, #176]	; (800a210 <prvAddNewTaskToReadyList+0xc4>)
 800a160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a162:	4b2c      	ldr	r3, [pc, #176]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d109      	bne.n	800a17e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a16a:	4a2a      	ldr	r2, [pc, #168]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a170:	4b27      	ldr	r3, [pc, #156]	; (800a210 <prvAddNewTaskToReadyList+0xc4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d110      	bne.n	800a19a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a178:	f000 fc08 	bl	800a98c <prvInitialiseTaskLists>
 800a17c:	e00d      	b.n	800a19a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a17e:	4b26      	ldr	r3, [pc, #152]	; (800a218 <prvAddNewTaskToReadyList+0xcc>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d109      	bne.n	800a19a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a186:	4b23      	ldr	r3, [pc, #140]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	429a      	cmp	r2, r3
 800a192:	d802      	bhi.n	800a19a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a194:	4a1f      	ldr	r2, [pc, #124]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a19a:	4b20      	ldr	r3, [pc, #128]	; (800a21c <prvAddNewTaskToReadyList+0xd0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	4a1e      	ldr	r2, [pc, #120]	; (800a21c <prvAddNewTaskToReadyList+0xd0>)
 800a1a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1a4:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <prvAddNewTaskToReadyList+0xd0>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b0:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <prvAddNewTaskToReadyList+0xd4>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d903      	bls.n	800a1c0 <prvAddNewTaskToReadyList+0x74>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	4a18      	ldr	r2, [pc, #96]	; (800a220 <prvAddNewTaskToReadyList+0xd4>)
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4a15      	ldr	r2, [pc, #84]	; (800a224 <prvAddNewTaskToReadyList+0xd8>)
 800a1ce:	441a      	add	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	f7ff f92f 	bl	800943a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1dc:	f001 fa0c 	bl	800b5f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1e0:	4b0d      	ldr	r3, [pc, #52]	; (800a218 <prvAddNewTaskToReadyList+0xcc>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00e      	beq.n	800a206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1e8:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d207      	bcs.n	800a206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1f6:	4b0c      	ldr	r3, [pc, #48]	; (800a228 <prvAddNewTaskToReadyList+0xdc>)
 800a1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20000f10 	.word	0x20000f10
 800a214:	20000a3c 	.word	0x20000a3c
 800a218:	20000f1c 	.word	0x20000f1c
 800a21c:	20000f2c 	.word	0x20000f2c
 800a220:	20000f18 	.word	0x20000f18
 800a224:	20000a40 	.word	0x20000a40
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d016      	beq.n	800a26c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <vTaskDelay+0x60>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d009      	beq.n	800a25a <vTaskDelay+0x2e>
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	60bb      	str	r3, [r7, #8]
 800a258:	e7fe      	b.n	800a258 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a25a:	f000 f87f 	bl	800a35c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a25e:	2100      	movs	r1, #0
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fcd7 	bl	800ac14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a266:	f000 f887 	bl	800a378 <xTaskResumeAll>
 800a26a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d107      	bne.n	800a282 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a272:	4b07      	ldr	r3, [pc, #28]	; (800a290 <vTaskDelay+0x64>)
 800a274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a282:	bf00      	nop
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20000f38 	.word	0x20000f38
 800a290:	e000ed04 	.word	0xe000ed04

0800a294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2a2:	463a      	mov	r2, r7
 800a2a4:	1d39      	adds	r1, r7, #4
 800a2a6:	f107 0308 	add.w	r3, r7, #8
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff f864 	bl	8009378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	9202      	str	r2, [sp, #8]
 800a2b8:	9301      	str	r3, [sp, #4]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	460a      	mov	r2, r1
 800a2c2:	4920      	ldr	r1, [pc, #128]	; (800a344 <vTaskStartScheduler+0xb0>)
 800a2c4:	4820      	ldr	r0, [pc, #128]	; (800a348 <vTaskStartScheduler+0xb4>)
 800a2c6:	f7ff fe13 	bl	8009ef0 <xTaskCreateStatic>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	4b1f      	ldr	r3, [pc, #124]	; (800a34c <vTaskStartScheduler+0xb8>)
 800a2ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2d0:	4b1e      	ldr	r3, [pc, #120]	; (800a34c <vTaskStartScheduler+0xb8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	e001      	b.n	800a2e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d102      	bne.n	800a2ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2e8:	f000 fce8 	bl	800acbc <xTimerCreateTimerTask>
 800a2ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d115      	bne.n	800a320 <vTaskStartScheduler+0x8c>
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a306:	4b12      	ldr	r3, [pc, #72]	; (800a350 <vTaskStartScheduler+0xbc>)
 800a308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a30c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a30e:	4b11      	ldr	r3, [pc, #68]	; (800a354 <vTaskStartScheduler+0xc0>)
 800a310:	2201      	movs	r2, #1
 800a312:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a314:	4b10      	ldr	r3, [pc, #64]	; (800a358 <vTaskStartScheduler+0xc4>)
 800a316:	2200      	movs	r2, #0
 800a318:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a31a:	f001 f8a1 	bl	800b460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a31e:	e00d      	b.n	800a33c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a326:	d109      	bne.n	800a33c <vTaskStartScheduler+0xa8>
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	e7fe      	b.n	800a33a <vTaskStartScheduler+0xa6>
}
 800a33c:	bf00      	nop
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	0800e720 	.word	0x0800e720
 800a348:	0800a95d 	.word	0x0800a95d
 800a34c:	20000f34 	.word	0x20000f34
 800a350:	20000f30 	.word	0x20000f30
 800a354:	20000f1c 	.word	0x20000f1c
 800a358:	20000f14 	.word	0x20000f14

0800a35c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a360:	4b04      	ldr	r3, [pc, #16]	; (800a374 <vTaskSuspendAll+0x18>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3301      	adds	r3, #1
 800a366:	4a03      	ldr	r2, [pc, #12]	; (800a374 <vTaskSuspendAll+0x18>)
 800a368:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a36a:	bf00      	nop
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	20000f38 	.word	0x20000f38

0800a378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a37e:	2300      	movs	r3, #0
 800a380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a382:	2300      	movs	r3, #0
 800a384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a386:	4b41      	ldr	r3, [pc, #260]	; (800a48c <xTaskResumeAll+0x114>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <xTaskResumeAll+0x2a>
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	603b      	str	r3, [r7, #0]
 800a3a0:	e7fe      	b.n	800a3a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3a2:	f001 f8fb 	bl	800b59c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3a6:	4b39      	ldr	r3, [pc, #228]	; (800a48c <xTaskResumeAll+0x114>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	4a37      	ldr	r2, [pc, #220]	; (800a48c <xTaskResumeAll+0x114>)
 800a3ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3b0:	4b36      	ldr	r3, [pc, #216]	; (800a48c <xTaskResumeAll+0x114>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d162      	bne.n	800a47e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3b8:	4b35      	ldr	r3, [pc, #212]	; (800a490 <xTaskResumeAll+0x118>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d05e      	beq.n	800a47e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3c0:	e02f      	b.n	800a422 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c2:	4b34      	ldr	r3, [pc, #208]	; (800a494 <xTaskResumeAll+0x11c>)
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3318      	adds	r3, #24
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff f890 	bl	80094f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff f88b 	bl	80094f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e2:	4b2d      	ldr	r3, [pc, #180]	; (800a498 <xTaskResumeAll+0x120>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d903      	bls.n	800a3f2 <xTaskResumeAll+0x7a>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	4a2a      	ldr	r2, [pc, #168]	; (800a498 <xTaskResumeAll+0x120>)
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4a27      	ldr	r2, [pc, #156]	; (800a49c <xTaskResumeAll+0x124>)
 800a400:	441a      	add	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3304      	adds	r3, #4
 800a406:	4619      	mov	r1, r3
 800a408:	4610      	mov	r0, r2
 800a40a:	f7ff f816 	bl	800943a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a412:	4b23      	ldr	r3, [pc, #140]	; (800a4a0 <xTaskResumeAll+0x128>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	429a      	cmp	r2, r3
 800a41a:	d302      	bcc.n	800a422 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a41c:	4b21      	ldr	r3, [pc, #132]	; (800a4a4 <xTaskResumeAll+0x12c>)
 800a41e:	2201      	movs	r2, #1
 800a420:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a422:	4b1c      	ldr	r3, [pc, #112]	; (800a494 <xTaskResumeAll+0x11c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1cb      	bne.n	800a3c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a430:	f000 fb46 	bl	800aac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a434:	4b1c      	ldr	r3, [pc, #112]	; (800a4a8 <xTaskResumeAll+0x130>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d010      	beq.n	800a462 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a440:	f000 f846 	bl	800a4d0 <xTaskIncrementTick>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d002      	beq.n	800a450 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a44a:	4b16      	ldr	r3, [pc, #88]	; (800a4a4 <xTaskResumeAll+0x12c>)
 800a44c:	2201      	movs	r2, #1
 800a44e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3b01      	subs	r3, #1
 800a454:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1f1      	bne.n	800a440 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a45c:	4b12      	ldr	r3, [pc, #72]	; (800a4a8 <xTaskResumeAll+0x130>)
 800a45e:	2200      	movs	r2, #0
 800a460:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a462:	4b10      	ldr	r3, [pc, #64]	; (800a4a4 <xTaskResumeAll+0x12c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d009      	beq.n	800a47e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a46e:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <xTaskResumeAll+0x134>)
 800a470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a47e:	f001 f8bb 	bl	800b5f8 <vPortExitCritical>

	return xAlreadyYielded;
 800a482:	68bb      	ldr	r3, [r7, #8]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20000f38 	.word	0x20000f38
 800a490:	20000f10 	.word	0x20000f10
 800a494:	20000ed0 	.word	0x20000ed0
 800a498:	20000f18 	.word	0x20000f18
 800a49c:	20000a40 	.word	0x20000a40
 800a4a0:	20000a3c 	.word	0x20000a3c
 800a4a4:	20000f24 	.word	0x20000f24
 800a4a8:	20000f20 	.word	0x20000f20
 800a4ac:	e000ed04 	.word	0xe000ed04

0800a4b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4b6:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <xTaskGetTickCount+0x1c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4bc:	687b      	ldr	r3, [r7, #4]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20000f14 	.word	0x20000f14

0800a4d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4da:	4b4e      	ldr	r3, [pc, #312]	; (800a614 <xTaskIncrementTick+0x144>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f040 8088 	bne.w	800a5f4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4e4:	4b4c      	ldr	r3, [pc, #304]	; (800a618 <xTaskIncrementTick+0x148>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4ec:	4a4a      	ldr	r2, [pc, #296]	; (800a618 <xTaskIncrementTick+0x148>)
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d11f      	bne.n	800a538 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4f8:	4b48      	ldr	r3, [pc, #288]	; (800a61c <xTaskIncrementTick+0x14c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d009      	beq.n	800a516 <xTaskIncrementTick+0x46>
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	e7fe      	b.n	800a514 <xTaskIncrementTick+0x44>
 800a516:	4b41      	ldr	r3, [pc, #260]	; (800a61c <xTaskIncrementTick+0x14c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	4b40      	ldr	r3, [pc, #256]	; (800a620 <xTaskIncrementTick+0x150>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a3e      	ldr	r2, [pc, #248]	; (800a61c <xTaskIncrementTick+0x14c>)
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	4a3e      	ldr	r2, [pc, #248]	; (800a620 <xTaskIncrementTick+0x150>)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	4b3e      	ldr	r3, [pc, #248]	; (800a624 <xTaskIncrementTick+0x154>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3301      	adds	r3, #1
 800a530:	4a3c      	ldr	r2, [pc, #240]	; (800a624 <xTaskIncrementTick+0x154>)
 800a532:	6013      	str	r3, [r2, #0]
 800a534:	f000 fac4 	bl	800aac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a538:	4b3b      	ldr	r3, [pc, #236]	; (800a628 <xTaskIncrementTick+0x158>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d349      	bcc.n	800a5d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a542:	4b36      	ldr	r3, [pc, #216]	; (800a61c <xTaskIncrementTick+0x14c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d104      	bne.n	800a556 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a54c:	4b36      	ldr	r3, [pc, #216]	; (800a628 <xTaskIncrementTick+0x158>)
 800a54e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a552:	601a      	str	r2, [r3, #0]
					break;
 800a554:	e03f      	b.n	800a5d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a556:	4b31      	ldr	r3, [pc, #196]	; (800a61c <xTaskIncrementTick+0x14c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d203      	bcs.n	800a576 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a56e:	4a2e      	ldr	r2, [pc, #184]	; (800a628 <xTaskIncrementTick+0x158>)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a574:	e02f      	b.n	800a5d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	3304      	adds	r3, #4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe ffba 	bl	80094f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a584:	2b00      	cmp	r3, #0
 800a586:	d004      	beq.n	800a592 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	3318      	adds	r3, #24
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe ffb1 	bl	80094f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a596:	4b25      	ldr	r3, [pc, #148]	; (800a62c <xTaskIncrementTick+0x15c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d903      	bls.n	800a5a6 <xTaskIncrementTick+0xd6>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	4a22      	ldr	r2, [pc, #136]	; (800a62c <xTaskIncrementTick+0x15c>)
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4a1f      	ldr	r2, [pc, #124]	; (800a630 <xTaskIncrementTick+0x160>)
 800a5b4:	441a      	add	r2, r3
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4610      	mov	r0, r2
 800a5be:	f7fe ff3c 	bl	800943a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c6:	4b1b      	ldr	r3, [pc, #108]	; (800a634 <xTaskIncrementTick+0x164>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d3b8      	bcc.n	800a542 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5d4:	e7b5      	b.n	800a542 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5d6:	4b17      	ldr	r3, [pc, #92]	; (800a634 <xTaskIncrementTick+0x164>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5dc:	4914      	ldr	r1, [pc, #80]	; (800a630 <xTaskIncrementTick+0x160>)
 800a5de:	4613      	mov	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	440b      	add	r3, r1
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d907      	bls.n	800a5fe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	e004      	b.n	800a5fe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5f4:	4b10      	ldr	r3, [pc, #64]	; (800a638 <xTaskIncrementTick+0x168>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	4a0f      	ldr	r2, [pc, #60]	; (800a638 <xTaskIncrementTick+0x168>)
 800a5fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <xTaskIncrementTick+0x16c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a606:	2301      	movs	r3, #1
 800a608:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a60a:	697b      	ldr	r3, [r7, #20]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20000f38 	.word	0x20000f38
 800a618:	20000f14 	.word	0x20000f14
 800a61c:	20000ec8 	.word	0x20000ec8
 800a620:	20000ecc 	.word	0x20000ecc
 800a624:	20000f28 	.word	0x20000f28
 800a628:	20000f30 	.word	0x20000f30
 800a62c:	20000f18 	.word	0x20000f18
 800a630:	20000a40 	.word	0x20000a40
 800a634:	20000a3c 	.word	0x20000a3c
 800a638:	20000f20 	.word	0x20000f20
 800a63c:	20000f24 	.word	0x20000f24

0800a640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a646:	4b27      	ldr	r3, [pc, #156]	; (800a6e4 <vTaskSwitchContext+0xa4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a64e:	4b26      	ldr	r3, [pc, #152]	; (800a6e8 <vTaskSwitchContext+0xa8>)
 800a650:	2201      	movs	r2, #1
 800a652:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a654:	e040      	b.n	800a6d8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a656:	4b24      	ldr	r3, [pc, #144]	; (800a6e8 <vTaskSwitchContext+0xa8>)
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a65c:	4b23      	ldr	r3, [pc, #140]	; (800a6ec <vTaskSwitchContext+0xac>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	e00f      	b.n	800a684 <vTaskSwitchContext+0x44>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d109      	bne.n	800a67e <vTaskSwitchContext+0x3e>
 800a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	607b      	str	r3, [r7, #4]
 800a67c:	e7fe      	b.n	800a67c <vTaskSwitchContext+0x3c>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3b01      	subs	r3, #1
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	491a      	ldr	r1, [pc, #104]	; (800a6f0 <vTaskSwitchContext+0xb0>)
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	4613      	mov	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0e5      	beq.n	800a664 <vTaskSwitchContext+0x24>
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	4613      	mov	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4a13      	ldr	r2, [pc, #76]	; (800a6f0 <vTaskSwitchContext+0xb0>)
 800a6a4:	4413      	add	r3, r2
 800a6a6:	60bb      	str	r3, [r7, #8]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	605a      	str	r2, [r3, #4]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	3308      	adds	r3, #8
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d104      	bne.n	800a6c8 <vTaskSwitchContext+0x88>
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	605a      	str	r2, [r3, #4]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	4a09      	ldr	r2, [pc, #36]	; (800a6f4 <vTaskSwitchContext+0xb4>)
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	4a06      	ldr	r2, [pc, #24]	; (800a6ec <vTaskSwitchContext+0xac>)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6013      	str	r3, [r2, #0]
}
 800a6d8:	bf00      	nop
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	20000f38 	.word	0x20000f38
 800a6e8:	20000f24 	.word	0x20000f24
 800a6ec:	20000f18 	.word	0x20000f18
 800a6f0:	20000a40 	.word	0x20000a40
 800a6f4:	20000a3c 	.word	0x20000a3c

0800a6f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <vTaskPlaceOnEventList+0x24>
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	60fb      	str	r3, [r7, #12]
 800a71a:	e7fe      	b.n	800a71a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a71c:	4b07      	ldr	r3, [pc, #28]	; (800a73c <vTaskPlaceOnEventList+0x44>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3318      	adds	r3, #24
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7fe feac 	bl	8009482 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a72a:	2101      	movs	r1, #1
 800a72c:	6838      	ldr	r0, [r7, #0]
 800a72e:	f000 fa71 	bl	800ac14 <prvAddCurrentTaskToDelayedList>
}
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000a3c 	.word	0x20000a3c

0800a740 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d109      	bne.n	800a766 <vTaskPlaceOnEventListRestricted+0x26>
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	e7fe      	b.n	800a764 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a766:	4b0a      	ldr	r3, [pc, #40]	; (800a790 <vTaskPlaceOnEventListRestricted+0x50>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3318      	adds	r3, #24
 800a76c:	4619      	mov	r1, r3
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7fe fe63 	bl	800943a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a77a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a77e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	68b8      	ldr	r0, [r7, #8]
 800a784:	f000 fa46 	bl	800ac14 <prvAddCurrentTaskToDelayedList>
	}
 800a788:	bf00      	nop
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20000a3c 	.word	0x20000a3c

0800a794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d109      	bne.n	800a7be <xTaskRemoveFromEventList+0x2a>
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	e7fe      	b.n	800a7bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	3318      	adds	r3, #24
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fe96 	bl	80094f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7c8:	4b1d      	ldr	r3, [pc, #116]	; (800a840 <xTaskRemoveFromEventList+0xac>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d11d      	bne.n	800a80c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fe fe8d 	bl	80094f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7de:	4b19      	ldr	r3, [pc, #100]	; (800a844 <xTaskRemoveFromEventList+0xb0>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d903      	bls.n	800a7ee <xTaskRemoveFromEventList+0x5a>
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	4a16      	ldr	r2, [pc, #88]	; (800a844 <xTaskRemoveFromEventList+0xb0>)
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4a13      	ldr	r2, [pc, #76]	; (800a848 <xTaskRemoveFromEventList+0xb4>)
 800a7fc:	441a      	add	r2, r3
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	3304      	adds	r3, #4
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	f7fe fe18 	bl	800943a <vListInsertEnd>
 800a80a:	e005      	b.n	800a818 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	3318      	adds	r3, #24
 800a810:	4619      	mov	r1, r3
 800a812:	480e      	ldr	r0, [pc, #56]	; (800a84c <xTaskRemoveFromEventList+0xb8>)
 800a814:	f7fe fe11 	bl	800943a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <xTaskRemoveFromEventList+0xbc>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a822:	429a      	cmp	r2, r3
 800a824:	d905      	bls.n	800a832 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a826:	2301      	movs	r3, #1
 800a828:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a82a:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <xTaskRemoveFromEventList+0xc0>)
 800a82c:	2201      	movs	r2, #1
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	e001      	b.n	800a836 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a832:	2300      	movs	r3, #0
 800a834:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a836:	697b      	ldr	r3, [r7, #20]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20000f38 	.word	0x20000f38
 800a844:	20000f18 	.word	0x20000f18
 800a848:	20000a40 	.word	0x20000a40
 800a84c:	20000ed0 	.word	0x20000ed0
 800a850:	20000a3c 	.word	0x20000a3c
 800a854:	20000f24 	.word	0x20000f24

0800a858 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <vTaskInternalSetTimeOutState+0x24>)
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a868:	4b05      	ldr	r3, [pc, #20]	; (800a880 <vTaskInternalSetTimeOutState+0x28>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	605a      	str	r2, [r3, #4]
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	20000f28 	.word	0x20000f28
 800a880:	20000f14 	.word	0x20000f14

0800a884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b088      	sub	sp, #32
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d109      	bne.n	800a8a8 <xTaskCheckForTimeOut+0x24>
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	613b      	str	r3, [r7, #16]
 800a8a6:	e7fe      	b.n	800a8a6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d109      	bne.n	800a8c2 <xTaskCheckForTimeOut+0x3e>
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	e7fe      	b.n	800a8c0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a8c2:	f000 fe6b 	bl	800b59c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8c6:	4b1d      	ldr	r3, [pc, #116]	; (800a93c <xTaskCheckForTimeOut+0xb8>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	69ba      	ldr	r2, [r7, #24]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8de:	d102      	bne.n	800a8e6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61fb      	str	r3, [r7, #28]
 800a8e4:	e023      	b.n	800a92e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	4b15      	ldr	r3, [pc, #84]	; (800a940 <xTaskCheckForTimeOut+0xbc>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d007      	beq.n	800a902 <xTaskCheckForTimeOut+0x7e>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d302      	bcc.n	800a902 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	e015      	b.n	800a92e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d20b      	bcs.n	800a924 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	1ad2      	subs	r2, r2, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff ff9d 	bl	800a858 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a91e:	2300      	movs	r3, #0
 800a920:	61fb      	str	r3, [r7, #28]
 800a922:	e004      	b.n	800a92e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2200      	movs	r2, #0
 800a928:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a92a:	2301      	movs	r3, #1
 800a92c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a92e:	f000 fe63 	bl	800b5f8 <vPortExitCritical>

	return xReturn;
 800a932:	69fb      	ldr	r3, [r7, #28]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3720      	adds	r7, #32
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20000f14 	.word	0x20000f14
 800a940:	20000f28 	.word	0x20000f28

0800a944 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a944:	b480      	push	{r7}
 800a946:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a948:	4b03      	ldr	r3, [pc, #12]	; (800a958 <vTaskMissedYield+0x14>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	601a      	str	r2, [r3, #0]
}
 800a94e:	bf00      	nop
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	20000f24 	.word	0x20000f24

0800a95c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a964:	f000 f852 	bl	800aa0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <prvIdleTask+0x28>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d9f9      	bls.n	800a964 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <prvIdleTask+0x2c>)
 800a972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a980:	e7f0      	b.n	800a964 <prvIdleTask+0x8>
 800a982:	bf00      	nop
 800a984:	20000a40 	.word	0x20000a40
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a992:	2300      	movs	r3, #0
 800a994:	607b      	str	r3, [r7, #4]
 800a996:	e00c      	b.n	800a9b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4a12      	ldr	r2, [pc, #72]	; (800a9ec <prvInitialiseTaskLists+0x60>)
 800a9a4:	4413      	add	r3, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe fd1a 	bl	80093e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	607b      	str	r3, [r7, #4]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b37      	cmp	r3, #55	; 0x37
 800a9b6:	d9ef      	bls.n	800a998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9b8:	480d      	ldr	r0, [pc, #52]	; (800a9f0 <prvInitialiseTaskLists+0x64>)
 800a9ba:	f7fe fd11 	bl	80093e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9be:	480d      	ldr	r0, [pc, #52]	; (800a9f4 <prvInitialiseTaskLists+0x68>)
 800a9c0:	f7fe fd0e 	bl	80093e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9c4:	480c      	ldr	r0, [pc, #48]	; (800a9f8 <prvInitialiseTaskLists+0x6c>)
 800a9c6:	f7fe fd0b 	bl	80093e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9ca:	480c      	ldr	r0, [pc, #48]	; (800a9fc <prvInitialiseTaskLists+0x70>)
 800a9cc:	f7fe fd08 	bl	80093e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9d0:	480b      	ldr	r0, [pc, #44]	; (800aa00 <prvInitialiseTaskLists+0x74>)
 800a9d2:	f7fe fd05 	bl	80093e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9d6:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <prvInitialiseTaskLists+0x78>)
 800a9d8:	4a05      	ldr	r2, [pc, #20]	; (800a9f0 <prvInitialiseTaskLists+0x64>)
 800a9da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9dc:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <prvInitialiseTaskLists+0x7c>)
 800a9de:	4a05      	ldr	r2, [pc, #20]	; (800a9f4 <prvInitialiseTaskLists+0x68>)
 800a9e0:	601a      	str	r2, [r3, #0]
}
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000a40 	.word	0x20000a40
 800a9f0:	20000ea0 	.word	0x20000ea0
 800a9f4:	20000eb4 	.word	0x20000eb4
 800a9f8:	20000ed0 	.word	0x20000ed0
 800a9fc:	20000ee4 	.word	0x20000ee4
 800aa00:	20000efc 	.word	0x20000efc
 800aa04:	20000ec8 	.word	0x20000ec8
 800aa08:	20000ecc 	.word	0x20000ecc

0800aa0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa12:	e019      	b.n	800aa48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa14:	f000 fdc2 	bl	800b59c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <prvCheckTasksWaitingTermination+0x4c>)
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3304      	adds	r3, #4
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fe fd65 	bl	80094f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	; (800aa5c <prvCheckTasksWaitingTermination+0x50>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	4a0a      	ldr	r2, [pc, #40]	; (800aa5c <prvCheckTasksWaitingTermination+0x50>)
 800aa32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa34:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <prvCheckTasksWaitingTermination+0x54>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	4a09      	ldr	r2, [pc, #36]	; (800aa60 <prvCheckTasksWaitingTermination+0x54>)
 800aa3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa3e:	f000 fddb 	bl	800b5f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f80e 	bl	800aa64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa48:	4b05      	ldr	r3, [pc, #20]	; (800aa60 <prvCheckTasksWaitingTermination+0x54>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1e1      	bne.n	800aa14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	20000ee4 	.word	0x20000ee4
 800aa5c:	20000f10 	.word	0x20000f10
 800aa60:	20000ef8 	.word	0x20000ef8

0800aa64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d108      	bne.n	800aa88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 ff6a 	bl	800b954 <vPortFree>
				vPortFree( pxTCB );
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 ff67 	bl	800b954 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa86:	e017      	b.n	800aab8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d103      	bne.n	800aa9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 ff5e 	bl	800b954 <vPortFree>
	}
 800aa98:	e00e      	b.n	800aab8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d009      	beq.n	800aab8 <prvDeleteTCB+0x54>
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	e7fe      	b.n	800aab6 <prvDeleteTCB+0x52>
	}
 800aab8:	bf00      	nop
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aac6:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <prvResetNextTaskUnblockTime+0x38>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d104      	bne.n	800aada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <prvResetNextTaskUnblockTime+0x3c>)
 800aad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aad8:	e008      	b.n	800aaec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aada:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <prvResetNextTaskUnblockTime+0x38>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	4a04      	ldr	r2, [pc, #16]	; (800aafc <prvResetNextTaskUnblockTime+0x3c>)
 800aaea:	6013      	str	r3, [r2, #0]
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	20000ec8 	.word	0x20000ec8
 800aafc:	20000f30 	.word	0x20000f30

0800ab00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab06:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <xTaskGetSchedulerState+0x34>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d102      	bne.n	800ab14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	607b      	str	r3, [r7, #4]
 800ab12:	e008      	b.n	800ab26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab14:	4b08      	ldr	r3, [pc, #32]	; (800ab38 <xTaskGetSchedulerState+0x38>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	e001      	b.n	800ab26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab22:	2300      	movs	r3, #0
 800ab24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab26:	687b      	ldr	r3, [r7, #4]
	}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	20000f1c 	.word	0x20000f1c
 800ab38:	20000f38 	.word	0x20000f38

0800ab3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d054      	beq.n	800abfc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab52:	4b2d      	ldr	r3, [pc, #180]	; (800ac08 <xTaskPriorityDisinherit+0xcc>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	693a      	ldr	r2, [r7, #16]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d009      	beq.n	800ab70 <xTaskPriorityDisinherit+0x34>
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	e7fe      	b.n	800ab6e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d109      	bne.n	800ab8c <xTaskPriorityDisinherit+0x50>
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	60bb      	str	r3, [r7, #8]
 800ab8a:	e7fe      	b.n	800ab8a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab90:	1e5a      	subs	r2, r3, #1
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d02c      	beq.n	800abfc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d128      	bne.n	800abfc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	3304      	adds	r3, #4
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe fca0 	bl	80094f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abcc:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <xTaskPriorityDisinherit+0xd0>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d903      	bls.n	800abdc <xTaskPriorityDisinherit+0xa0>
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	4a0c      	ldr	r2, [pc, #48]	; (800ac0c <xTaskPriorityDisinherit+0xd0>)
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe0:	4613      	mov	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4a09      	ldr	r2, [pc, #36]	; (800ac10 <xTaskPriorityDisinherit+0xd4>)
 800abea:	441a      	add	r2, r3
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	3304      	adds	r3, #4
 800abf0:	4619      	mov	r1, r3
 800abf2:	4610      	mov	r0, r2
 800abf4:	f7fe fc21 	bl	800943a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800abf8:	2301      	movs	r3, #1
 800abfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abfc:	697b      	ldr	r3, [r7, #20]
	}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3718      	adds	r7, #24
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20000a3c 	.word	0x20000a3c
 800ac0c:	20000f18 	.word	0x20000f18
 800ac10:	20000a40 	.word	0x20000a40

0800ac14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac1e:	4b21      	ldr	r3, [pc, #132]	; (800aca4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac24:	4b20      	ldr	r3, [pc, #128]	; (800aca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fe fc62 	bl	80094f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac36:	d10a      	bne.n	800ac4e <prvAddCurrentTaskToDelayedList+0x3a>
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d007      	beq.n	800ac4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac3e:	4b1a      	ldr	r3, [pc, #104]	; (800aca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3304      	adds	r3, #4
 800ac44:	4619      	mov	r1, r3
 800ac46:	4819      	ldr	r0, [pc, #100]	; (800acac <prvAddCurrentTaskToDelayedList+0x98>)
 800ac48:	f7fe fbf7 	bl	800943a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac4c:	e026      	b.n	800ac9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4413      	add	r3, r2
 800ac54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac56:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d209      	bcs.n	800ac7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac66:	4b12      	ldr	r3, [pc, #72]	; (800acb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	4b0f      	ldr	r3, [pc, #60]	; (800aca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	4619      	mov	r1, r3
 800ac72:	4610      	mov	r0, r2
 800ac74:	f7fe fc05 	bl	8009482 <vListInsert>
}
 800ac78:	e010      	b.n	800ac9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac7a:	4b0e      	ldr	r3, [pc, #56]	; (800acb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3304      	adds	r3, #4
 800ac84:	4619      	mov	r1, r3
 800ac86:	4610      	mov	r0, r2
 800ac88:	f7fe fbfb 	bl	8009482 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac8c:	4b0a      	ldr	r3, [pc, #40]	; (800acb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d202      	bcs.n	800ac9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac96:	4a08      	ldr	r2, [pc, #32]	; (800acb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	6013      	str	r3, [r2, #0]
}
 800ac9c:	bf00      	nop
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20000f14 	.word	0x20000f14
 800aca8:	20000a3c 	.word	0x20000a3c
 800acac:	20000efc 	.word	0x20000efc
 800acb0:	20000ecc 	.word	0x20000ecc
 800acb4:	20000ec8 	.word	0x20000ec8
 800acb8:	20000f30 	.word	0x20000f30

0800acbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08a      	sub	sp, #40	; 0x28
 800acc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acc6:	f000 faff 	bl	800b2c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acca:	4b1c      	ldr	r3, [pc, #112]	; (800ad3c <xTimerCreateTimerTask+0x80>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d021      	beq.n	800ad16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800acda:	1d3a      	adds	r2, r7, #4
 800acdc:	f107 0108 	add.w	r1, r7, #8
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fe fb61 	bl	80093ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	9202      	str	r2, [sp, #8]
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	2302      	movs	r3, #2
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	2300      	movs	r3, #0
 800acfa:	460a      	mov	r2, r1
 800acfc:	4910      	ldr	r1, [pc, #64]	; (800ad40 <xTimerCreateTimerTask+0x84>)
 800acfe:	4811      	ldr	r0, [pc, #68]	; (800ad44 <xTimerCreateTimerTask+0x88>)
 800ad00:	f7ff f8f6 	bl	8009ef0 <xTaskCreateStatic>
 800ad04:	4602      	mov	r2, r0
 800ad06:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <xTimerCreateTimerTask+0x8c>)
 800ad08:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <xTimerCreateTimerTask+0x8c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad12:	2301      	movs	r3, #1
 800ad14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d109      	bne.n	800ad30 <xTimerCreateTimerTask+0x74>
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	613b      	str	r3, [r7, #16]
 800ad2e:	e7fe      	b.n	800ad2e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800ad30:	697b      	ldr	r3, [r7, #20]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20000f6c 	.word	0x20000f6c
 800ad40:	0800e728 	.word	0x0800e728
 800ad44:	0800ae7d 	.word	0x0800ae7d
 800ad48:	20000f70 	.word	0x20000f70

0800ad4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08a      	sub	sp, #40	; 0x28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d109      	bne.n	800ad78 <xTimerGenericCommand+0x2c>
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	623b      	str	r3, [r7, #32]
 800ad76:	e7fe      	b.n	800ad76 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad78:	4b19      	ldr	r3, [pc, #100]	; (800ade0 <xTimerGenericCommand+0x94>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d02a      	beq.n	800add6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b05      	cmp	r3, #5
 800ad90:	dc18      	bgt.n	800adc4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad92:	f7ff feb5 	bl	800ab00 <xTaskGetSchedulerState>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d109      	bne.n	800adb0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad9c:	4b10      	ldr	r3, [pc, #64]	; (800ade0 <xTimerGenericCommand+0x94>)
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	f107 0110 	add.w	r1, r7, #16
 800ada4:	2300      	movs	r3, #0
 800ada6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada8:	f7fe fccc 	bl	8009744 <xQueueGenericSend>
 800adac:	6278      	str	r0, [r7, #36]	; 0x24
 800adae:	e012      	b.n	800add6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adb0:	4b0b      	ldr	r3, [pc, #44]	; (800ade0 <xTimerGenericCommand+0x94>)
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	f107 0110 	add.w	r1, r7, #16
 800adb8:	2300      	movs	r3, #0
 800adba:	2200      	movs	r2, #0
 800adbc:	f7fe fcc2 	bl	8009744 <xQueueGenericSend>
 800adc0:	6278      	str	r0, [r7, #36]	; 0x24
 800adc2:	e008      	b.n	800add6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adc4:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <xTimerGenericCommand+0x94>)
 800adc6:	6818      	ldr	r0, [r3, #0]
 800adc8:	f107 0110 	add.w	r1, r7, #16
 800adcc:	2300      	movs	r3, #0
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	f7fe fdb2 	bl	8009938 <xQueueGenericSendFromISR>
 800add4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800add8:	4618      	mov	r0, r3
 800adda:	3728      	adds	r7, #40	; 0x28
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	20000f6c 	.word	0x20000f6c

0800ade4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af02      	add	r7, sp, #8
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adee:	4b22      	ldr	r3, [pc, #136]	; (800ae78 <prvProcessExpiredTimer+0x94>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	3304      	adds	r3, #4
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe fb79 	bl	80094f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d021      	beq.n	800ae54 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	699a      	ldr	r2, [r3, #24]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	18d1      	adds	r1, r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	6978      	ldr	r0, [r7, #20]
 800ae1e:	f000 f8d1 	bl	800afc4 <prvInsertTimerInActiveList>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01e      	beq.n	800ae66 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae28:	2300      	movs	r3, #0
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	2100      	movs	r1, #0
 800ae32:	6978      	ldr	r0, [r7, #20]
 800ae34:	f7ff ff8a 	bl	800ad4c <xTimerGenericCommand>
 800ae38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d112      	bne.n	800ae66 <prvProcessExpiredTimer+0x82>
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	e7fe      	b.n	800ae52 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae5a:	f023 0301 	bic.w	r3, r3, #1
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	6978      	ldr	r0, [r7, #20]
 800ae6c:	4798      	blx	r3
}
 800ae6e:	bf00      	nop
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20000f64 	.word	0x20000f64

0800ae7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae84:	f107 0308 	add.w	r3, r7, #8
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 f857 	bl	800af3c <prvGetNextExpireTime>
 800ae8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4619      	mov	r1, r3
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f803 	bl	800aea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae9a:	f000 f8d5 	bl	800b048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae9e:	e7f1      	b.n	800ae84 <prvTimerTask+0x8>

0800aea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aeaa:	f7ff fa57 	bl	800a35c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aeae:	f107 0308 	add.w	r3, r7, #8
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f866 	bl	800af84 <prvSampleTimeNow>
 800aeb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d130      	bne.n	800af22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <prvProcessTimerOrBlockTask+0x3c>
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d806      	bhi.n	800aedc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aece:	f7ff fa53 	bl	800a378 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff ff85 	bl	800ade4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aeda:	e024      	b.n	800af26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d008      	beq.n	800aef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aee2:	4b13      	ldr	r3, [pc, #76]	; (800af30 <prvProcessTimerOrBlockTask+0x90>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <prvProcessTimerOrBlockTask+0x50>
 800aeec:	2301      	movs	r3, #1
 800aeee:	e000      	b.n	800aef2 <prvProcessTimerOrBlockTask+0x52>
 800aef0:	2300      	movs	r3, #0
 800aef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aef4:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <prvProcessTimerOrBlockTask+0x94>)
 800aef6:	6818      	ldr	r0, [r3, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	4619      	mov	r1, r3
 800af02:	f7fe ffc1 	bl	8009e88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af06:	f7ff fa37 	bl	800a378 <xTaskResumeAll>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af10:	4b09      	ldr	r3, [pc, #36]	; (800af38 <prvProcessTimerOrBlockTask+0x98>)
 800af12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	f3bf 8f6f 	isb	sy
}
 800af20:	e001      	b.n	800af26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af22:	f7ff fa29 	bl	800a378 <xTaskResumeAll>
}
 800af26:	bf00      	nop
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000f68 	.word	0x20000f68
 800af34:	20000f6c 	.word	0x20000f6c
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af44:	4b0e      	ldr	r3, [pc, #56]	; (800af80 <prvGetNextExpireTime+0x44>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <prvGetNextExpireTime+0x16>
 800af4e:	2201      	movs	r2, #1
 800af50:	e000      	b.n	800af54 <prvGetNextExpireTime+0x18>
 800af52:	2200      	movs	r2, #0
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d105      	bne.n	800af6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af60:	4b07      	ldr	r3, [pc, #28]	; (800af80 <prvGetNextExpireTime+0x44>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	e001      	b.n	800af70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af6c:	2300      	movs	r3, #0
 800af6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af70:	68fb      	ldr	r3, [r7, #12]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	20000f64 	.word	0x20000f64

0800af84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af8c:	f7ff fa90 	bl	800a4b0 <xTaskGetTickCount>
 800af90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af92:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <prvSampleTimeNow+0x3c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d205      	bcs.n	800afa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af9c:	f000 f930 	bl	800b200 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	e002      	b.n	800afae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afae:	4a04      	ldr	r2, [pc, #16]	; (800afc0 <prvSampleTimeNow+0x3c>)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afb4:	68fb      	ldr	r3, [r7, #12]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000f74 	.word	0x20000f74

0800afc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d812      	bhi.n	800b010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d302      	bcc.n	800affe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aff8:	2301      	movs	r3, #1
 800affa:	617b      	str	r3, [r7, #20]
 800affc:	e01b      	b.n	800b036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800affe:	4b10      	ldr	r3, [pc, #64]	; (800b040 <prvInsertTimerInActiveList+0x7c>)
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3304      	adds	r3, #4
 800b006:	4619      	mov	r1, r3
 800b008:	4610      	mov	r0, r2
 800b00a:	f7fe fa3a 	bl	8009482 <vListInsert>
 800b00e:	e012      	b.n	800b036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	d206      	bcs.n	800b026 <prvInsertTimerInActiveList+0x62>
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d302      	bcc.n	800b026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b020:	2301      	movs	r3, #1
 800b022:	617b      	str	r3, [r7, #20]
 800b024:	e007      	b.n	800b036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b026:	4b07      	ldr	r3, [pc, #28]	; (800b044 <prvInsertTimerInActiveList+0x80>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3304      	adds	r3, #4
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7fe fa26 	bl	8009482 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b036:	697b      	ldr	r3, [r7, #20]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20000f68 	.word	0x20000f68
 800b044:	20000f64 	.word	0x20000f64

0800b048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08e      	sub	sp, #56	; 0x38
 800b04c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b04e:	e0c6      	b.n	800b1de <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	da17      	bge.n	800b086 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b056:	1d3b      	adds	r3, r7, #4
 800b058:	3304      	adds	r3, #4
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d109      	bne.n	800b076 <prvProcessReceivedCommands+0x2e>
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	61fb      	str	r3, [r7, #28]
 800b074:	e7fe      	b.n	800b074 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b07c:	6850      	ldr	r0, [r2, #4]
 800b07e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b080:	6892      	ldr	r2, [r2, #8]
 800b082:	4611      	mov	r1, r2
 800b084:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f2c0 80a7 	blt.w	800b1dc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d004      	beq.n	800b0a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	3304      	adds	r3, #4
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fa28 	bl	80094f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff ff6c 	bl	800af84 <prvSampleTimeNow>
 800b0ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b09      	cmp	r3, #9
 800b0b2:	f200 8094 	bhi.w	800b1de <prvProcessReceivedCommands+0x196>
 800b0b6:	a201      	add	r2, pc, #4	; (adr r2, 800b0bc <prvProcessReceivedCommands+0x74>)
 800b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0bc:	0800b0e5 	.word	0x0800b0e5
 800b0c0:	0800b0e5 	.word	0x0800b0e5
 800b0c4:	0800b0e5 	.word	0x0800b0e5
 800b0c8:	0800b157 	.word	0x0800b157
 800b0cc:	0800b16b 	.word	0x0800b16b
 800b0d0:	0800b1b3 	.word	0x0800b1b3
 800b0d4:	0800b0e5 	.word	0x0800b0e5
 800b0d8:	0800b0e5 	.word	0x0800b0e5
 800b0dc:	0800b157 	.word	0x0800b157
 800b0e0:	0800b16b 	.word	0x0800b16b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ea:	f043 0301 	orr.w	r3, r3, #1
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	18d1      	adds	r1, r2, r3
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b104:	f7ff ff5e 	bl	800afc4 <prvInsertTimerInActiveList>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d067      	beq.n	800b1de <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b114:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	d05c      	beq.n	800b1de <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	441a      	add	r2, r3
 800b12c:	2300      	movs	r3, #0
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	2300      	movs	r3, #0
 800b132:	2100      	movs	r1, #0
 800b134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b136:	f7ff fe09 	bl	800ad4c <xTimerGenericCommand>
 800b13a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d14d      	bne.n	800b1de <prvProcessReceivedCommands+0x196>
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	61bb      	str	r3, [r7, #24]
 800b154:	e7fe      	b.n	800b154 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b15c:	f023 0301 	bic.w	r3, r3, #1
 800b160:	b2da      	uxtb	r2, r3
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b168:	e039      	b.n	800b1de <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b170:	f043 0301 	orr.w	r3, r3, #1
 800b174:	b2da      	uxtb	r2, r3
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	699b      	ldr	r3, [r3, #24]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d109      	bne.n	800b19e <prvProcessReceivedCommands+0x156>
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	617b      	str	r3, [r7, #20]
 800b19c:	e7fe      	b.n	800b19c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a0:	699a      	ldr	r2, [r3, #24]
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	18d1      	adds	r1, r2, r3
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ac:	f7ff ff0a 	bl	800afc4 <prvInsertTimerInActiveList>
					break;
 800b1b0:	e015      	b.n	800b1de <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d103      	bne.n	800b1c8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c2:	f000 fbc7 	bl	800b954 <vPortFree>
 800b1c6:	e00a      	b.n	800b1de <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ce:	f023 0301 	bic.w	r3, r3, #1
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b1da:	e000      	b.n	800b1de <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b1dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1de:	4b07      	ldr	r3, [pc, #28]	; (800b1fc <prvProcessReceivedCommands+0x1b4>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	1d39      	adds	r1, r7, #4
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe fc3a 	bl	8009a60 <xQueueReceive>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f47f af2e 	bne.w	800b050 <prvProcessReceivedCommands+0x8>
	}
}
 800b1f4:	bf00      	nop
 800b1f6:	3730      	adds	r7, #48	; 0x30
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20000f6c 	.word	0x20000f6c

0800b200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b206:	e047      	b.n	800b298 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b208:	4b2d      	ldr	r3, [pc, #180]	; (800b2c0 <prvSwitchTimerLists+0xc0>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b212:	4b2b      	ldr	r3, [pc, #172]	; (800b2c0 <prvSwitchTimerLists+0xc0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3304      	adds	r3, #4
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe f967 	bl	80094f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d02d      	beq.n	800b298 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	4413      	add	r3, r2
 800b244:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d90e      	bls.n	800b26c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b25a:	4b19      	ldr	r3, [pc, #100]	; (800b2c0 <prvSwitchTimerLists+0xc0>)
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3304      	adds	r3, #4
 800b262:	4619      	mov	r1, r3
 800b264:	4610      	mov	r0, r2
 800b266:	f7fe f90c 	bl	8009482 <vListInsert>
 800b26a:	e015      	b.n	800b298 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b26c:	2300      	movs	r3, #0
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	2300      	movs	r3, #0
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	2100      	movs	r1, #0
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7ff fd68 	bl	800ad4c <xTimerGenericCommand>
 800b27c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d109      	bne.n	800b298 <prvSwitchTimerLists+0x98>
 800b284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	603b      	str	r3, [r7, #0]
 800b296:	e7fe      	b.n	800b296 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b298:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <prvSwitchTimerLists+0xc0>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1b2      	bne.n	800b208 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2a2:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <prvSwitchTimerLists+0xc0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2a8:	4b06      	ldr	r3, [pc, #24]	; (800b2c4 <prvSwitchTimerLists+0xc4>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a04      	ldr	r2, [pc, #16]	; (800b2c0 <prvSwitchTimerLists+0xc0>)
 800b2ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2b0:	4a04      	ldr	r2, [pc, #16]	; (800b2c4 <prvSwitchTimerLists+0xc4>)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	6013      	str	r3, [r2, #0]
}
 800b2b6:	bf00      	nop
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20000f64 	.word	0x20000f64
 800b2c4:	20000f68 	.word	0x20000f68

0800b2c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2ce:	f000 f965 	bl	800b59c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2d2:	4b15      	ldr	r3, [pc, #84]	; (800b328 <prvCheckForValidListAndQueue+0x60>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d120      	bne.n	800b31c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2da:	4814      	ldr	r0, [pc, #80]	; (800b32c <prvCheckForValidListAndQueue+0x64>)
 800b2dc:	f7fe f880 	bl	80093e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2e0:	4813      	ldr	r0, [pc, #76]	; (800b330 <prvCheckForValidListAndQueue+0x68>)
 800b2e2:	f7fe f87d 	bl	80093e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2e6:	4b13      	ldr	r3, [pc, #76]	; (800b334 <prvCheckForValidListAndQueue+0x6c>)
 800b2e8:	4a10      	ldr	r2, [pc, #64]	; (800b32c <prvCheckForValidListAndQueue+0x64>)
 800b2ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2ec:	4b12      	ldr	r3, [pc, #72]	; (800b338 <prvCheckForValidListAndQueue+0x70>)
 800b2ee:	4a10      	ldr	r2, [pc, #64]	; (800b330 <prvCheckForValidListAndQueue+0x68>)
 800b2f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	4b11      	ldr	r3, [pc, #68]	; (800b33c <prvCheckForValidListAndQueue+0x74>)
 800b2f8:	4a11      	ldr	r2, [pc, #68]	; (800b340 <prvCheckForValidListAndQueue+0x78>)
 800b2fa:	2110      	movs	r1, #16
 800b2fc:	200a      	movs	r0, #10
 800b2fe:	f7fe f98b 	bl	8009618 <xQueueGenericCreateStatic>
 800b302:	4602      	mov	r2, r0
 800b304:	4b08      	ldr	r3, [pc, #32]	; (800b328 <prvCheckForValidListAndQueue+0x60>)
 800b306:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b308:	4b07      	ldr	r3, [pc, #28]	; (800b328 <prvCheckForValidListAndQueue+0x60>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b310:	4b05      	ldr	r3, [pc, #20]	; (800b328 <prvCheckForValidListAndQueue+0x60>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	490b      	ldr	r1, [pc, #44]	; (800b344 <prvCheckForValidListAndQueue+0x7c>)
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fd8e 	bl	8009e38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b31c:	f000 f96c 	bl	800b5f8 <vPortExitCritical>
}
 800b320:	bf00      	nop
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	20000f6c 	.word	0x20000f6c
 800b32c:	20000f3c 	.word	0x20000f3c
 800b330:	20000f50 	.word	0x20000f50
 800b334:	20000f64 	.word	0x20000f64
 800b338:	20000f68 	.word	0x20000f68
 800b33c:	20001018 	.word	0x20001018
 800b340:	20000f78 	.word	0x20000f78
 800b344:	0800e730 	.word	0x0800e730

0800b348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3b04      	subs	r3, #4
 800b358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3b04      	subs	r3, #4
 800b366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	f023 0201 	bic.w	r2, r3, #1
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3b04      	subs	r3, #4
 800b376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b378:	4a0c      	ldr	r2, [pc, #48]	; (800b3ac <pxPortInitialiseStack+0x64>)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3b14      	subs	r3, #20
 800b382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3b04      	subs	r3, #4
 800b38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f06f 0202 	mvn.w	r2, #2
 800b396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3b20      	subs	r3, #32
 800b39c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b39e:	68fb      	ldr	r3, [r7, #12]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	0800b3b1 	.word	0x0800b3b1

0800b3b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3ba:	4b11      	ldr	r3, [pc, #68]	; (800b400 <prvTaskExitError+0x50>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3c2:	d009      	beq.n	800b3d8 <prvTaskExitError+0x28>
 800b3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	e7fe      	b.n	800b3d6 <prvTaskExitError+0x26>
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3ea:	bf00      	nop
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0fc      	beq.n	800b3ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3f2:	bf00      	nop
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	2000011c 	.word	0x2000011c
	...

0800b410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <pxCurrentTCBConst2>)
 800b412:	6819      	ldr	r1, [r3, #0]
 800b414:	6808      	ldr	r0, [r1, #0]
 800b416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41a:	f380 8809 	msr	PSP, r0
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f04f 0000 	mov.w	r0, #0
 800b426:	f380 8811 	msr	BASEPRI, r0
 800b42a:	4770      	bx	lr
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst2>:
 800b430:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b438:	4808      	ldr	r0, [pc, #32]	; (800b45c <prvPortStartFirstTask+0x24>)
 800b43a:	6800      	ldr	r0, [r0, #0]
 800b43c:	6800      	ldr	r0, [r0, #0]
 800b43e:	f380 8808 	msr	MSP, r0
 800b442:	f04f 0000 	mov.w	r0, #0
 800b446:	f380 8814 	msr	CONTROL, r0
 800b44a:	b662      	cpsie	i
 800b44c:	b661      	cpsie	f
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	df00      	svc	0
 800b458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b45a:	bf00      	nop
 800b45c:	e000ed08 	.word	0xe000ed08

0800b460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b466:	4b44      	ldr	r3, [pc, #272]	; (800b578 <xPortStartScheduler+0x118>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a44      	ldr	r2, [pc, #272]	; (800b57c <xPortStartScheduler+0x11c>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d109      	bne.n	800b484 <xPortStartScheduler+0x24>
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	613b      	str	r3, [r7, #16]
 800b482:	e7fe      	b.n	800b482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b484:	4b3c      	ldr	r3, [pc, #240]	; (800b578 <xPortStartScheduler+0x118>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a3d      	ldr	r2, [pc, #244]	; (800b580 <xPortStartScheduler+0x120>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d109      	bne.n	800b4a2 <xPortStartScheduler+0x42>
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e7fe      	b.n	800b4a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4a2:	4b38      	ldr	r3, [pc, #224]	; (800b584 <xPortStartScheduler+0x124>)
 800b4a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	22ff      	movs	r2, #255	; 0xff
 800b4b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	4b30      	ldr	r3, [pc, #192]	; (800b588 <xPortStartScheduler+0x128>)
 800b4c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4ca:	4b30      	ldr	r3, [pc, #192]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4cc:	2207      	movs	r2, #7
 800b4ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4d0:	e009      	b.n	800b4e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b4d2:	4b2e      	ldr	r3, [pc, #184]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	4a2c      	ldr	r2, [pc, #176]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4dc:	78fb      	ldrb	r3, [r7, #3]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4e6:	78fb      	ldrb	r3, [r7, #3]
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ee:	2b80      	cmp	r3, #128	; 0x80
 800b4f0:	d0ef      	beq.n	800b4d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4f2:	4b26      	ldr	r3, [pc, #152]	; (800b58c <xPortStartScheduler+0x12c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f1c3 0307 	rsb	r3, r3, #7
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	d009      	beq.n	800b512 <xPortStartScheduler+0xb2>
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60bb      	str	r3, [r7, #8]
 800b510:	e7fe      	b.n	800b510 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b512:	4b1e      	ldr	r3, [pc, #120]	; (800b58c <xPortStartScheduler+0x12c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	021b      	lsls	r3, r3, #8
 800b518:	4a1c      	ldr	r2, [pc, #112]	; (800b58c <xPortStartScheduler+0x12c>)
 800b51a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b51c:	4b1b      	ldr	r3, [pc, #108]	; (800b58c <xPortStartScheduler+0x12c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b524:	4a19      	ldr	r2, [pc, #100]	; (800b58c <xPortStartScheduler+0x12c>)
 800b526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	b2da      	uxtb	r2, r3
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b530:	4b17      	ldr	r3, [pc, #92]	; (800b590 <xPortStartScheduler+0x130>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a16      	ldr	r2, [pc, #88]	; (800b590 <xPortStartScheduler+0x130>)
 800b536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b53a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b53c:	4b14      	ldr	r3, [pc, #80]	; (800b590 <xPortStartScheduler+0x130>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a13      	ldr	r2, [pc, #76]	; (800b590 <xPortStartScheduler+0x130>)
 800b542:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b548:	f000 f8d6 	bl	800b6f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b54c:	4b11      	ldr	r3, [pc, #68]	; (800b594 <xPortStartScheduler+0x134>)
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b552:	f000 f8f5 	bl	800b740 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b556:	4b10      	ldr	r3, [pc, #64]	; (800b598 <xPortStartScheduler+0x138>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a0f      	ldr	r2, [pc, #60]	; (800b598 <xPortStartScheduler+0x138>)
 800b55c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b560:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b562:	f7ff ff69 	bl	800b438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b566:	f7ff f86b 	bl	800a640 <vTaskSwitchContext>
	prvTaskExitError();
 800b56a:	f7ff ff21 	bl	800b3b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	e000ed00 	.word	0xe000ed00
 800b57c:	410fc271 	.word	0x410fc271
 800b580:	410fc270 	.word	0x410fc270
 800b584:	e000e400 	.word	0xe000e400
 800b588:	20001068 	.word	0x20001068
 800b58c:	2000106c 	.word	0x2000106c
 800b590:	e000ed20 	.word	0xe000ed20
 800b594:	2000011c 	.word	0x2000011c
 800b598:	e000ef34 	.word	0xe000ef34

0800b59c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5b4:	4b0e      	ldr	r3, [pc, #56]	; (800b5f0 <vPortEnterCritical+0x54>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	4a0d      	ldr	r2, [pc, #52]	; (800b5f0 <vPortEnterCritical+0x54>)
 800b5bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5be:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <vPortEnterCritical+0x54>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d10e      	bne.n	800b5e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5c6:	4b0b      	ldr	r3, [pc, #44]	; (800b5f4 <vPortEnterCritical+0x58>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d009      	beq.n	800b5e4 <vPortEnterCritical+0x48>
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	603b      	str	r3, [r7, #0]
 800b5e2:	e7fe      	b.n	800b5e2 <vPortEnterCritical+0x46>
	}
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	2000011c 	.word	0x2000011c
 800b5f4:	e000ed04 	.word	0xe000ed04

0800b5f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <vPortExitCritical+0x4c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d109      	bne.n	800b61a <vPortExitCritical+0x22>
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	607b      	str	r3, [r7, #4]
 800b618:	e7fe      	b.n	800b618 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b61a:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <vPortExitCritical+0x4c>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3b01      	subs	r3, #1
 800b620:	4a08      	ldr	r2, [pc, #32]	; (800b644 <vPortExitCritical+0x4c>)
 800b622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b624:	4b07      	ldr	r3, [pc, #28]	; (800b644 <vPortExitCritical+0x4c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d104      	bne.n	800b636 <vPortExitCritical+0x3e>
 800b62c:	2300      	movs	r3, #0
 800b62e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b636:	bf00      	nop
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	2000011c 	.word	0x2000011c
	...

0800b650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b650:	f3ef 8009 	mrs	r0, PSP
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	4b15      	ldr	r3, [pc, #84]	; (800b6b0 <pxCurrentTCBConst>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	f01e 0f10 	tst.w	lr, #16
 800b660:	bf08      	it	eq
 800b662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66a:	6010      	str	r0, [r2, #0]
 800b66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b674:	f380 8811 	msr	BASEPRI, r0
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f7fe ffde 	bl	800a640 <vTaskSwitchContext>
 800b684:	f04f 0000 	mov.w	r0, #0
 800b688:	f380 8811 	msr	BASEPRI, r0
 800b68c:	bc09      	pop	{r0, r3}
 800b68e:	6819      	ldr	r1, [r3, #0]
 800b690:	6808      	ldr	r0, [r1, #0]
 800b692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b696:	f01e 0f10 	tst.w	lr, #16
 800b69a:	bf08      	it	eq
 800b69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6a0:	f380 8809 	msr	PSP, r0
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	f3af 8000 	nop.w

0800b6b0 <pxCurrentTCBConst>:
 800b6b0:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop

0800b6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6d0:	f7fe fefe 	bl	800a4d0 <xTaskIncrementTick>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6da:	4b06      	ldr	r3, [pc, #24]	; (800b6f4 <xPortSysTickHandler+0x3c>)
 800b6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e0:	601a      	str	r2, [r3, #0]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6ec:	bf00      	nop
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	e000ed04 	.word	0xe000ed04

0800b6f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6fc:	4b0b      	ldr	r3, [pc, #44]	; (800b72c <vPortSetupTimerInterrupt+0x34>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b702:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <vPortSetupTimerInterrupt+0x38>)
 800b704:	2200      	movs	r2, #0
 800b706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b708:	4b0a      	ldr	r3, [pc, #40]	; (800b734 <vPortSetupTimerInterrupt+0x3c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a0a      	ldr	r2, [pc, #40]	; (800b738 <vPortSetupTimerInterrupt+0x40>)
 800b70e:	fba2 2303 	umull	r2, r3, r2, r3
 800b712:	099b      	lsrs	r3, r3, #6
 800b714:	4a09      	ldr	r2, [pc, #36]	; (800b73c <vPortSetupTimerInterrupt+0x44>)
 800b716:	3b01      	subs	r3, #1
 800b718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b71a:	4b04      	ldr	r3, [pc, #16]	; (800b72c <vPortSetupTimerInterrupt+0x34>)
 800b71c:	2207      	movs	r2, #7
 800b71e:	601a      	str	r2, [r3, #0]
}
 800b720:	bf00      	nop
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	e000e010 	.word	0xe000e010
 800b730:	e000e018 	.word	0xe000e018
 800b734:	20000000 	.word	0x20000000
 800b738:	10624dd3 	.word	0x10624dd3
 800b73c:	e000e014 	.word	0xe000e014

0800b740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b750 <vPortEnableVFP+0x10>
 800b744:	6801      	ldr	r1, [r0, #0]
 800b746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b74a:	6001      	str	r1, [r0, #0]
 800b74c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b74e:	bf00      	nop
 800b750:	e000ed88 	.word	0xe000ed88

0800b754 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b75a:	f3ef 8305 	mrs	r3, IPSR
 800b75e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b0f      	cmp	r3, #15
 800b764:	d913      	bls.n	800b78e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b766:	4a16      	ldr	r2, [pc, #88]	; (800b7c0 <vPortValidateInterruptPriority+0x6c>)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4413      	add	r3, r2
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b770:	4b14      	ldr	r3, [pc, #80]	; (800b7c4 <vPortValidateInterruptPriority+0x70>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	7afa      	ldrb	r2, [r7, #11]
 800b776:	429a      	cmp	r2, r3
 800b778:	d209      	bcs.n	800b78e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	607b      	str	r3, [r7, #4]
 800b78c:	e7fe      	b.n	800b78c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b78e:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <vPortValidateInterruptPriority+0x74>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b796:	4b0d      	ldr	r3, [pc, #52]	; (800b7cc <vPortValidateInterruptPriority+0x78>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d909      	bls.n	800b7b2 <vPortValidateInterruptPriority+0x5e>
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	e7fe      	b.n	800b7b0 <vPortValidateInterruptPriority+0x5c>
	}
 800b7b2:	bf00      	nop
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	e000e3f0 	.word	0xe000e3f0
 800b7c4:	20001068 	.word	0x20001068
 800b7c8:	e000ed0c 	.word	0xe000ed0c
 800b7cc:	2000106c 	.word	0x2000106c

0800b7d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08a      	sub	sp, #40	; 0x28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7dc:	f7fe fdbe 	bl	800a35c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7e0:	4b57      	ldr	r3, [pc, #348]	; (800b940 <pvPortMalloc+0x170>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7e8:	f000 f90c 	bl	800ba04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7ec:	4b55      	ldr	r3, [pc, #340]	; (800b944 <pvPortMalloc+0x174>)
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f040 808c 	bne.w	800b912 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01c      	beq.n	800b83a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b800:	2208      	movs	r2, #8
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4413      	add	r3, r2
 800b806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f003 0307 	and.w	r3, r3, #7
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d013      	beq.n	800b83a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f023 0307 	bic.w	r3, r3, #7
 800b818:	3308      	adds	r3, #8
 800b81a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f003 0307 	and.w	r3, r3, #7
 800b822:	2b00      	cmp	r3, #0
 800b824:	d009      	beq.n	800b83a <pvPortMalloc+0x6a>
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	e7fe      	b.n	800b838 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d068      	beq.n	800b912 <pvPortMalloc+0x142>
 800b840:	4b41      	ldr	r3, [pc, #260]	; (800b948 <pvPortMalloc+0x178>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	429a      	cmp	r2, r3
 800b848:	d863      	bhi.n	800b912 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b84a:	4b40      	ldr	r3, [pc, #256]	; (800b94c <pvPortMalloc+0x17c>)
 800b84c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b84e:	4b3f      	ldr	r3, [pc, #252]	; (800b94c <pvPortMalloc+0x17c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b854:	e004      	b.n	800b860 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	429a      	cmp	r2, r3
 800b868:	d903      	bls.n	800b872 <pvPortMalloc+0xa2>
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1f1      	bne.n	800b856 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b872:	4b33      	ldr	r3, [pc, #204]	; (800b940 <pvPortMalloc+0x170>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b878:	429a      	cmp	r2, r3
 800b87a:	d04a      	beq.n	800b912 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2208      	movs	r2, #8
 800b882:	4413      	add	r3, r2
 800b884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	1ad2      	subs	r2, r2, r3
 800b896:	2308      	movs	r3, #8
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d91e      	bls.n	800b8dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d009      	beq.n	800b8c4 <pvPortMalloc+0xf4>
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	613b      	str	r3, [r7, #16]
 800b8c2:	e7fe      	b.n	800b8c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	685a      	ldr	r2, [r3, #4]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	1ad2      	subs	r2, r2, r3
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8d6:	69b8      	ldr	r0, [r7, #24]
 800b8d8:	f000 f8f6 	bl	800bac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8dc:	4b1a      	ldr	r3, [pc, #104]	; (800b948 <pvPortMalloc+0x178>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	4a18      	ldr	r2, [pc, #96]	; (800b948 <pvPortMalloc+0x178>)
 800b8e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8ea:	4b17      	ldr	r3, [pc, #92]	; (800b948 <pvPortMalloc+0x178>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b18      	ldr	r3, [pc, #96]	; (800b950 <pvPortMalloc+0x180>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d203      	bcs.n	800b8fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8f6:	4b14      	ldr	r3, [pc, #80]	; (800b948 <pvPortMalloc+0x178>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a15      	ldr	r2, [pc, #84]	; (800b950 <pvPortMalloc+0x180>)
 800b8fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b900:	685a      	ldr	r2, [r3, #4]
 800b902:	4b10      	ldr	r3, [pc, #64]	; (800b944 <pvPortMalloc+0x174>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	431a      	orrs	r2, r3
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	2200      	movs	r2, #0
 800b910:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b912:	f7fe fd31 	bl	800a378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	f003 0307 	and.w	r3, r3, #7
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d009      	beq.n	800b934 <pvPortMalloc+0x164>
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	e7fe      	b.n	800b932 <pvPortMalloc+0x162>
	return pvReturn;
 800b934:	69fb      	ldr	r3, [r7, #28]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3728      	adds	r7, #40	; 0x28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	20004c78 	.word	0x20004c78
 800b944:	20004c84 	.word	0x20004c84
 800b948:	20004c7c 	.word	0x20004c7c
 800b94c:	20004c70 	.word	0x20004c70
 800b950:	20004c80 	.word	0x20004c80

0800b954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d046      	beq.n	800b9f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b966:	2308      	movs	r3, #8
 800b968:	425b      	negs	r3, r3
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	4413      	add	r3, r2
 800b96e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	685a      	ldr	r2, [r3, #4]
 800b978:	4b20      	ldr	r3, [pc, #128]	; (800b9fc <vPortFree+0xa8>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4013      	ands	r3, r2
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d109      	bne.n	800b996 <vPortFree+0x42>
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	e7fe      	b.n	800b994 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d009      	beq.n	800b9b2 <vPortFree+0x5e>
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	60bb      	str	r3, [r7, #8]
 800b9b0:	e7fe      	b.n	800b9b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <vPortFree+0xa8>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d019      	beq.n	800b9f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d115      	bne.n	800b9f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	4b0b      	ldr	r3, [pc, #44]	; (800b9fc <vPortFree+0xa8>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	43db      	mvns	r3, r3
 800b9d2:	401a      	ands	r2, r3
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9d8:	f7fe fcc0 	bl	800a35c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <vPortFree+0xac>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	4a06      	ldr	r2, [pc, #24]	; (800ba00 <vPortFree+0xac>)
 800b9e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9ea:	6938      	ldr	r0, [r7, #16]
 800b9ec:	f000 f86c 	bl	800bac8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b9f0:	f7fe fcc2 	bl	800a378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9f4:	bf00      	nop
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	20004c84 	.word	0x20004c84
 800ba00:	20004c7c 	.word	0x20004c7c

0800ba04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ba0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba10:	4b27      	ldr	r3, [pc, #156]	; (800bab0 <prvHeapInit+0xac>)
 800ba12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00c      	beq.n	800ba38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3307      	adds	r3, #7
 800ba22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f023 0307 	bic.w	r3, r3, #7
 800ba2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	4a1f      	ldr	r2, [pc, #124]	; (800bab0 <prvHeapInit+0xac>)
 800ba34:	4413      	add	r3, r2
 800ba36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba3c:	4a1d      	ldr	r2, [pc, #116]	; (800bab4 <prvHeapInit+0xb0>)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba42:	4b1c      	ldr	r3, [pc, #112]	; (800bab4 <prvHeapInit+0xb0>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba50:	2208      	movs	r2, #8
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f023 0307 	bic.w	r3, r3, #7
 800ba5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <prvHeapInit+0xb4>)
 800ba64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba66:	4b14      	ldr	r3, [pc, #80]	; (800bab8 <prvHeapInit+0xb4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba6e:	4b12      	ldr	r3, [pc, #72]	; (800bab8 <prvHeapInit+0xb4>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba84:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <prvHeapInit+0xb4>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	4a0a      	ldr	r2, [pc, #40]	; (800babc <prvHeapInit+0xb8>)
 800ba92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	4a09      	ldr	r2, [pc, #36]	; (800bac0 <prvHeapInit+0xbc>)
 800ba9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba9c:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <prvHeapInit+0xc0>)
 800ba9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800baa2:	601a      	str	r2, [r3, #0]
}
 800baa4:	bf00      	nop
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	20001070 	.word	0x20001070
 800bab4:	20004c70 	.word	0x20004c70
 800bab8:	20004c78 	.word	0x20004c78
 800babc:	20004c80 	.word	0x20004c80
 800bac0:	20004c7c 	.word	0x20004c7c
 800bac4:	20004c84 	.word	0x20004c84

0800bac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bad0:	4b28      	ldr	r3, [pc, #160]	; (800bb74 <prvInsertBlockIntoFreeList+0xac>)
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	e002      	b.n	800badc <prvInsertBlockIntoFreeList+0x14>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d8f7      	bhi.n	800bad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	4413      	add	r3, r2
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d108      	bne.n	800bb0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	441a      	add	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	441a      	add	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d118      	bne.n	800bb50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <prvInsertBlockIntoFreeList+0xb0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d00d      	beq.n	800bb46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	441a      	add	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	e008      	b.n	800bb58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb46:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <prvInsertBlockIntoFreeList+0xb0>)
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	601a      	str	r2, [r3, #0]
 800bb4e:	e003      	b.n	800bb58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d002      	beq.n	800bb66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb66:	bf00      	nop
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	20004c70 	.word	0x20004c70
 800bb78:	20004c78 	.word	0x20004c78

0800bb7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb80:	2200      	movs	r2, #0
 800bb82:	4912      	ldr	r1, [pc, #72]	; (800bbcc <MX_USB_DEVICE_Init+0x50>)
 800bb84:	4812      	ldr	r0, [pc, #72]	; (800bbd0 <MX_USB_DEVICE_Init+0x54>)
 800bb86:	f7fc f9e9 	bl	8007f5c <USBD_Init>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb90:	f7f5 fe02 	bl	8001798 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb94:	490f      	ldr	r1, [pc, #60]	; (800bbd4 <MX_USB_DEVICE_Init+0x58>)
 800bb96:	480e      	ldr	r0, [pc, #56]	; (800bbd0 <MX_USB_DEVICE_Init+0x54>)
 800bb98:	f7fc fa16 	bl	8007fc8 <USBD_RegisterClass>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bba2:	f7f5 fdf9 	bl	8001798 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bba6:	490c      	ldr	r1, [pc, #48]	; (800bbd8 <MX_USB_DEVICE_Init+0x5c>)
 800bba8:	4809      	ldr	r0, [pc, #36]	; (800bbd0 <MX_USB_DEVICE_Init+0x54>)
 800bbaa:	f7fc f93b 	bl	8007e24 <USBD_CDC_RegisterInterface>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbb4:	f7f5 fdf0 	bl	8001798 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bbb8:	4805      	ldr	r0, [pc, #20]	; (800bbd0 <MX_USB_DEVICE_Init+0x54>)
 800bbba:	f7fc fa26 	bl	800800a <USBD_Start>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbc4:	f7f5 fde8 	bl	8001798 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbc8:	bf00      	nop
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	20000134 	.word	0x20000134
 800bbd0:	20005074 	.word	0x20005074
 800bbd4:	20000018 	.word	0x20000018
 800bbd8:	20000120 	.word	0x20000120

0800bbdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4905      	ldr	r1, [pc, #20]	; (800bbf8 <CDC_Init_FS+0x1c>)
 800bbe4:	4805      	ldr	r0, [pc, #20]	; (800bbfc <CDC_Init_FS+0x20>)
 800bbe6:	f7fc f932 	bl	8007e4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbea:	4905      	ldr	r1, [pc, #20]	; (800bc00 <CDC_Init_FS+0x24>)
 800bbec:	4803      	ldr	r0, [pc, #12]	; (800bbfc <CDC_Init_FS+0x20>)
 800bbee:	f7fc f947 	bl	8007e80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	20005b44 	.word	0x20005b44
 800bbfc:	20005074 	.word	0x20005074
 800bc00:	20005344 	.word	0x20005344

0800bc04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	6039      	str	r1, [r7, #0]
 800bc1e:	71fb      	strb	r3, [r7, #7]
 800bc20:	4613      	mov	r3, r2
 800bc22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc24:	79fb      	ldrb	r3, [r7, #7]
 800bc26:	2b23      	cmp	r3, #35	; 0x23
 800bc28:	d84a      	bhi.n	800bcc0 <CDC_Control_FS+0xac>
 800bc2a:	a201      	add	r2, pc, #4	; (adr r2, 800bc30 <CDC_Control_FS+0x1c>)
 800bc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc30:	0800bcc1 	.word	0x0800bcc1
 800bc34:	0800bcc1 	.word	0x0800bcc1
 800bc38:	0800bcc1 	.word	0x0800bcc1
 800bc3c:	0800bcc1 	.word	0x0800bcc1
 800bc40:	0800bcc1 	.word	0x0800bcc1
 800bc44:	0800bcc1 	.word	0x0800bcc1
 800bc48:	0800bcc1 	.word	0x0800bcc1
 800bc4c:	0800bcc1 	.word	0x0800bcc1
 800bc50:	0800bcc1 	.word	0x0800bcc1
 800bc54:	0800bcc1 	.word	0x0800bcc1
 800bc58:	0800bcc1 	.word	0x0800bcc1
 800bc5c:	0800bcc1 	.word	0x0800bcc1
 800bc60:	0800bcc1 	.word	0x0800bcc1
 800bc64:	0800bcc1 	.word	0x0800bcc1
 800bc68:	0800bcc1 	.word	0x0800bcc1
 800bc6c:	0800bcc1 	.word	0x0800bcc1
 800bc70:	0800bcc1 	.word	0x0800bcc1
 800bc74:	0800bcc1 	.word	0x0800bcc1
 800bc78:	0800bcc1 	.word	0x0800bcc1
 800bc7c:	0800bcc1 	.word	0x0800bcc1
 800bc80:	0800bcc1 	.word	0x0800bcc1
 800bc84:	0800bcc1 	.word	0x0800bcc1
 800bc88:	0800bcc1 	.word	0x0800bcc1
 800bc8c:	0800bcc1 	.word	0x0800bcc1
 800bc90:	0800bcc1 	.word	0x0800bcc1
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	0800bcc1 	.word	0x0800bcc1
 800bc9c:	0800bcc1 	.word	0x0800bcc1
 800bca0:	0800bcc1 	.word	0x0800bcc1
 800bca4:	0800bcc1 	.word	0x0800bcc1
 800bca8:	0800bcc1 	.word	0x0800bcc1
 800bcac:	0800bcc1 	.word	0x0800bcc1
 800bcb0:	0800bcc1 	.word	0x0800bcc1
 800bcb4:	0800bcc1 	.word	0x0800bcc1
 800bcb8:	0800bcc1 	.word	0x0800bcc1
 800bcbc:	0800bcc1 	.word	0x0800bcc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bcc0:	bf00      	nop
  }

  return (USBD_OK);
 800bcc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	4805      	ldr	r0, [pc, #20]	; (800bcf4 <CDC_Receive_FS+0x24>)
 800bcde:	f7fc f8cf 	bl	8007e80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bce2:	4804      	ldr	r0, [pc, #16]	; (800bcf4 <CDC_Receive_FS+0x24>)
 800bce4:	f7fc f910 	bl	8007f08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bce8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20005074 	.word	0x20005074

0800bcf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd08:	4b0d      	ldr	r3, [pc, #52]	; (800bd40 <CDC_Transmit_FS+0x48>)
 800bd0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e00b      	b.n	800bd36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd1e:	887b      	ldrh	r3, [r7, #2]
 800bd20:	461a      	mov	r2, r3
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	4806      	ldr	r0, [pc, #24]	; (800bd40 <CDC_Transmit_FS+0x48>)
 800bd26:	f7fc f892 	bl	8007e4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd2a:	4805      	ldr	r0, [pc, #20]	; (800bd40 <CDC_Transmit_FS+0x48>)
 800bd2c:	f7fc f8bc 	bl	8007ea8 <USBD_CDC_TransmitPacket>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20005074 	.word	0x20005074

0800bd44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	371c      	adds	r7, #28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
	...

0800bd68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	6039      	str	r1, [r7, #0]
 800bd72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	2212      	movs	r2, #18
 800bd78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd7a:	4b03      	ldr	r3, [pc, #12]	; (800bd88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	20000150 	.word	0x20000150

0800bd8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	6039      	str	r1, [r7, #0]
 800bd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2204      	movs	r2, #4
 800bd9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd9e:	4b03      	ldr	r3, [pc, #12]	; (800bdac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	20000164 	.word	0x20000164

0800bdb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	6039      	str	r1, [r7, #0]
 800bdba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	4907      	ldr	r1, [pc, #28]	; (800bde4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdc6:	4808      	ldr	r0, [pc, #32]	; (800bde8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdc8:	f7fd f8ed 	bl	8008fa6 <USBD_GetString>
 800bdcc:	e004      	b.n	800bdd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	4904      	ldr	r1, [pc, #16]	; (800bde4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdd2:	4805      	ldr	r0, [pc, #20]	; (800bde8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdd4:	f7fd f8e7 	bl	8008fa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdd8:	4b02      	ldr	r3, [pc, #8]	; (800bde4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20006344 	.word	0x20006344
 800bde8:	0800e738 	.word	0x0800e738

0800bdec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	6039      	str	r1, [r7, #0]
 800bdf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	4904      	ldr	r1, [pc, #16]	; (800be0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bdfc:	4804      	ldr	r0, [pc, #16]	; (800be10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bdfe:	f7fd f8d2 	bl	8008fa6 <USBD_GetString>
  return USBD_StrDesc;
 800be02:	4b02      	ldr	r3, [pc, #8]	; (800be0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be04:	4618      	mov	r0, r3
 800be06:	3708      	adds	r7, #8
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	20006344 	.word	0x20006344
 800be10:	0800e748 	.word	0x0800e748

0800be14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	221a      	movs	r2, #26
 800be24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be26:	f000 f843 	bl	800beb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be2a:	4b02      	ldr	r3, [pc, #8]	; (800be34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20000168 	.word	0x20000168

0800be38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	6039      	str	r1, [r7, #0]
 800be42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be44:	79fb      	ldrb	r3, [r7, #7]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d105      	bne.n	800be56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	4907      	ldr	r1, [pc, #28]	; (800be6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800be4e:	4808      	ldr	r0, [pc, #32]	; (800be70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be50:	f7fd f8a9 	bl	8008fa6 <USBD_GetString>
 800be54:	e004      	b.n	800be60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	4904      	ldr	r1, [pc, #16]	; (800be6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800be5a:	4805      	ldr	r0, [pc, #20]	; (800be70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be5c:	f7fd f8a3 	bl	8008fa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be60:	4b02      	ldr	r3, [pc, #8]	; (800be6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	20006344 	.word	0x20006344
 800be70:	0800e75c 	.word	0x0800e75c

0800be74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	6039      	str	r1, [r7, #0]
 800be7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4907      	ldr	r1, [pc, #28]	; (800bea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be8a:	4808      	ldr	r0, [pc, #32]	; (800beac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be8c:	f7fd f88b 	bl	8008fa6 <USBD_GetString>
 800be90:	e004      	b.n	800be9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	4904      	ldr	r1, [pc, #16]	; (800bea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be96:	4805      	ldr	r0, [pc, #20]	; (800beac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be98:	f7fd f885 	bl	8008fa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be9c:	4b02      	ldr	r3, [pc, #8]	; (800bea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20006344 	.word	0x20006344
 800beac:	0800e768 	.word	0x0800e768

0800beb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800beb6:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <Get_SerialNum+0x44>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bebc:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <Get_SerialNum+0x48>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bec2:	4b0e      	ldr	r3, [pc, #56]	; (800befc <Get_SerialNum+0x4c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4413      	add	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d009      	beq.n	800beea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bed6:	2208      	movs	r2, #8
 800bed8:	4909      	ldr	r1, [pc, #36]	; (800bf00 <Get_SerialNum+0x50>)
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 f814 	bl	800bf08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bee0:	2204      	movs	r2, #4
 800bee2:	4908      	ldr	r1, [pc, #32]	; (800bf04 <Get_SerialNum+0x54>)
 800bee4:	68b8      	ldr	r0, [r7, #8]
 800bee6:	f000 f80f 	bl	800bf08 <IntToUnicode>
  }
}
 800beea:	bf00      	nop
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	1fff7a10 	.word	0x1fff7a10
 800bef8:	1fff7a14 	.word	0x1fff7a14
 800befc:	1fff7a18 	.word	0x1fff7a18
 800bf00:	2000016a 	.word	0x2000016a
 800bf04:	2000017a 	.word	0x2000017a

0800bf08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	75fb      	strb	r3, [r7, #23]
 800bf1e:	e027      	b.n	800bf70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	0f1b      	lsrs	r3, r3, #28
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	d80b      	bhi.n	800bf40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	0f1b      	lsrs	r3, r3, #28
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	4619      	mov	r1, r3
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	440b      	add	r3, r1
 800bf38:	3230      	adds	r2, #48	; 0x30
 800bf3a:	b2d2      	uxtb	r2, r2
 800bf3c:	701a      	strb	r2, [r3, #0]
 800bf3e:	e00a      	b.n	800bf56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	0f1b      	lsrs	r3, r3, #28
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	440b      	add	r3, r1
 800bf50:	3237      	adds	r2, #55	; 0x37
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	011b      	lsls	r3, r3, #4
 800bf5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	3301      	adds	r3, #1
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	4413      	add	r3, r2
 800bf66:	2200      	movs	r2, #0
 800bf68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	75fb      	strb	r3, [r7, #23]
 800bf70:	7dfa      	ldrb	r2, [r7, #23]
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d3d3      	bcc.n	800bf20 <IntToUnicode+0x18>
  }
}
 800bf78:	bf00      	nop
 800bf7a:	371c      	adds	r7, #28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	; 0x28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf8c:	f107 0314 	add.w	r3, r7, #20
 800bf90:	2200      	movs	r2, #0
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	605a      	str	r2, [r3, #4]
 800bf96:	609a      	str	r2, [r3, #8]
 800bf98:	60da      	str	r2, [r3, #12]
 800bf9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfa4:	d147      	bne.n	800c036 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	613b      	str	r3, [r7, #16]
 800bfaa:	4b25      	ldr	r3, [pc, #148]	; (800c040 <HAL_PCD_MspInit+0xbc>)
 800bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfae:	4a24      	ldr	r2, [pc, #144]	; (800c040 <HAL_PCD_MspInit+0xbc>)
 800bfb0:	f043 0301 	orr.w	r3, r3, #1
 800bfb4:	6313      	str	r3, [r2, #48]	; 0x30
 800bfb6:	4b22      	ldr	r3, [pc, #136]	; (800c040 <HAL_PCD_MspInit+0xbc>)
 800bfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	613b      	str	r3, [r7, #16]
 800bfc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bfc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bfd0:	f107 0314 	add.w	r3, r7, #20
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	481b      	ldr	r0, [pc, #108]	; (800c044 <HAL_PCD_MspInit+0xc0>)
 800bfd8:	f7f5 ffee 	bl	8001fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bfdc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bfe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfea:	2303      	movs	r3, #3
 800bfec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bfee:	230a      	movs	r3, #10
 800bff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bff2:	f107 0314 	add.w	r3, r7, #20
 800bff6:	4619      	mov	r1, r3
 800bff8:	4812      	ldr	r0, [pc, #72]	; (800c044 <HAL_PCD_MspInit+0xc0>)
 800bffa:	f7f5 ffdd 	bl	8001fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bffe:	4b10      	ldr	r3, [pc, #64]	; (800c040 <HAL_PCD_MspInit+0xbc>)
 800c000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c002:	4a0f      	ldr	r2, [pc, #60]	; (800c040 <HAL_PCD_MspInit+0xbc>)
 800c004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c008:	6353      	str	r3, [r2, #52]	; 0x34
 800c00a:	2300      	movs	r3, #0
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	4b0c      	ldr	r3, [pc, #48]	; (800c040 <HAL_PCD_MspInit+0xbc>)
 800c010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c012:	4a0b      	ldr	r2, [pc, #44]	; (800c040 <HAL_PCD_MspInit+0xbc>)
 800c014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c018:	6453      	str	r3, [r2, #68]	; 0x44
 800c01a:	4b09      	ldr	r3, [pc, #36]	; (800c040 <HAL_PCD_MspInit+0xbc>)
 800c01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c01e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c026:	2200      	movs	r2, #0
 800c028:	2105      	movs	r1, #5
 800c02a:	2043      	movs	r0, #67	; 0x43
 800c02c:	f7f5 ff8d 	bl	8001f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c030:	2043      	movs	r0, #67	; 0x43
 800c032:	f7f5 ffa6 	bl	8001f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c036:	bf00      	nop
 800c038:	3728      	adds	r7, #40	; 0x28
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	40023800 	.word	0x40023800
 800c044:	40020000 	.word	0x40020000

0800c048 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c05c:	4619      	mov	r1, r3
 800c05e:	4610      	mov	r0, r2
 800c060:	f7fc f81e 	bl	80080a0 <USBD_LL_SetupStage>
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c07e:	78fa      	ldrb	r2, [r7, #3]
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	1a9b      	subs	r3, r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	440b      	add	r3, r1
 800c08c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	78fb      	ldrb	r3, [r7, #3]
 800c094:	4619      	mov	r1, r3
 800c096:	f7fc f856 	bl	8008146 <USBD_LL_DataOutStage>
}
 800c09a:	bf00      	nop
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c0b4:	78fa      	ldrb	r2, [r7, #3]
 800c0b6:	6879      	ldr	r1, [r7, #4]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	00db      	lsls	r3, r3, #3
 800c0bc:	1a9b      	subs	r3, r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	440b      	add	r3, r1
 800c0c2:	3348      	adds	r3, #72	; 0x48
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	78fb      	ldrb	r3, [r7, #3]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	f7fc f89f 	bl	800820c <USBD_LL_DataInStage>
}
 800c0ce:	bf00      	nop
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fc f9a3 	bl	8008430 <USBD_LL_SOF>
}
 800c0ea:	bf00      	nop
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	2b02      	cmp	r3, #2
 800c104:	d001      	beq.n	800c10a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c106:	f7f5 fb47 	bl	8001798 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c110:	7bfa      	ldrb	r2, [r7, #15]
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f7fc f950 	bl	80083ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c120:	4618      	mov	r0, r3
 800c122:	f7fc f909 	bl	8008338 <USBD_LL_Reset>
}
 800c126:	bf00      	nop
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
	...

0800c130 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fc f94b 	bl	80083da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	6812      	ldr	r2, [r2, #0]
 800c152:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c156:	f043 0301 	orr.w	r3, r3, #1
 800c15a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d005      	beq.n	800c170 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c164:	4b04      	ldr	r3, [pc, #16]	; (800c178 <HAL_PCD_SuspendCallback+0x48>)
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	4a03      	ldr	r2, [pc, #12]	; (800c178 <HAL_PCD_SuspendCallback+0x48>)
 800c16a:	f043 0306 	orr.w	r3, r3, #6
 800c16e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c170:	bf00      	nop
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	e000ed00 	.word	0xe000ed00

0800c17c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fc f93a 	bl	8008404 <USBD_LL_Resume>
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1aa:	78fa      	ldrb	r2, [r7, #3]
 800c1ac:	4611      	mov	r1, r2
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fc f965 	bl	800847e <USBD_LL_IsoOUTIncomplete>
}
 800c1b4:	bf00      	nop
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1ce:	78fa      	ldrb	r2, [r7, #3]
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fc f946 	bl	8008464 <USBD_LL_IsoINIncomplete>
}
 800c1d8:	bf00      	nop
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fc f952 	bl	8008498 <USBD_LL_DevConnected>
}
 800c1f4:	bf00      	nop
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fc f94f 	bl	80084ae <USBD_LL_DevDisconnected>
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d13c      	bne.n	800c2a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c228:	4a20      	ldr	r2, [pc, #128]	; (800c2ac <USBD_LL_Init+0x94>)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a1e      	ldr	r2, [pc, #120]	; (800c2ac <USBD_LL_Init+0x94>)
 800c234:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c238:	4b1c      	ldr	r3, [pc, #112]	; (800c2ac <USBD_LL_Init+0x94>)
 800c23a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c23e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c240:	4b1a      	ldr	r3, [pc, #104]	; (800c2ac <USBD_LL_Init+0x94>)
 800c242:	2204      	movs	r2, #4
 800c244:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c246:	4b19      	ldr	r3, [pc, #100]	; (800c2ac <USBD_LL_Init+0x94>)
 800c248:	2202      	movs	r2, #2
 800c24a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c24c:	4b17      	ldr	r3, [pc, #92]	; (800c2ac <USBD_LL_Init+0x94>)
 800c24e:	2200      	movs	r2, #0
 800c250:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c252:	4b16      	ldr	r3, [pc, #88]	; (800c2ac <USBD_LL_Init+0x94>)
 800c254:	2202      	movs	r2, #2
 800c256:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c258:	4b14      	ldr	r3, [pc, #80]	; (800c2ac <USBD_LL_Init+0x94>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c25e:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <USBD_LL_Init+0x94>)
 800c260:	2200      	movs	r2, #0
 800c262:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c264:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <USBD_LL_Init+0x94>)
 800c266:	2200      	movs	r2, #0
 800c268:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c26a:	4b10      	ldr	r3, [pc, #64]	; (800c2ac <USBD_LL_Init+0x94>)
 800c26c:	2201      	movs	r2, #1
 800c26e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c270:	4b0e      	ldr	r3, [pc, #56]	; (800c2ac <USBD_LL_Init+0x94>)
 800c272:	2200      	movs	r2, #0
 800c274:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c276:	480d      	ldr	r0, [pc, #52]	; (800c2ac <USBD_LL_Init+0x94>)
 800c278:	f7f7 fce4 	bl	8003c44 <HAL_PCD_Init>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c282:	f7f5 fa89 	bl	8001798 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c286:	2180      	movs	r1, #128	; 0x80
 800c288:	4808      	ldr	r0, [pc, #32]	; (800c2ac <USBD_LL_Init+0x94>)
 800c28a:	f7f8 fe42 	bl	8004f12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c28e:	2240      	movs	r2, #64	; 0x40
 800c290:	2100      	movs	r1, #0
 800c292:	4806      	ldr	r0, [pc, #24]	; (800c2ac <USBD_LL_Init+0x94>)
 800c294:	f7f8 fdf6 	bl	8004e84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c298:	2280      	movs	r2, #128	; 0x80
 800c29a:	2101      	movs	r1, #1
 800c29c:	4803      	ldr	r0, [pc, #12]	; (800c2ac <USBD_LL_Init+0x94>)
 800c29e:	f7f8 fdf1 	bl	8004e84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20006544 	.word	0x20006544

0800c2b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7f7 fdd9 	bl	8003e7e <HAL_PCD_Start>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 f92a 	bl	800c52c <USBD_Get_USB_Status>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	70fb      	strb	r3, [r7, #3]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	70bb      	strb	r3, [r7, #2]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c304:	2300      	movs	r3, #0
 800c306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c30e:	78bb      	ldrb	r3, [r7, #2]
 800c310:	883a      	ldrh	r2, [r7, #0]
 800c312:	78f9      	ldrb	r1, [r7, #3]
 800c314:	f7f8 f9bd 	bl	8004692 <HAL_PCD_EP_Open>
 800c318:	4603      	mov	r3, r0
 800c31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 f904 	bl	800c52c <USBD_Get_USB_Status>
 800c324:	4603      	mov	r3, r0
 800c326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c328:	7bbb      	ldrb	r3, [r7, #14]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	460b      	mov	r3, r1
 800c33c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c34c:	78fa      	ldrb	r2, [r7, #3]
 800c34e:	4611      	mov	r1, r2
 800c350:	4618      	mov	r0, r3
 800c352:	f7f8 fa06 	bl	8004762 <HAL_PCD_EP_Close>
 800c356:	4603      	mov	r3, r0
 800c358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 f8e5 	bl	800c52c <USBD_Get_USB_Status>
 800c362:	4603      	mov	r3, r0
 800c364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c366:	7bbb      	ldrb	r3, [r7, #14]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	460b      	mov	r3, r1
 800c37a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c38a:	78fa      	ldrb	r2, [r7, #3]
 800c38c:	4611      	mov	r1, r2
 800c38e:	4618      	mov	r0, r3
 800c390:	f7f8 fade 	bl	8004950 <HAL_PCD_EP_SetStall>
 800c394:	4603      	mov	r3, r0
 800c396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c398:	7bfb      	ldrb	r3, [r7, #15]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f8c6 	bl	800c52c <USBD_Get_USB_Status>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3c8:	78fa      	ldrb	r2, [r7, #3]
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7f8 fb23 	bl	8004a18 <HAL_PCD_EP_ClrStall>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f8a7 	bl	800c52c <USBD_Get_USB_Status>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c404:	2b00      	cmp	r3, #0
 800c406:	da0b      	bge.n	800c420 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c40e:	68f9      	ldr	r1, [r7, #12]
 800c410:	4613      	mov	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	1a9b      	subs	r3, r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	440b      	add	r3, r1
 800c41a:	333e      	adds	r3, #62	; 0x3e
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	e00b      	b.n	800c438 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c420:	78fb      	ldrb	r3, [r7, #3]
 800c422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c426:	68f9      	ldr	r1, [r7, #12]
 800c428:	4613      	mov	r3, r2
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	1a9b      	subs	r3, r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	440b      	add	r3, r1
 800c432:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c436:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	460b      	mov	r3, r1
 800c44e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c45e:	78fa      	ldrb	r2, [r7, #3]
 800c460:	4611      	mov	r1, r2
 800c462:	4618      	mov	r0, r3
 800c464:	f7f8 f8f0 	bl	8004648 <HAL_PCD_SetAddress>
 800c468:	4603      	mov	r3, r0
 800c46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 f85c 	bl	800c52c <USBD_Get_USB_Status>
 800c474:	4603      	mov	r3, r0
 800c476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c478:	7bbb      	ldrb	r3, [r7, #14]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b086      	sub	sp, #24
 800c486:	af00      	add	r7, sp, #0
 800c488:	60f8      	str	r0, [r7, #12]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
 800c48e:	460b      	mov	r3, r1
 800c490:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c4a0:	7af9      	ldrb	r1, [r7, #11]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	f7f8 fa09 	bl	80048bc <HAL_PCD_EP_Transmit>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 f83b 	bl	800c52c <USBD_Get_USB_Status>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3718      	adds	r7, #24
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	607a      	str	r2, [r7, #4]
 800c4ce:	603b      	str	r3, [r7, #0]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c4e2:	7af9      	ldrb	r1, [r7, #11]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	f7f8 f985 	bl	80047f6 <HAL_PCD_EP_Receive>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f81a 	bl	800c52c <USBD_Get_USB_Status>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	460b      	mov	r3, r1
 800c510:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c518:	78fa      	ldrb	r2, [r7, #3]
 800c51a:	4611      	mov	r1, r2
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f8 f9b5 	bl	800488c <HAL_PCD_EP_GetRxCount>
 800c522:	4603      	mov	r3, r0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d817      	bhi.n	800c570 <USBD_Get_USB_Status+0x44>
 800c540:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <USBD_Get_USB_Status+0x1c>)
 800c542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c546:	bf00      	nop
 800c548:	0800c559 	.word	0x0800c559
 800c54c:	0800c55f 	.word	0x0800c55f
 800c550:	0800c565 	.word	0x0800c565
 800c554:	0800c56b 	.word	0x0800c56b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]
    break;
 800c55c:	e00b      	b.n	800c576 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c55e:	2303      	movs	r3, #3
 800c560:	73fb      	strb	r3, [r7, #15]
    break;
 800c562:	e008      	b.n	800c576 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c564:	2301      	movs	r3, #1
 800c566:	73fb      	strb	r3, [r7, #15]
    break;
 800c568:	e005      	b.n	800c576 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c56a:	2303      	movs	r3, #3
 800c56c:	73fb      	strb	r3, [r7, #15]
    break;
 800c56e:	e002      	b.n	800c576 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c570:	2303      	movs	r3, #3
 800c572:	73fb      	strb	r3, [r7, #15]
    break;
 800c574:	bf00      	nop
  }
  return usb_status;
 800c576:	7bfb      	ldrb	r3, [r7, #15]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <__errno>:
 800c584:	4b01      	ldr	r3, [pc, #4]	; (800c58c <__errno+0x8>)
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20000184 	.word	0x20000184

0800c590 <__libc_init_array>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	4e0d      	ldr	r6, [pc, #52]	; (800c5c8 <__libc_init_array+0x38>)
 800c594:	4c0d      	ldr	r4, [pc, #52]	; (800c5cc <__libc_init_array+0x3c>)
 800c596:	1ba4      	subs	r4, r4, r6
 800c598:	10a4      	asrs	r4, r4, #2
 800c59a:	2500      	movs	r5, #0
 800c59c:	42a5      	cmp	r5, r4
 800c59e:	d109      	bne.n	800c5b4 <__libc_init_array+0x24>
 800c5a0:	4e0b      	ldr	r6, [pc, #44]	; (800c5d0 <__libc_init_array+0x40>)
 800c5a2:	4c0c      	ldr	r4, [pc, #48]	; (800c5d4 <__libc_init_array+0x44>)
 800c5a4:	f002 f866 	bl	800e674 <_init>
 800c5a8:	1ba4      	subs	r4, r4, r6
 800c5aa:	10a4      	asrs	r4, r4, #2
 800c5ac:	2500      	movs	r5, #0
 800c5ae:	42a5      	cmp	r5, r4
 800c5b0:	d105      	bne.n	800c5be <__libc_init_array+0x2e>
 800c5b2:	bd70      	pop	{r4, r5, r6, pc}
 800c5b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c5b8:	4798      	blx	r3
 800c5ba:	3501      	adds	r5, #1
 800c5bc:	e7ee      	b.n	800c59c <__libc_init_array+0xc>
 800c5be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c5c2:	4798      	blx	r3
 800c5c4:	3501      	adds	r5, #1
 800c5c6:	e7f2      	b.n	800c5ae <__libc_init_array+0x1e>
 800c5c8:	0800ea18 	.word	0x0800ea18
 800c5cc:	0800ea18 	.word	0x0800ea18
 800c5d0:	0800ea18 	.word	0x0800ea18
 800c5d4:	0800ea1c 	.word	0x0800ea1c

0800c5d8 <malloc>:
 800c5d8:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <malloc+0xc>)
 800c5da:	4601      	mov	r1, r0
 800c5dc:	6818      	ldr	r0, [r3, #0]
 800c5de:	f000 b86d 	b.w	800c6bc <_malloc_r>
 800c5e2:	bf00      	nop
 800c5e4:	20000184 	.word	0x20000184

0800c5e8 <free>:
 800c5e8:	4b02      	ldr	r3, [pc, #8]	; (800c5f4 <free+0xc>)
 800c5ea:	4601      	mov	r1, r0
 800c5ec:	6818      	ldr	r0, [r3, #0]
 800c5ee:	f000 b817 	b.w	800c620 <_free_r>
 800c5f2:	bf00      	nop
 800c5f4:	20000184 	.word	0x20000184

0800c5f8 <memcpy>:
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	1e43      	subs	r3, r0, #1
 800c5fc:	440a      	add	r2, r1
 800c5fe:	4291      	cmp	r1, r2
 800c600:	d100      	bne.n	800c604 <memcpy+0xc>
 800c602:	bd10      	pop	{r4, pc}
 800c604:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c608:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c60c:	e7f7      	b.n	800c5fe <memcpy+0x6>

0800c60e <memset>:
 800c60e:	4402      	add	r2, r0
 800c610:	4603      	mov	r3, r0
 800c612:	4293      	cmp	r3, r2
 800c614:	d100      	bne.n	800c618 <memset+0xa>
 800c616:	4770      	bx	lr
 800c618:	f803 1b01 	strb.w	r1, [r3], #1
 800c61c:	e7f9      	b.n	800c612 <memset+0x4>
	...

0800c620 <_free_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4605      	mov	r5, r0
 800c624:	2900      	cmp	r1, #0
 800c626:	d045      	beq.n	800c6b4 <_free_r+0x94>
 800c628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62c:	1f0c      	subs	r4, r1, #4
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bfb8      	it	lt
 800c632:	18e4      	addlt	r4, r4, r3
 800c634:	f001 fb7a 	bl	800dd2c <__malloc_lock>
 800c638:	4a1f      	ldr	r2, [pc, #124]	; (800c6b8 <_free_r+0x98>)
 800c63a:	6813      	ldr	r3, [r2, #0]
 800c63c:	4610      	mov	r0, r2
 800c63e:	b933      	cbnz	r3, 800c64e <_free_r+0x2e>
 800c640:	6063      	str	r3, [r4, #4]
 800c642:	6014      	str	r4, [r2, #0]
 800c644:	4628      	mov	r0, r5
 800c646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c64a:	f001 bb70 	b.w	800dd2e <__malloc_unlock>
 800c64e:	42a3      	cmp	r3, r4
 800c650:	d90c      	bls.n	800c66c <_free_r+0x4c>
 800c652:	6821      	ldr	r1, [r4, #0]
 800c654:	1862      	adds	r2, r4, r1
 800c656:	4293      	cmp	r3, r2
 800c658:	bf04      	itt	eq
 800c65a:	681a      	ldreq	r2, [r3, #0]
 800c65c:	685b      	ldreq	r3, [r3, #4]
 800c65e:	6063      	str	r3, [r4, #4]
 800c660:	bf04      	itt	eq
 800c662:	1852      	addeq	r2, r2, r1
 800c664:	6022      	streq	r2, [r4, #0]
 800c666:	6004      	str	r4, [r0, #0]
 800c668:	e7ec      	b.n	800c644 <_free_r+0x24>
 800c66a:	4613      	mov	r3, r2
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	b10a      	cbz	r2, 800c674 <_free_r+0x54>
 800c670:	42a2      	cmp	r2, r4
 800c672:	d9fa      	bls.n	800c66a <_free_r+0x4a>
 800c674:	6819      	ldr	r1, [r3, #0]
 800c676:	1858      	adds	r0, r3, r1
 800c678:	42a0      	cmp	r0, r4
 800c67a:	d10b      	bne.n	800c694 <_free_r+0x74>
 800c67c:	6820      	ldr	r0, [r4, #0]
 800c67e:	4401      	add	r1, r0
 800c680:	1858      	adds	r0, r3, r1
 800c682:	4282      	cmp	r2, r0
 800c684:	6019      	str	r1, [r3, #0]
 800c686:	d1dd      	bne.n	800c644 <_free_r+0x24>
 800c688:	6810      	ldr	r0, [r2, #0]
 800c68a:	6852      	ldr	r2, [r2, #4]
 800c68c:	605a      	str	r2, [r3, #4]
 800c68e:	4401      	add	r1, r0
 800c690:	6019      	str	r1, [r3, #0]
 800c692:	e7d7      	b.n	800c644 <_free_r+0x24>
 800c694:	d902      	bls.n	800c69c <_free_r+0x7c>
 800c696:	230c      	movs	r3, #12
 800c698:	602b      	str	r3, [r5, #0]
 800c69a:	e7d3      	b.n	800c644 <_free_r+0x24>
 800c69c:	6820      	ldr	r0, [r4, #0]
 800c69e:	1821      	adds	r1, r4, r0
 800c6a0:	428a      	cmp	r2, r1
 800c6a2:	bf04      	itt	eq
 800c6a4:	6811      	ldreq	r1, [r2, #0]
 800c6a6:	6852      	ldreq	r2, [r2, #4]
 800c6a8:	6062      	str	r2, [r4, #4]
 800c6aa:	bf04      	itt	eq
 800c6ac:	1809      	addeq	r1, r1, r0
 800c6ae:	6021      	streq	r1, [r4, #0]
 800c6b0:	605c      	str	r4, [r3, #4]
 800c6b2:	e7c7      	b.n	800c644 <_free_r+0x24>
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20004c88 	.word	0x20004c88

0800c6bc <_malloc_r>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	1ccd      	adds	r5, r1, #3
 800c6c0:	f025 0503 	bic.w	r5, r5, #3
 800c6c4:	3508      	adds	r5, #8
 800c6c6:	2d0c      	cmp	r5, #12
 800c6c8:	bf38      	it	cc
 800c6ca:	250c      	movcc	r5, #12
 800c6cc:	2d00      	cmp	r5, #0
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	db01      	blt.n	800c6d6 <_malloc_r+0x1a>
 800c6d2:	42a9      	cmp	r1, r5
 800c6d4:	d903      	bls.n	800c6de <_malloc_r+0x22>
 800c6d6:	230c      	movs	r3, #12
 800c6d8:	6033      	str	r3, [r6, #0]
 800c6da:	2000      	movs	r0, #0
 800c6dc:	bd70      	pop	{r4, r5, r6, pc}
 800c6de:	f001 fb25 	bl	800dd2c <__malloc_lock>
 800c6e2:	4a21      	ldr	r2, [pc, #132]	; (800c768 <_malloc_r+0xac>)
 800c6e4:	6814      	ldr	r4, [r2, #0]
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	b991      	cbnz	r1, 800c710 <_malloc_r+0x54>
 800c6ea:	4c20      	ldr	r4, [pc, #128]	; (800c76c <_malloc_r+0xb0>)
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	b91b      	cbnz	r3, 800c6f8 <_malloc_r+0x3c>
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f000 fc99 	bl	800d028 <_sbrk_r>
 800c6f6:	6020      	str	r0, [r4, #0]
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f000 fc94 	bl	800d028 <_sbrk_r>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d124      	bne.n	800c74e <_malloc_r+0x92>
 800c704:	230c      	movs	r3, #12
 800c706:	6033      	str	r3, [r6, #0]
 800c708:	4630      	mov	r0, r6
 800c70a:	f001 fb10 	bl	800dd2e <__malloc_unlock>
 800c70e:	e7e4      	b.n	800c6da <_malloc_r+0x1e>
 800c710:	680b      	ldr	r3, [r1, #0]
 800c712:	1b5b      	subs	r3, r3, r5
 800c714:	d418      	bmi.n	800c748 <_malloc_r+0x8c>
 800c716:	2b0b      	cmp	r3, #11
 800c718:	d90f      	bls.n	800c73a <_malloc_r+0x7e>
 800c71a:	600b      	str	r3, [r1, #0]
 800c71c:	50cd      	str	r5, [r1, r3]
 800c71e:	18cc      	adds	r4, r1, r3
 800c720:	4630      	mov	r0, r6
 800c722:	f001 fb04 	bl	800dd2e <__malloc_unlock>
 800c726:	f104 000b 	add.w	r0, r4, #11
 800c72a:	1d23      	adds	r3, r4, #4
 800c72c:	f020 0007 	bic.w	r0, r0, #7
 800c730:	1ac3      	subs	r3, r0, r3
 800c732:	d0d3      	beq.n	800c6dc <_malloc_r+0x20>
 800c734:	425a      	negs	r2, r3
 800c736:	50e2      	str	r2, [r4, r3]
 800c738:	e7d0      	b.n	800c6dc <_malloc_r+0x20>
 800c73a:	428c      	cmp	r4, r1
 800c73c:	684b      	ldr	r3, [r1, #4]
 800c73e:	bf16      	itet	ne
 800c740:	6063      	strne	r3, [r4, #4]
 800c742:	6013      	streq	r3, [r2, #0]
 800c744:	460c      	movne	r4, r1
 800c746:	e7eb      	b.n	800c720 <_malloc_r+0x64>
 800c748:	460c      	mov	r4, r1
 800c74a:	6849      	ldr	r1, [r1, #4]
 800c74c:	e7cc      	b.n	800c6e8 <_malloc_r+0x2c>
 800c74e:	1cc4      	adds	r4, r0, #3
 800c750:	f024 0403 	bic.w	r4, r4, #3
 800c754:	42a0      	cmp	r0, r4
 800c756:	d005      	beq.n	800c764 <_malloc_r+0xa8>
 800c758:	1a21      	subs	r1, r4, r0
 800c75a:	4630      	mov	r0, r6
 800c75c:	f000 fc64 	bl	800d028 <_sbrk_r>
 800c760:	3001      	adds	r0, #1
 800c762:	d0cf      	beq.n	800c704 <_malloc_r+0x48>
 800c764:	6025      	str	r5, [r4, #0]
 800c766:	e7db      	b.n	800c720 <_malloc_r+0x64>
 800c768:	20004c88 	.word	0x20004c88
 800c76c:	20004c8c 	.word	0x20004c8c

0800c770 <__cvt>:
 800c770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c774:	ec55 4b10 	vmov	r4, r5, d0
 800c778:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c77a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c77e:	2d00      	cmp	r5, #0
 800c780:	460e      	mov	r6, r1
 800c782:	4691      	mov	r9, r2
 800c784:	4619      	mov	r1, r3
 800c786:	bfb8      	it	lt
 800c788:	4622      	movlt	r2, r4
 800c78a:	462b      	mov	r3, r5
 800c78c:	f027 0720 	bic.w	r7, r7, #32
 800c790:	bfbb      	ittet	lt
 800c792:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c796:	461d      	movlt	r5, r3
 800c798:	2300      	movge	r3, #0
 800c79a:	232d      	movlt	r3, #45	; 0x2d
 800c79c:	bfb8      	it	lt
 800c79e:	4614      	movlt	r4, r2
 800c7a0:	2f46      	cmp	r7, #70	; 0x46
 800c7a2:	700b      	strb	r3, [r1, #0]
 800c7a4:	d004      	beq.n	800c7b0 <__cvt+0x40>
 800c7a6:	2f45      	cmp	r7, #69	; 0x45
 800c7a8:	d100      	bne.n	800c7ac <__cvt+0x3c>
 800c7aa:	3601      	adds	r6, #1
 800c7ac:	2102      	movs	r1, #2
 800c7ae:	e000      	b.n	800c7b2 <__cvt+0x42>
 800c7b0:	2103      	movs	r1, #3
 800c7b2:	ab03      	add	r3, sp, #12
 800c7b4:	9301      	str	r3, [sp, #4]
 800c7b6:	ab02      	add	r3, sp, #8
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	4632      	mov	r2, r6
 800c7bc:	4653      	mov	r3, sl
 800c7be:	ec45 4b10 	vmov	d0, r4, r5
 800c7c2:	f000 fced 	bl	800d1a0 <_dtoa_r>
 800c7c6:	2f47      	cmp	r7, #71	; 0x47
 800c7c8:	4680      	mov	r8, r0
 800c7ca:	d102      	bne.n	800c7d2 <__cvt+0x62>
 800c7cc:	f019 0f01 	tst.w	r9, #1
 800c7d0:	d026      	beq.n	800c820 <__cvt+0xb0>
 800c7d2:	2f46      	cmp	r7, #70	; 0x46
 800c7d4:	eb08 0906 	add.w	r9, r8, r6
 800c7d8:	d111      	bne.n	800c7fe <__cvt+0x8e>
 800c7da:	f898 3000 	ldrb.w	r3, [r8]
 800c7de:	2b30      	cmp	r3, #48	; 0x30
 800c7e0:	d10a      	bne.n	800c7f8 <__cvt+0x88>
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	f7f4 f975 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7ee:	b918      	cbnz	r0, 800c7f8 <__cvt+0x88>
 800c7f0:	f1c6 0601 	rsb	r6, r6, #1
 800c7f4:	f8ca 6000 	str.w	r6, [sl]
 800c7f8:	f8da 3000 	ldr.w	r3, [sl]
 800c7fc:	4499      	add	r9, r3
 800c7fe:	2200      	movs	r2, #0
 800c800:	2300      	movs	r3, #0
 800c802:	4620      	mov	r0, r4
 800c804:	4629      	mov	r1, r5
 800c806:	f7f4 f967 	bl	8000ad8 <__aeabi_dcmpeq>
 800c80a:	b938      	cbnz	r0, 800c81c <__cvt+0xac>
 800c80c:	2230      	movs	r2, #48	; 0x30
 800c80e:	9b03      	ldr	r3, [sp, #12]
 800c810:	454b      	cmp	r3, r9
 800c812:	d205      	bcs.n	800c820 <__cvt+0xb0>
 800c814:	1c59      	adds	r1, r3, #1
 800c816:	9103      	str	r1, [sp, #12]
 800c818:	701a      	strb	r2, [r3, #0]
 800c81a:	e7f8      	b.n	800c80e <__cvt+0x9e>
 800c81c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c820:	9b03      	ldr	r3, [sp, #12]
 800c822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c824:	eba3 0308 	sub.w	r3, r3, r8
 800c828:	4640      	mov	r0, r8
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	b004      	add	sp, #16
 800c82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c832 <__exponent>:
 800c832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c834:	2900      	cmp	r1, #0
 800c836:	4604      	mov	r4, r0
 800c838:	bfba      	itte	lt
 800c83a:	4249      	neglt	r1, r1
 800c83c:	232d      	movlt	r3, #45	; 0x2d
 800c83e:	232b      	movge	r3, #43	; 0x2b
 800c840:	2909      	cmp	r1, #9
 800c842:	f804 2b02 	strb.w	r2, [r4], #2
 800c846:	7043      	strb	r3, [r0, #1]
 800c848:	dd20      	ble.n	800c88c <__exponent+0x5a>
 800c84a:	f10d 0307 	add.w	r3, sp, #7
 800c84e:	461f      	mov	r7, r3
 800c850:	260a      	movs	r6, #10
 800c852:	fb91 f5f6 	sdiv	r5, r1, r6
 800c856:	fb06 1115 	mls	r1, r6, r5, r1
 800c85a:	3130      	adds	r1, #48	; 0x30
 800c85c:	2d09      	cmp	r5, #9
 800c85e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c862:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c866:	4629      	mov	r1, r5
 800c868:	dc09      	bgt.n	800c87e <__exponent+0x4c>
 800c86a:	3130      	adds	r1, #48	; 0x30
 800c86c:	3b02      	subs	r3, #2
 800c86e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c872:	42bb      	cmp	r3, r7
 800c874:	4622      	mov	r2, r4
 800c876:	d304      	bcc.n	800c882 <__exponent+0x50>
 800c878:	1a10      	subs	r0, r2, r0
 800c87a:	b003      	add	sp, #12
 800c87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c87e:	4613      	mov	r3, r2
 800c880:	e7e7      	b.n	800c852 <__exponent+0x20>
 800c882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c886:	f804 2b01 	strb.w	r2, [r4], #1
 800c88a:	e7f2      	b.n	800c872 <__exponent+0x40>
 800c88c:	2330      	movs	r3, #48	; 0x30
 800c88e:	4419      	add	r1, r3
 800c890:	7083      	strb	r3, [r0, #2]
 800c892:	1d02      	adds	r2, r0, #4
 800c894:	70c1      	strb	r1, [r0, #3]
 800c896:	e7ef      	b.n	800c878 <__exponent+0x46>

0800c898 <_printf_float>:
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	b08d      	sub	sp, #52	; 0x34
 800c89e:	460c      	mov	r4, r1
 800c8a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c8a4:	4616      	mov	r6, r2
 800c8a6:	461f      	mov	r7, r3
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	f001 fa31 	bl	800dd10 <_localeconv_r>
 800c8ae:	6803      	ldr	r3, [r0, #0]
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7f3 fc94 	bl	80001e0 <strlen>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	930a      	str	r3, [sp, #40]	; 0x28
 800c8bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c8c0:	9005      	str	r0, [sp, #20]
 800c8c2:	3307      	adds	r3, #7
 800c8c4:	f023 0307 	bic.w	r3, r3, #7
 800c8c8:	f103 0208 	add.w	r2, r3, #8
 800c8cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c8d0:	f8d4 b000 	ldr.w	fp, [r4]
 800c8d4:	f8c8 2000 	str.w	r2, [r8]
 800c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8e0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8e8:	9307      	str	r3, [sp, #28]
 800c8ea:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8f2:	4ba7      	ldr	r3, [pc, #668]	; (800cb90 <_printf_float+0x2f8>)
 800c8f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8f8:	f7f4 f920 	bl	8000b3c <__aeabi_dcmpun>
 800c8fc:	bb70      	cbnz	r0, 800c95c <_printf_float+0xc4>
 800c8fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c902:	4ba3      	ldr	r3, [pc, #652]	; (800cb90 <_printf_float+0x2f8>)
 800c904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c908:	f7f4 f8fa 	bl	8000b00 <__aeabi_dcmple>
 800c90c:	bb30      	cbnz	r0, 800c95c <_printf_float+0xc4>
 800c90e:	2200      	movs	r2, #0
 800c910:	2300      	movs	r3, #0
 800c912:	4640      	mov	r0, r8
 800c914:	4649      	mov	r1, r9
 800c916:	f7f4 f8e9 	bl	8000aec <__aeabi_dcmplt>
 800c91a:	b110      	cbz	r0, 800c922 <_printf_float+0x8a>
 800c91c:	232d      	movs	r3, #45	; 0x2d
 800c91e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c922:	4a9c      	ldr	r2, [pc, #624]	; (800cb94 <_printf_float+0x2fc>)
 800c924:	4b9c      	ldr	r3, [pc, #624]	; (800cb98 <_printf_float+0x300>)
 800c926:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c92a:	bf8c      	ite	hi
 800c92c:	4690      	movhi	r8, r2
 800c92e:	4698      	movls	r8, r3
 800c930:	2303      	movs	r3, #3
 800c932:	f02b 0204 	bic.w	r2, fp, #4
 800c936:	6123      	str	r3, [r4, #16]
 800c938:	6022      	str	r2, [r4, #0]
 800c93a:	f04f 0900 	mov.w	r9, #0
 800c93e:	9700      	str	r7, [sp, #0]
 800c940:	4633      	mov	r3, r6
 800c942:	aa0b      	add	r2, sp, #44	; 0x2c
 800c944:	4621      	mov	r1, r4
 800c946:	4628      	mov	r0, r5
 800c948:	f000 f9e6 	bl	800cd18 <_printf_common>
 800c94c:	3001      	adds	r0, #1
 800c94e:	f040 808d 	bne.w	800ca6c <_printf_float+0x1d4>
 800c952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c956:	b00d      	add	sp, #52	; 0x34
 800c958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95c:	4642      	mov	r2, r8
 800c95e:	464b      	mov	r3, r9
 800c960:	4640      	mov	r0, r8
 800c962:	4649      	mov	r1, r9
 800c964:	f7f4 f8ea 	bl	8000b3c <__aeabi_dcmpun>
 800c968:	b110      	cbz	r0, 800c970 <_printf_float+0xd8>
 800c96a:	4a8c      	ldr	r2, [pc, #560]	; (800cb9c <_printf_float+0x304>)
 800c96c:	4b8c      	ldr	r3, [pc, #560]	; (800cba0 <_printf_float+0x308>)
 800c96e:	e7da      	b.n	800c926 <_printf_float+0x8e>
 800c970:	6861      	ldr	r1, [r4, #4]
 800c972:	1c4b      	adds	r3, r1, #1
 800c974:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c978:	a80a      	add	r0, sp, #40	; 0x28
 800c97a:	d13e      	bne.n	800c9fa <_printf_float+0x162>
 800c97c:	2306      	movs	r3, #6
 800c97e:	6063      	str	r3, [r4, #4]
 800c980:	2300      	movs	r3, #0
 800c982:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c986:	ab09      	add	r3, sp, #36	; 0x24
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	ec49 8b10 	vmov	d0, r8, r9
 800c98e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c992:	6022      	str	r2, [r4, #0]
 800c994:	f8cd a004 	str.w	sl, [sp, #4]
 800c998:	6861      	ldr	r1, [r4, #4]
 800c99a:	4628      	mov	r0, r5
 800c99c:	f7ff fee8 	bl	800c770 <__cvt>
 800c9a0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c9a4:	2b47      	cmp	r3, #71	; 0x47
 800c9a6:	4680      	mov	r8, r0
 800c9a8:	d109      	bne.n	800c9be <_printf_float+0x126>
 800c9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ac:	1cd8      	adds	r0, r3, #3
 800c9ae:	db02      	blt.n	800c9b6 <_printf_float+0x11e>
 800c9b0:	6862      	ldr	r2, [r4, #4]
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	dd47      	ble.n	800ca46 <_printf_float+0x1ae>
 800c9b6:	f1aa 0a02 	sub.w	sl, sl, #2
 800c9ba:	fa5f fa8a 	uxtb.w	sl, sl
 800c9be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c9c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9c4:	d824      	bhi.n	800ca10 <_printf_float+0x178>
 800c9c6:	3901      	subs	r1, #1
 800c9c8:	4652      	mov	r2, sl
 800c9ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9ce:	9109      	str	r1, [sp, #36]	; 0x24
 800c9d0:	f7ff ff2f 	bl	800c832 <__exponent>
 800c9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9d6:	1813      	adds	r3, r2, r0
 800c9d8:	2a01      	cmp	r2, #1
 800c9da:	4681      	mov	r9, r0
 800c9dc:	6123      	str	r3, [r4, #16]
 800c9de:	dc02      	bgt.n	800c9e6 <_printf_float+0x14e>
 800c9e0:	6822      	ldr	r2, [r4, #0]
 800c9e2:	07d1      	lsls	r1, r2, #31
 800c9e4:	d501      	bpl.n	800c9ea <_printf_float+0x152>
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	6123      	str	r3, [r4, #16]
 800c9ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d0a5      	beq.n	800c93e <_printf_float+0xa6>
 800c9f2:	232d      	movs	r3, #45	; 0x2d
 800c9f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9f8:	e7a1      	b.n	800c93e <_printf_float+0xa6>
 800c9fa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c9fe:	f000 8177 	beq.w	800ccf0 <_printf_float+0x458>
 800ca02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ca06:	d1bb      	bne.n	800c980 <_printf_float+0xe8>
 800ca08:	2900      	cmp	r1, #0
 800ca0a:	d1b9      	bne.n	800c980 <_printf_float+0xe8>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e7b6      	b.n	800c97e <_printf_float+0xe6>
 800ca10:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ca14:	d119      	bne.n	800ca4a <_printf_float+0x1b2>
 800ca16:	2900      	cmp	r1, #0
 800ca18:	6863      	ldr	r3, [r4, #4]
 800ca1a:	dd0c      	ble.n	800ca36 <_printf_float+0x19e>
 800ca1c:	6121      	str	r1, [r4, #16]
 800ca1e:	b913      	cbnz	r3, 800ca26 <_printf_float+0x18e>
 800ca20:	6822      	ldr	r2, [r4, #0]
 800ca22:	07d2      	lsls	r2, r2, #31
 800ca24:	d502      	bpl.n	800ca2c <_printf_float+0x194>
 800ca26:	3301      	adds	r3, #1
 800ca28:	440b      	add	r3, r1
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca2e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ca30:	f04f 0900 	mov.w	r9, #0
 800ca34:	e7d9      	b.n	800c9ea <_printf_float+0x152>
 800ca36:	b913      	cbnz	r3, 800ca3e <_printf_float+0x1a6>
 800ca38:	6822      	ldr	r2, [r4, #0]
 800ca3a:	07d0      	lsls	r0, r2, #31
 800ca3c:	d501      	bpl.n	800ca42 <_printf_float+0x1aa>
 800ca3e:	3302      	adds	r3, #2
 800ca40:	e7f3      	b.n	800ca2a <_printf_float+0x192>
 800ca42:	2301      	movs	r3, #1
 800ca44:	e7f1      	b.n	800ca2a <_printf_float+0x192>
 800ca46:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ca4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	db05      	blt.n	800ca5e <_printf_float+0x1c6>
 800ca52:	6822      	ldr	r2, [r4, #0]
 800ca54:	6123      	str	r3, [r4, #16]
 800ca56:	07d1      	lsls	r1, r2, #31
 800ca58:	d5e8      	bpl.n	800ca2c <_printf_float+0x194>
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	e7e5      	b.n	800ca2a <_printf_float+0x192>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	bfd4      	ite	le
 800ca62:	f1c3 0302 	rsble	r3, r3, #2
 800ca66:	2301      	movgt	r3, #1
 800ca68:	4413      	add	r3, r2
 800ca6a:	e7de      	b.n	800ca2a <_printf_float+0x192>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	055a      	lsls	r2, r3, #21
 800ca70:	d407      	bmi.n	800ca82 <_printf_float+0x1ea>
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	4642      	mov	r2, r8
 800ca76:	4631      	mov	r1, r6
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b8      	blx	r7
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d12b      	bne.n	800cad8 <_printf_float+0x240>
 800ca80:	e767      	b.n	800c952 <_printf_float+0xba>
 800ca82:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ca86:	f240 80dc 	bls.w	800cc42 <_printf_float+0x3aa>
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca92:	f7f4 f821 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d033      	beq.n	800cb02 <_printf_float+0x26a>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	4a41      	ldr	r2, [pc, #260]	; (800cba4 <_printf_float+0x30c>)
 800ca9e:	4631      	mov	r1, r6
 800caa0:	4628      	mov	r0, r5
 800caa2:	47b8      	blx	r7
 800caa4:	3001      	adds	r0, #1
 800caa6:	f43f af54 	beq.w	800c952 <_printf_float+0xba>
 800caaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800caae:	429a      	cmp	r2, r3
 800cab0:	db02      	blt.n	800cab8 <_printf_float+0x220>
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	07d8      	lsls	r0, r3, #31
 800cab6:	d50f      	bpl.n	800cad8 <_printf_float+0x240>
 800cab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cabc:	4631      	mov	r1, r6
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b8      	blx	r7
 800cac2:	3001      	adds	r0, #1
 800cac4:	f43f af45 	beq.w	800c952 <_printf_float+0xba>
 800cac8:	f04f 0800 	mov.w	r8, #0
 800cacc:	f104 091a 	add.w	r9, r4, #26
 800cad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cad2:	3b01      	subs	r3, #1
 800cad4:	4543      	cmp	r3, r8
 800cad6:	dc09      	bgt.n	800caec <_printf_float+0x254>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	079b      	lsls	r3, r3, #30
 800cadc:	f100 8103 	bmi.w	800cce6 <_printf_float+0x44e>
 800cae0:	68e0      	ldr	r0, [r4, #12]
 800cae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cae4:	4298      	cmp	r0, r3
 800cae6:	bfb8      	it	lt
 800cae8:	4618      	movlt	r0, r3
 800caea:	e734      	b.n	800c956 <_printf_float+0xbe>
 800caec:	2301      	movs	r3, #1
 800caee:	464a      	mov	r2, r9
 800caf0:	4631      	mov	r1, r6
 800caf2:	4628      	mov	r0, r5
 800caf4:	47b8      	blx	r7
 800caf6:	3001      	adds	r0, #1
 800caf8:	f43f af2b 	beq.w	800c952 <_printf_float+0xba>
 800cafc:	f108 0801 	add.w	r8, r8, #1
 800cb00:	e7e6      	b.n	800cad0 <_printf_float+0x238>
 800cb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	dc2b      	bgt.n	800cb60 <_printf_float+0x2c8>
 800cb08:	2301      	movs	r3, #1
 800cb0a:	4a26      	ldr	r2, [pc, #152]	; (800cba4 <_printf_float+0x30c>)
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4628      	mov	r0, r5
 800cb10:	47b8      	blx	r7
 800cb12:	3001      	adds	r0, #1
 800cb14:	f43f af1d 	beq.w	800c952 <_printf_float+0xba>
 800cb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1a:	b923      	cbnz	r3, 800cb26 <_printf_float+0x28e>
 800cb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb1e:	b913      	cbnz	r3, 800cb26 <_printf_float+0x28e>
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	07d9      	lsls	r1, r3, #31
 800cb24:	d5d8      	bpl.n	800cad8 <_printf_float+0x240>
 800cb26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	47b8      	blx	r7
 800cb30:	3001      	adds	r0, #1
 800cb32:	f43f af0e 	beq.w	800c952 <_printf_float+0xba>
 800cb36:	f04f 0900 	mov.w	r9, #0
 800cb3a:	f104 0a1a 	add.w	sl, r4, #26
 800cb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb40:	425b      	negs	r3, r3
 800cb42:	454b      	cmp	r3, r9
 800cb44:	dc01      	bgt.n	800cb4a <_printf_float+0x2b2>
 800cb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb48:	e794      	b.n	800ca74 <_printf_float+0x1dc>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	4652      	mov	r2, sl
 800cb4e:	4631      	mov	r1, r6
 800cb50:	4628      	mov	r0, r5
 800cb52:	47b8      	blx	r7
 800cb54:	3001      	adds	r0, #1
 800cb56:	f43f aefc 	beq.w	800c952 <_printf_float+0xba>
 800cb5a:	f109 0901 	add.w	r9, r9, #1
 800cb5e:	e7ee      	b.n	800cb3e <_printf_float+0x2a6>
 800cb60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb64:	429a      	cmp	r2, r3
 800cb66:	bfa8      	it	ge
 800cb68:	461a      	movge	r2, r3
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	4691      	mov	r9, r2
 800cb6e:	dd07      	ble.n	800cb80 <_printf_float+0x2e8>
 800cb70:	4613      	mov	r3, r2
 800cb72:	4631      	mov	r1, r6
 800cb74:	4642      	mov	r2, r8
 800cb76:	4628      	mov	r0, r5
 800cb78:	47b8      	blx	r7
 800cb7a:	3001      	adds	r0, #1
 800cb7c:	f43f aee9 	beq.w	800c952 <_printf_float+0xba>
 800cb80:	f104 031a 	add.w	r3, r4, #26
 800cb84:	f04f 0b00 	mov.w	fp, #0
 800cb88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb8c:	9306      	str	r3, [sp, #24]
 800cb8e:	e015      	b.n	800cbbc <_printf_float+0x324>
 800cb90:	7fefffff 	.word	0x7fefffff
 800cb94:	0800e7b8 	.word	0x0800e7b8
 800cb98:	0800e7b4 	.word	0x0800e7b4
 800cb9c:	0800e7c0 	.word	0x0800e7c0
 800cba0:	0800e7bc 	.word	0x0800e7bc
 800cba4:	0800e7c4 	.word	0x0800e7c4
 800cba8:	2301      	movs	r3, #1
 800cbaa:	9a06      	ldr	r2, [sp, #24]
 800cbac:	4631      	mov	r1, r6
 800cbae:	4628      	mov	r0, r5
 800cbb0:	47b8      	blx	r7
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	f43f aecd 	beq.w	800c952 <_printf_float+0xba>
 800cbb8:	f10b 0b01 	add.w	fp, fp, #1
 800cbbc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cbc0:	ebaa 0309 	sub.w	r3, sl, r9
 800cbc4:	455b      	cmp	r3, fp
 800cbc6:	dcef      	bgt.n	800cba8 <_printf_float+0x310>
 800cbc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	44d0      	add	r8, sl
 800cbd0:	db15      	blt.n	800cbfe <_printf_float+0x366>
 800cbd2:	6823      	ldr	r3, [r4, #0]
 800cbd4:	07da      	lsls	r2, r3, #31
 800cbd6:	d412      	bmi.n	800cbfe <_printf_float+0x366>
 800cbd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbda:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbdc:	eba3 020a 	sub.w	r2, r3, sl
 800cbe0:	eba3 0a01 	sub.w	sl, r3, r1
 800cbe4:	4592      	cmp	sl, r2
 800cbe6:	bfa8      	it	ge
 800cbe8:	4692      	movge	sl, r2
 800cbea:	f1ba 0f00 	cmp.w	sl, #0
 800cbee:	dc0e      	bgt.n	800cc0e <_printf_float+0x376>
 800cbf0:	f04f 0800 	mov.w	r8, #0
 800cbf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbf8:	f104 091a 	add.w	r9, r4, #26
 800cbfc:	e019      	b.n	800cc32 <_printf_float+0x39a>
 800cbfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc02:	4631      	mov	r1, r6
 800cc04:	4628      	mov	r0, r5
 800cc06:	47b8      	blx	r7
 800cc08:	3001      	adds	r0, #1
 800cc0a:	d1e5      	bne.n	800cbd8 <_printf_float+0x340>
 800cc0c:	e6a1      	b.n	800c952 <_printf_float+0xba>
 800cc0e:	4653      	mov	r3, sl
 800cc10:	4642      	mov	r2, r8
 800cc12:	4631      	mov	r1, r6
 800cc14:	4628      	mov	r0, r5
 800cc16:	47b8      	blx	r7
 800cc18:	3001      	adds	r0, #1
 800cc1a:	d1e9      	bne.n	800cbf0 <_printf_float+0x358>
 800cc1c:	e699      	b.n	800c952 <_printf_float+0xba>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	464a      	mov	r2, r9
 800cc22:	4631      	mov	r1, r6
 800cc24:	4628      	mov	r0, r5
 800cc26:	47b8      	blx	r7
 800cc28:	3001      	adds	r0, #1
 800cc2a:	f43f ae92 	beq.w	800c952 <_printf_float+0xba>
 800cc2e:	f108 0801 	add.w	r8, r8, #1
 800cc32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc36:	1a9b      	subs	r3, r3, r2
 800cc38:	eba3 030a 	sub.w	r3, r3, sl
 800cc3c:	4543      	cmp	r3, r8
 800cc3e:	dcee      	bgt.n	800cc1e <_printf_float+0x386>
 800cc40:	e74a      	b.n	800cad8 <_printf_float+0x240>
 800cc42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc44:	2a01      	cmp	r2, #1
 800cc46:	dc01      	bgt.n	800cc4c <_printf_float+0x3b4>
 800cc48:	07db      	lsls	r3, r3, #31
 800cc4a:	d53a      	bpl.n	800ccc2 <_printf_float+0x42a>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	4642      	mov	r2, r8
 800cc50:	4631      	mov	r1, r6
 800cc52:	4628      	mov	r0, r5
 800cc54:	47b8      	blx	r7
 800cc56:	3001      	adds	r0, #1
 800cc58:	f43f ae7b 	beq.w	800c952 <_printf_float+0xba>
 800cc5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc60:	4631      	mov	r1, r6
 800cc62:	4628      	mov	r0, r5
 800cc64:	47b8      	blx	r7
 800cc66:	3001      	adds	r0, #1
 800cc68:	f108 0801 	add.w	r8, r8, #1
 800cc6c:	f43f ae71 	beq.w	800c952 <_printf_float+0xba>
 800cc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc72:	2200      	movs	r2, #0
 800cc74:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800cc78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f7f3 ff2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc82:	b9c8      	cbnz	r0, 800ccb8 <_printf_float+0x420>
 800cc84:	4653      	mov	r3, sl
 800cc86:	4642      	mov	r2, r8
 800cc88:	4631      	mov	r1, r6
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	47b8      	blx	r7
 800cc8e:	3001      	adds	r0, #1
 800cc90:	d10e      	bne.n	800ccb0 <_printf_float+0x418>
 800cc92:	e65e      	b.n	800c952 <_printf_float+0xba>
 800cc94:	2301      	movs	r3, #1
 800cc96:	4652      	mov	r2, sl
 800cc98:	4631      	mov	r1, r6
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	47b8      	blx	r7
 800cc9e:	3001      	adds	r0, #1
 800cca0:	f43f ae57 	beq.w	800c952 <_printf_float+0xba>
 800cca4:	f108 0801 	add.w	r8, r8, #1
 800cca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	4543      	cmp	r3, r8
 800ccae:	dcf1      	bgt.n	800cc94 <_printf_float+0x3fc>
 800ccb0:	464b      	mov	r3, r9
 800ccb2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ccb6:	e6de      	b.n	800ca76 <_printf_float+0x1de>
 800ccb8:	f04f 0800 	mov.w	r8, #0
 800ccbc:	f104 0a1a 	add.w	sl, r4, #26
 800ccc0:	e7f2      	b.n	800cca8 <_printf_float+0x410>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e7df      	b.n	800cc86 <_printf_float+0x3ee>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	464a      	mov	r2, r9
 800ccca:	4631      	mov	r1, r6
 800cccc:	4628      	mov	r0, r5
 800ccce:	47b8      	blx	r7
 800ccd0:	3001      	adds	r0, #1
 800ccd2:	f43f ae3e 	beq.w	800c952 <_printf_float+0xba>
 800ccd6:	f108 0801 	add.w	r8, r8, #1
 800ccda:	68e3      	ldr	r3, [r4, #12]
 800ccdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccde:	1a9b      	subs	r3, r3, r2
 800cce0:	4543      	cmp	r3, r8
 800cce2:	dcf0      	bgt.n	800ccc6 <_printf_float+0x42e>
 800cce4:	e6fc      	b.n	800cae0 <_printf_float+0x248>
 800cce6:	f04f 0800 	mov.w	r8, #0
 800ccea:	f104 0919 	add.w	r9, r4, #25
 800ccee:	e7f4      	b.n	800ccda <_printf_float+0x442>
 800ccf0:	2900      	cmp	r1, #0
 800ccf2:	f43f ae8b 	beq.w	800ca0c <_printf_float+0x174>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ccfc:	ab09      	add	r3, sp, #36	; 0x24
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	ec49 8b10 	vmov	d0, r8, r9
 800cd04:	6022      	str	r2, [r4, #0]
 800cd06:	f8cd a004 	str.w	sl, [sp, #4]
 800cd0a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f7ff fd2e 	bl	800c770 <__cvt>
 800cd14:	4680      	mov	r8, r0
 800cd16:	e648      	b.n	800c9aa <_printf_float+0x112>

0800cd18 <_printf_common>:
 800cd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd1c:	4691      	mov	r9, r2
 800cd1e:	461f      	mov	r7, r3
 800cd20:	688a      	ldr	r2, [r1, #8]
 800cd22:	690b      	ldr	r3, [r1, #16]
 800cd24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	bfb8      	it	lt
 800cd2c:	4613      	movlt	r3, r2
 800cd2e:	f8c9 3000 	str.w	r3, [r9]
 800cd32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd36:	4606      	mov	r6, r0
 800cd38:	460c      	mov	r4, r1
 800cd3a:	b112      	cbz	r2, 800cd42 <_printf_common+0x2a>
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	f8c9 3000 	str.w	r3, [r9]
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	0699      	lsls	r1, r3, #26
 800cd46:	bf42      	ittt	mi
 800cd48:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cd4c:	3302      	addmi	r3, #2
 800cd4e:	f8c9 3000 	strmi.w	r3, [r9]
 800cd52:	6825      	ldr	r5, [r4, #0]
 800cd54:	f015 0506 	ands.w	r5, r5, #6
 800cd58:	d107      	bne.n	800cd6a <_printf_common+0x52>
 800cd5a:	f104 0a19 	add.w	sl, r4, #25
 800cd5e:	68e3      	ldr	r3, [r4, #12]
 800cd60:	f8d9 2000 	ldr.w	r2, [r9]
 800cd64:	1a9b      	subs	r3, r3, r2
 800cd66:	42ab      	cmp	r3, r5
 800cd68:	dc28      	bgt.n	800cdbc <_printf_common+0xa4>
 800cd6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cd6e:	6822      	ldr	r2, [r4, #0]
 800cd70:	3300      	adds	r3, #0
 800cd72:	bf18      	it	ne
 800cd74:	2301      	movne	r3, #1
 800cd76:	0692      	lsls	r2, r2, #26
 800cd78:	d42d      	bmi.n	800cdd6 <_printf_common+0xbe>
 800cd7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd7e:	4639      	mov	r1, r7
 800cd80:	4630      	mov	r0, r6
 800cd82:	47c0      	blx	r8
 800cd84:	3001      	adds	r0, #1
 800cd86:	d020      	beq.n	800cdca <_printf_common+0xb2>
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	68e5      	ldr	r5, [r4, #12]
 800cd8c:	f8d9 2000 	ldr.w	r2, [r9]
 800cd90:	f003 0306 	and.w	r3, r3, #6
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	bf08      	it	eq
 800cd98:	1aad      	subeq	r5, r5, r2
 800cd9a:	68a3      	ldr	r3, [r4, #8]
 800cd9c:	6922      	ldr	r2, [r4, #16]
 800cd9e:	bf0c      	ite	eq
 800cda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cda4:	2500      	movne	r5, #0
 800cda6:	4293      	cmp	r3, r2
 800cda8:	bfc4      	itt	gt
 800cdaa:	1a9b      	subgt	r3, r3, r2
 800cdac:	18ed      	addgt	r5, r5, r3
 800cdae:	f04f 0900 	mov.w	r9, #0
 800cdb2:	341a      	adds	r4, #26
 800cdb4:	454d      	cmp	r5, r9
 800cdb6:	d11a      	bne.n	800cdee <_printf_common+0xd6>
 800cdb8:	2000      	movs	r0, #0
 800cdba:	e008      	b.n	800cdce <_printf_common+0xb6>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4652      	mov	r2, sl
 800cdc0:	4639      	mov	r1, r7
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	47c0      	blx	r8
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d103      	bne.n	800cdd2 <_printf_common+0xba>
 800cdca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdd2:	3501      	adds	r5, #1
 800cdd4:	e7c3      	b.n	800cd5e <_printf_common+0x46>
 800cdd6:	18e1      	adds	r1, r4, r3
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	2030      	movs	r0, #48	; 0x30
 800cddc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cde0:	4422      	add	r2, r4
 800cde2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cde6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdea:	3302      	adds	r3, #2
 800cdec:	e7c5      	b.n	800cd7a <_printf_common+0x62>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	47c0      	blx	r8
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	d0e6      	beq.n	800cdca <_printf_common+0xb2>
 800cdfc:	f109 0901 	add.w	r9, r9, #1
 800ce00:	e7d8      	b.n	800cdb4 <_printf_common+0x9c>
	...

0800ce04 <_printf_i>:
 800ce04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ce0c:	460c      	mov	r4, r1
 800ce0e:	7e09      	ldrb	r1, [r1, #24]
 800ce10:	b085      	sub	sp, #20
 800ce12:	296e      	cmp	r1, #110	; 0x6e
 800ce14:	4617      	mov	r7, r2
 800ce16:	4606      	mov	r6, r0
 800ce18:	4698      	mov	r8, r3
 800ce1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce1c:	f000 80b3 	beq.w	800cf86 <_printf_i+0x182>
 800ce20:	d822      	bhi.n	800ce68 <_printf_i+0x64>
 800ce22:	2963      	cmp	r1, #99	; 0x63
 800ce24:	d036      	beq.n	800ce94 <_printf_i+0x90>
 800ce26:	d80a      	bhi.n	800ce3e <_printf_i+0x3a>
 800ce28:	2900      	cmp	r1, #0
 800ce2a:	f000 80b9 	beq.w	800cfa0 <_printf_i+0x19c>
 800ce2e:	2958      	cmp	r1, #88	; 0x58
 800ce30:	f000 8083 	beq.w	800cf3a <_printf_i+0x136>
 800ce34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ce3c:	e032      	b.n	800cea4 <_printf_i+0xa0>
 800ce3e:	2964      	cmp	r1, #100	; 0x64
 800ce40:	d001      	beq.n	800ce46 <_printf_i+0x42>
 800ce42:	2969      	cmp	r1, #105	; 0x69
 800ce44:	d1f6      	bne.n	800ce34 <_printf_i+0x30>
 800ce46:	6820      	ldr	r0, [r4, #0]
 800ce48:	6813      	ldr	r3, [r2, #0]
 800ce4a:	0605      	lsls	r5, r0, #24
 800ce4c:	f103 0104 	add.w	r1, r3, #4
 800ce50:	d52a      	bpl.n	800cea8 <_printf_i+0xa4>
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	6011      	str	r1, [r2, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	da03      	bge.n	800ce62 <_printf_i+0x5e>
 800ce5a:	222d      	movs	r2, #45	; 0x2d
 800ce5c:	425b      	negs	r3, r3
 800ce5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ce62:	486f      	ldr	r0, [pc, #444]	; (800d020 <_printf_i+0x21c>)
 800ce64:	220a      	movs	r2, #10
 800ce66:	e039      	b.n	800cedc <_printf_i+0xd8>
 800ce68:	2973      	cmp	r1, #115	; 0x73
 800ce6a:	f000 809d 	beq.w	800cfa8 <_printf_i+0x1a4>
 800ce6e:	d808      	bhi.n	800ce82 <_printf_i+0x7e>
 800ce70:	296f      	cmp	r1, #111	; 0x6f
 800ce72:	d020      	beq.n	800ceb6 <_printf_i+0xb2>
 800ce74:	2970      	cmp	r1, #112	; 0x70
 800ce76:	d1dd      	bne.n	800ce34 <_printf_i+0x30>
 800ce78:	6823      	ldr	r3, [r4, #0]
 800ce7a:	f043 0320 	orr.w	r3, r3, #32
 800ce7e:	6023      	str	r3, [r4, #0]
 800ce80:	e003      	b.n	800ce8a <_printf_i+0x86>
 800ce82:	2975      	cmp	r1, #117	; 0x75
 800ce84:	d017      	beq.n	800ceb6 <_printf_i+0xb2>
 800ce86:	2978      	cmp	r1, #120	; 0x78
 800ce88:	d1d4      	bne.n	800ce34 <_printf_i+0x30>
 800ce8a:	2378      	movs	r3, #120	; 0x78
 800ce8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce90:	4864      	ldr	r0, [pc, #400]	; (800d024 <_printf_i+0x220>)
 800ce92:	e055      	b.n	800cf40 <_printf_i+0x13c>
 800ce94:	6813      	ldr	r3, [r2, #0]
 800ce96:	1d19      	adds	r1, r3, #4
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6011      	str	r1, [r2, #0]
 800ce9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cea4:	2301      	movs	r3, #1
 800cea6:	e08c      	b.n	800cfc2 <_printf_i+0x1be>
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6011      	str	r1, [r2, #0]
 800ceac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ceb0:	bf18      	it	ne
 800ceb2:	b21b      	sxthne	r3, r3
 800ceb4:	e7cf      	b.n	800ce56 <_printf_i+0x52>
 800ceb6:	6813      	ldr	r3, [r2, #0]
 800ceb8:	6825      	ldr	r5, [r4, #0]
 800ceba:	1d18      	adds	r0, r3, #4
 800cebc:	6010      	str	r0, [r2, #0]
 800cebe:	0628      	lsls	r0, r5, #24
 800cec0:	d501      	bpl.n	800cec6 <_printf_i+0xc2>
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	e002      	b.n	800cecc <_printf_i+0xc8>
 800cec6:	0668      	lsls	r0, r5, #25
 800cec8:	d5fb      	bpl.n	800cec2 <_printf_i+0xbe>
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	4854      	ldr	r0, [pc, #336]	; (800d020 <_printf_i+0x21c>)
 800cece:	296f      	cmp	r1, #111	; 0x6f
 800ced0:	bf14      	ite	ne
 800ced2:	220a      	movne	r2, #10
 800ced4:	2208      	moveq	r2, #8
 800ced6:	2100      	movs	r1, #0
 800ced8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cedc:	6865      	ldr	r5, [r4, #4]
 800cede:	60a5      	str	r5, [r4, #8]
 800cee0:	2d00      	cmp	r5, #0
 800cee2:	f2c0 8095 	blt.w	800d010 <_printf_i+0x20c>
 800cee6:	6821      	ldr	r1, [r4, #0]
 800cee8:	f021 0104 	bic.w	r1, r1, #4
 800ceec:	6021      	str	r1, [r4, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d13d      	bne.n	800cf6e <_printf_i+0x16a>
 800cef2:	2d00      	cmp	r5, #0
 800cef4:	f040 808e 	bne.w	800d014 <_printf_i+0x210>
 800cef8:	4665      	mov	r5, ip
 800cefa:	2a08      	cmp	r2, #8
 800cefc:	d10b      	bne.n	800cf16 <_printf_i+0x112>
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	07db      	lsls	r3, r3, #31
 800cf02:	d508      	bpl.n	800cf16 <_printf_i+0x112>
 800cf04:	6923      	ldr	r3, [r4, #16]
 800cf06:	6862      	ldr	r2, [r4, #4]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	bfde      	ittt	le
 800cf0c:	2330      	movle	r3, #48	; 0x30
 800cf0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf12:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cf16:	ebac 0305 	sub.w	r3, ip, r5
 800cf1a:	6123      	str	r3, [r4, #16]
 800cf1c:	f8cd 8000 	str.w	r8, [sp]
 800cf20:	463b      	mov	r3, r7
 800cf22:	aa03      	add	r2, sp, #12
 800cf24:	4621      	mov	r1, r4
 800cf26:	4630      	mov	r0, r6
 800cf28:	f7ff fef6 	bl	800cd18 <_printf_common>
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d14d      	bne.n	800cfcc <_printf_i+0x1c8>
 800cf30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf34:	b005      	add	sp, #20
 800cf36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf3a:	4839      	ldr	r0, [pc, #228]	; (800d020 <_printf_i+0x21c>)
 800cf3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cf40:	6813      	ldr	r3, [r2, #0]
 800cf42:	6821      	ldr	r1, [r4, #0]
 800cf44:	1d1d      	adds	r5, r3, #4
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6015      	str	r5, [r2, #0]
 800cf4a:	060a      	lsls	r2, r1, #24
 800cf4c:	d50b      	bpl.n	800cf66 <_printf_i+0x162>
 800cf4e:	07ca      	lsls	r2, r1, #31
 800cf50:	bf44      	itt	mi
 800cf52:	f041 0120 	orrmi.w	r1, r1, #32
 800cf56:	6021      	strmi	r1, [r4, #0]
 800cf58:	b91b      	cbnz	r3, 800cf62 <_printf_i+0x15e>
 800cf5a:	6822      	ldr	r2, [r4, #0]
 800cf5c:	f022 0220 	bic.w	r2, r2, #32
 800cf60:	6022      	str	r2, [r4, #0]
 800cf62:	2210      	movs	r2, #16
 800cf64:	e7b7      	b.n	800ced6 <_printf_i+0xd2>
 800cf66:	064d      	lsls	r5, r1, #25
 800cf68:	bf48      	it	mi
 800cf6a:	b29b      	uxthmi	r3, r3
 800cf6c:	e7ef      	b.n	800cf4e <_printf_i+0x14a>
 800cf6e:	4665      	mov	r5, ip
 800cf70:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf74:	fb02 3311 	mls	r3, r2, r1, r3
 800cf78:	5cc3      	ldrb	r3, [r0, r3]
 800cf7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cf7e:	460b      	mov	r3, r1
 800cf80:	2900      	cmp	r1, #0
 800cf82:	d1f5      	bne.n	800cf70 <_printf_i+0x16c>
 800cf84:	e7b9      	b.n	800cefa <_printf_i+0xf6>
 800cf86:	6813      	ldr	r3, [r2, #0]
 800cf88:	6825      	ldr	r5, [r4, #0]
 800cf8a:	6961      	ldr	r1, [r4, #20]
 800cf8c:	1d18      	adds	r0, r3, #4
 800cf8e:	6010      	str	r0, [r2, #0]
 800cf90:	0628      	lsls	r0, r5, #24
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	d501      	bpl.n	800cf9a <_printf_i+0x196>
 800cf96:	6019      	str	r1, [r3, #0]
 800cf98:	e002      	b.n	800cfa0 <_printf_i+0x19c>
 800cf9a:	066a      	lsls	r2, r5, #25
 800cf9c:	d5fb      	bpl.n	800cf96 <_printf_i+0x192>
 800cf9e:	8019      	strh	r1, [r3, #0]
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	6123      	str	r3, [r4, #16]
 800cfa4:	4665      	mov	r5, ip
 800cfa6:	e7b9      	b.n	800cf1c <_printf_i+0x118>
 800cfa8:	6813      	ldr	r3, [r2, #0]
 800cfaa:	1d19      	adds	r1, r3, #4
 800cfac:	6011      	str	r1, [r2, #0]
 800cfae:	681d      	ldr	r5, [r3, #0]
 800cfb0:	6862      	ldr	r2, [r4, #4]
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f7f3 f91b 	bl	80001f0 <memchr>
 800cfba:	b108      	cbz	r0, 800cfc0 <_printf_i+0x1bc>
 800cfbc:	1b40      	subs	r0, r0, r5
 800cfbe:	6060      	str	r0, [r4, #4]
 800cfc0:	6863      	ldr	r3, [r4, #4]
 800cfc2:	6123      	str	r3, [r4, #16]
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfca:	e7a7      	b.n	800cf1c <_printf_i+0x118>
 800cfcc:	6923      	ldr	r3, [r4, #16]
 800cfce:	462a      	mov	r2, r5
 800cfd0:	4639      	mov	r1, r7
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	47c0      	blx	r8
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	d0aa      	beq.n	800cf30 <_printf_i+0x12c>
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	079b      	lsls	r3, r3, #30
 800cfde:	d413      	bmi.n	800d008 <_printf_i+0x204>
 800cfe0:	68e0      	ldr	r0, [r4, #12]
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	4298      	cmp	r0, r3
 800cfe6:	bfb8      	it	lt
 800cfe8:	4618      	movlt	r0, r3
 800cfea:	e7a3      	b.n	800cf34 <_printf_i+0x130>
 800cfec:	2301      	movs	r3, #1
 800cfee:	464a      	mov	r2, r9
 800cff0:	4639      	mov	r1, r7
 800cff2:	4630      	mov	r0, r6
 800cff4:	47c0      	blx	r8
 800cff6:	3001      	adds	r0, #1
 800cff8:	d09a      	beq.n	800cf30 <_printf_i+0x12c>
 800cffa:	3501      	adds	r5, #1
 800cffc:	68e3      	ldr	r3, [r4, #12]
 800cffe:	9a03      	ldr	r2, [sp, #12]
 800d000:	1a9b      	subs	r3, r3, r2
 800d002:	42ab      	cmp	r3, r5
 800d004:	dcf2      	bgt.n	800cfec <_printf_i+0x1e8>
 800d006:	e7eb      	b.n	800cfe0 <_printf_i+0x1dc>
 800d008:	2500      	movs	r5, #0
 800d00a:	f104 0919 	add.w	r9, r4, #25
 800d00e:	e7f5      	b.n	800cffc <_printf_i+0x1f8>
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1ac      	bne.n	800cf6e <_printf_i+0x16a>
 800d014:	7803      	ldrb	r3, [r0, #0]
 800d016:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d01a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d01e:	e76c      	b.n	800cefa <_printf_i+0xf6>
 800d020:	0800e7c6 	.word	0x0800e7c6
 800d024:	0800e7d7 	.word	0x0800e7d7

0800d028 <_sbrk_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4c06      	ldr	r4, [pc, #24]	; (800d044 <_sbrk_r+0x1c>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4605      	mov	r5, r0
 800d030:	4608      	mov	r0, r1
 800d032:	6023      	str	r3, [r4, #0]
 800d034:	f7f4 fda4 	bl	8001b80 <_sbrk>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d102      	bne.n	800d042 <_sbrk_r+0x1a>
 800d03c:	6823      	ldr	r3, [r4, #0]
 800d03e:	b103      	cbz	r3, 800d042 <_sbrk_r+0x1a>
 800d040:	602b      	str	r3, [r5, #0]
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	2000694c 	.word	0x2000694c

0800d048 <siprintf>:
 800d048:	b40e      	push	{r1, r2, r3}
 800d04a:	b500      	push	{lr}
 800d04c:	b09c      	sub	sp, #112	; 0x70
 800d04e:	ab1d      	add	r3, sp, #116	; 0x74
 800d050:	9002      	str	r0, [sp, #8]
 800d052:	9006      	str	r0, [sp, #24]
 800d054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d058:	4809      	ldr	r0, [pc, #36]	; (800d080 <siprintf+0x38>)
 800d05a:	9107      	str	r1, [sp, #28]
 800d05c:	9104      	str	r1, [sp, #16]
 800d05e:	4909      	ldr	r1, [pc, #36]	; (800d084 <siprintf+0x3c>)
 800d060:	f853 2b04 	ldr.w	r2, [r3], #4
 800d064:	9105      	str	r1, [sp, #20]
 800d066:	6800      	ldr	r0, [r0, #0]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	a902      	add	r1, sp, #8
 800d06c:	f001 f9a4 	bl	800e3b8 <_svfiprintf_r>
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
 800d076:	b01c      	add	sp, #112	; 0x70
 800d078:	f85d eb04 	ldr.w	lr, [sp], #4
 800d07c:	b003      	add	sp, #12
 800d07e:	4770      	bx	lr
 800d080:	20000184 	.word	0x20000184
 800d084:	ffff0208 	.word	0xffff0208

0800d088 <quorem>:
 800d088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	6903      	ldr	r3, [r0, #16]
 800d08e:	690c      	ldr	r4, [r1, #16]
 800d090:	42a3      	cmp	r3, r4
 800d092:	4680      	mov	r8, r0
 800d094:	f2c0 8082 	blt.w	800d19c <quorem+0x114>
 800d098:	3c01      	subs	r4, #1
 800d09a:	f101 0714 	add.w	r7, r1, #20
 800d09e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d0a2:	f100 0614 	add.w	r6, r0, #20
 800d0a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d0aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d0ae:	eb06 030c 	add.w	r3, r6, ip
 800d0b2:	3501      	adds	r5, #1
 800d0b4:	eb07 090c 	add.w	r9, r7, ip
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	fbb0 f5f5 	udiv	r5, r0, r5
 800d0be:	b395      	cbz	r5, 800d126 <quorem+0x9e>
 800d0c0:	f04f 0a00 	mov.w	sl, #0
 800d0c4:	4638      	mov	r0, r7
 800d0c6:	46b6      	mov	lr, r6
 800d0c8:	46d3      	mov	fp, sl
 800d0ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0ce:	b293      	uxth	r3, r2
 800d0d0:	fb05 a303 	mla	r3, r5, r3, sl
 800d0d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	ebab 0303 	sub.w	r3, fp, r3
 800d0de:	0c12      	lsrs	r2, r2, #16
 800d0e0:	f8de b000 	ldr.w	fp, [lr]
 800d0e4:	fb05 a202 	mla	r2, r5, r2, sl
 800d0e8:	fa13 f38b 	uxtah	r3, r3, fp
 800d0ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d0f0:	fa1f fb82 	uxth.w	fp, r2
 800d0f4:	f8de 2000 	ldr.w	r2, [lr]
 800d0f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d0fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d100:	b29b      	uxth	r3, r3
 800d102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d106:	4581      	cmp	r9, r0
 800d108:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d10c:	f84e 3b04 	str.w	r3, [lr], #4
 800d110:	d2db      	bcs.n	800d0ca <quorem+0x42>
 800d112:	f856 300c 	ldr.w	r3, [r6, ip]
 800d116:	b933      	cbnz	r3, 800d126 <quorem+0x9e>
 800d118:	9b01      	ldr	r3, [sp, #4]
 800d11a:	3b04      	subs	r3, #4
 800d11c:	429e      	cmp	r6, r3
 800d11e:	461a      	mov	r2, r3
 800d120:	d330      	bcc.n	800d184 <quorem+0xfc>
 800d122:	f8c8 4010 	str.w	r4, [r8, #16]
 800d126:	4640      	mov	r0, r8
 800d128:	f001 f818 	bl	800e15c <__mcmp>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	db25      	blt.n	800d17c <quorem+0xf4>
 800d130:	3501      	adds	r5, #1
 800d132:	4630      	mov	r0, r6
 800d134:	f04f 0c00 	mov.w	ip, #0
 800d138:	f857 2b04 	ldr.w	r2, [r7], #4
 800d13c:	f8d0 e000 	ldr.w	lr, [r0]
 800d140:	b293      	uxth	r3, r2
 800d142:	ebac 0303 	sub.w	r3, ip, r3
 800d146:	0c12      	lsrs	r2, r2, #16
 800d148:	fa13 f38e 	uxtah	r3, r3, lr
 800d14c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d154:	b29b      	uxth	r3, r3
 800d156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d15a:	45b9      	cmp	r9, r7
 800d15c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d160:	f840 3b04 	str.w	r3, [r0], #4
 800d164:	d2e8      	bcs.n	800d138 <quorem+0xb0>
 800d166:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d16a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d16e:	b92a      	cbnz	r2, 800d17c <quorem+0xf4>
 800d170:	3b04      	subs	r3, #4
 800d172:	429e      	cmp	r6, r3
 800d174:	461a      	mov	r2, r3
 800d176:	d30b      	bcc.n	800d190 <quorem+0x108>
 800d178:	f8c8 4010 	str.w	r4, [r8, #16]
 800d17c:	4628      	mov	r0, r5
 800d17e:	b003      	add	sp, #12
 800d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d184:	6812      	ldr	r2, [r2, #0]
 800d186:	3b04      	subs	r3, #4
 800d188:	2a00      	cmp	r2, #0
 800d18a:	d1ca      	bne.n	800d122 <quorem+0x9a>
 800d18c:	3c01      	subs	r4, #1
 800d18e:	e7c5      	b.n	800d11c <quorem+0x94>
 800d190:	6812      	ldr	r2, [r2, #0]
 800d192:	3b04      	subs	r3, #4
 800d194:	2a00      	cmp	r2, #0
 800d196:	d1ef      	bne.n	800d178 <quorem+0xf0>
 800d198:	3c01      	subs	r4, #1
 800d19a:	e7ea      	b.n	800d172 <quorem+0xea>
 800d19c:	2000      	movs	r0, #0
 800d19e:	e7ee      	b.n	800d17e <quorem+0xf6>

0800d1a0 <_dtoa_r>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	ec57 6b10 	vmov	r6, r7, d0
 800d1a8:	b097      	sub	sp, #92	; 0x5c
 800d1aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d1ac:	9106      	str	r1, [sp, #24]
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d1b2:	9312      	str	r3, [sp, #72]	; 0x48
 800d1b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d1b8:	e9cd 6700 	strd	r6, r7, [sp]
 800d1bc:	b93d      	cbnz	r5, 800d1ce <_dtoa_r+0x2e>
 800d1be:	2010      	movs	r0, #16
 800d1c0:	f7ff fa0a 	bl	800c5d8 <malloc>
 800d1c4:	6260      	str	r0, [r4, #36]	; 0x24
 800d1c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1ca:	6005      	str	r5, [r0, #0]
 800d1cc:	60c5      	str	r5, [r0, #12]
 800d1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d0:	6819      	ldr	r1, [r3, #0]
 800d1d2:	b151      	cbz	r1, 800d1ea <_dtoa_r+0x4a>
 800d1d4:	685a      	ldr	r2, [r3, #4]
 800d1d6:	604a      	str	r2, [r1, #4]
 800d1d8:	2301      	movs	r3, #1
 800d1da:	4093      	lsls	r3, r2
 800d1dc:	608b      	str	r3, [r1, #8]
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 fdda 	bl	800dd98 <_Bfree>
 800d1e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	1e3b      	subs	r3, r7, #0
 800d1ec:	bfbb      	ittet	lt
 800d1ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d1f2:	9301      	strlt	r3, [sp, #4]
 800d1f4:	2300      	movge	r3, #0
 800d1f6:	2201      	movlt	r2, #1
 800d1f8:	bfac      	ite	ge
 800d1fa:	f8c8 3000 	strge.w	r3, [r8]
 800d1fe:	f8c8 2000 	strlt.w	r2, [r8]
 800d202:	4baf      	ldr	r3, [pc, #700]	; (800d4c0 <_dtoa_r+0x320>)
 800d204:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d208:	ea33 0308 	bics.w	r3, r3, r8
 800d20c:	d114      	bne.n	800d238 <_dtoa_r+0x98>
 800d20e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d210:	f242 730f 	movw	r3, #9999	; 0x270f
 800d214:	6013      	str	r3, [r2, #0]
 800d216:	9b00      	ldr	r3, [sp, #0]
 800d218:	b923      	cbnz	r3, 800d224 <_dtoa_r+0x84>
 800d21a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d21e:	2800      	cmp	r0, #0
 800d220:	f000 8542 	beq.w	800dca8 <_dtoa_r+0xb08>
 800d224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d226:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d4d4 <_dtoa_r+0x334>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f000 8544 	beq.w	800dcb8 <_dtoa_r+0xb18>
 800d230:	f10b 0303 	add.w	r3, fp, #3
 800d234:	f000 bd3e 	b.w	800dcb4 <_dtoa_r+0xb14>
 800d238:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d23c:	2200      	movs	r2, #0
 800d23e:	2300      	movs	r3, #0
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 800d248:	4681      	mov	r9, r0
 800d24a:	b168      	cbz	r0, 800d268 <_dtoa_r+0xc8>
 800d24c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d24e:	2301      	movs	r3, #1
 800d250:	6013      	str	r3, [r2, #0]
 800d252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d254:	2b00      	cmp	r3, #0
 800d256:	f000 8524 	beq.w	800dca2 <_dtoa_r+0xb02>
 800d25a:	4b9a      	ldr	r3, [pc, #616]	; (800d4c4 <_dtoa_r+0x324>)
 800d25c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d25e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	f000 bd28 	b.w	800dcb8 <_dtoa_r+0xb18>
 800d268:	aa14      	add	r2, sp, #80	; 0x50
 800d26a:	a915      	add	r1, sp, #84	; 0x54
 800d26c:	ec47 6b10 	vmov	d0, r6, r7
 800d270:	4620      	mov	r0, r4
 800d272:	f000 ffea 	bl	800e24a <__d2b>
 800d276:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d27a:	9004      	str	r0, [sp, #16]
 800d27c:	2d00      	cmp	r5, #0
 800d27e:	d07c      	beq.n	800d37a <_dtoa_r+0x1da>
 800d280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d284:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d288:	46b2      	mov	sl, r6
 800d28a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d28e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d292:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d296:	2200      	movs	r2, #0
 800d298:	4b8b      	ldr	r3, [pc, #556]	; (800d4c8 <_dtoa_r+0x328>)
 800d29a:	4650      	mov	r0, sl
 800d29c:	4659      	mov	r1, fp
 800d29e:	f7f2 fffb 	bl	8000298 <__aeabi_dsub>
 800d2a2:	a381      	add	r3, pc, #516	; (adr r3, 800d4a8 <_dtoa_r+0x308>)
 800d2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a8:	f7f3 f9ae 	bl	8000608 <__aeabi_dmul>
 800d2ac:	a380      	add	r3, pc, #512	; (adr r3, 800d4b0 <_dtoa_r+0x310>)
 800d2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b2:	f7f2 fff3 	bl	800029c <__adddf3>
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	460f      	mov	r7, r1
 800d2bc:	f7f3 f93a 	bl	8000534 <__aeabi_i2d>
 800d2c0:	a37d      	add	r3, pc, #500	; (adr r3, 800d4b8 <_dtoa_r+0x318>)
 800d2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c6:	f7f3 f99f 	bl	8000608 <__aeabi_dmul>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	4639      	mov	r1, r7
 800d2d2:	f7f2 ffe3 	bl	800029c <__adddf3>
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	460f      	mov	r7, r1
 800d2da:	f7f3 fc45 	bl	8000b68 <__aeabi_d2iz>
 800d2de:	2200      	movs	r2, #0
 800d2e0:	4682      	mov	sl, r0
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	f7f3 fc00 	bl	8000aec <__aeabi_dcmplt>
 800d2ec:	b148      	cbz	r0, 800d302 <_dtoa_r+0x162>
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	f7f3 f920 	bl	8000534 <__aeabi_i2d>
 800d2f4:	4632      	mov	r2, r6
 800d2f6:	463b      	mov	r3, r7
 800d2f8:	f7f3 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2fc:	b908      	cbnz	r0, 800d302 <_dtoa_r+0x162>
 800d2fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d302:	f1ba 0f16 	cmp.w	sl, #22
 800d306:	d859      	bhi.n	800d3bc <_dtoa_r+0x21c>
 800d308:	4970      	ldr	r1, [pc, #448]	; (800d4cc <_dtoa_r+0x32c>)
 800d30a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d30e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d312:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d316:	f7f3 fc07 	bl	8000b28 <__aeabi_dcmpgt>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d050      	beq.n	800d3c0 <_dtoa_r+0x220>
 800d31e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d322:	2300      	movs	r3, #0
 800d324:	930f      	str	r3, [sp, #60]	; 0x3c
 800d326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d328:	1b5d      	subs	r5, r3, r5
 800d32a:	f1b5 0801 	subs.w	r8, r5, #1
 800d32e:	bf49      	itett	mi
 800d330:	f1c5 0301 	rsbmi	r3, r5, #1
 800d334:	2300      	movpl	r3, #0
 800d336:	9305      	strmi	r3, [sp, #20]
 800d338:	f04f 0800 	movmi.w	r8, #0
 800d33c:	bf58      	it	pl
 800d33e:	9305      	strpl	r3, [sp, #20]
 800d340:	f1ba 0f00 	cmp.w	sl, #0
 800d344:	db3e      	blt.n	800d3c4 <_dtoa_r+0x224>
 800d346:	2300      	movs	r3, #0
 800d348:	44d0      	add	r8, sl
 800d34a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d34e:	9307      	str	r3, [sp, #28]
 800d350:	9b06      	ldr	r3, [sp, #24]
 800d352:	2b09      	cmp	r3, #9
 800d354:	f200 8090 	bhi.w	800d478 <_dtoa_r+0x2d8>
 800d358:	2b05      	cmp	r3, #5
 800d35a:	bfc4      	itt	gt
 800d35c:	3b04      	subgt	r3, #4
 800d35e:	9306      	strgt	r3, [sp, #24]
 800d360:	9b06      	ldr	r3, [sp, #24]
 800d362:	f1a3 0302 	sub.w	r3, r3, #2
 800d366:	bfcc      	ite	gt
 800d368:	2500      	movgt	r5, #0
 800d36a:	2501      	movle	r5, #1
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	f200 808f 	bhi.w	800d490 <_dtoa_r+0x2f0>
 800d372:	e8df f003 	tbb	[pc, r3]
 800d376:	7f7d      	.short	0x7f7d
 800d378:	7131      	.short	0x7131
 800d37a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d37e:	441d      	add	r5, r3
 800d380:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d384:	2820      	cmp	r0, #32
 800d386:	dd13      	ble.n	800d3b0 <_dtoa_r+0x210>
 800d388:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d38c:	9b00      	ldr	r3, [sp, #0]
 800d38e:	fa08 f800 	lsl.w	r8, r8, r0
 800d392:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d396:	fa23 f000 	lsr.w	r0, r3, r0
 800d39a:	ea48 0000 	orr.w	r0, r8, r0
 800d39e:	f7f3 f8b9 	bl	8000514 <__aeabi_ui2d>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d3aa:	3d01      	subs	r5, #1
 800d3ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3ae:	e772      	b.n	800d296 <_dtoa_r+0xf6>
 800d3b0:	9b00      	ldr	r3, [sp, #0]
 800d3b2:	f1c0 0020 	rsb	r0, r0, #32
 800d3b6:	fa03 f000 	lsl.w	r0, r3, r0
 800d3ba:	e7f0      	b.n	800d39e <_dtoa_r+0x1fe>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e7b1      	b.n	800d324 <_dtoa_r+0x184>
 800d3c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800d3c2:	e7b0      	b.n	800d326 <_dtoa_r+0x186>
 800d3c4:	9b05      	ldr	r3, [sp, #20]
 800d3c6:	eba3 030a 	sub.w	r3, r3, sl
 800d3ca:	9305      	str	r3, [sp, #20]
 800d3cc:	f1ca 0300 	rsb	r3, sl, #0
 800d3d0:	9307      	str	r3, [sp, #28]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	930e      	str	r3, [sp, #56]	; 0x38
 800d3d6:	e7bb      	b.n	800d350 <_dtoa_r+0x1b0>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	930a      	str	r3, [sp, #40]	; 0x28
 800d3dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	dd59      	ble.n	800d496 <_dtoa_r+0x2f6>
 800d3e2:	9302      	str	r3, [sp, #8]
 800d3e4:	4699      	mov	r9, r3
 800d3e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	6072      	str	r2, [r6, #4]
 800d3ec:	2204      	movs	r2, #4
 800d3ee:	f102 0014 	add.w	r0, r2, #20
 800d3f2:	4298      	cmp	r0, r3
 800d3f4:	6871      	ldr	r1, [r6, #4]
 800d3f6:	d953      	bls.n	800d4a0 <_dtoa_r+0x300>
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f000 fc99 	bl	800dd30 <_Balloc>
 800d3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d400:	6030      	str	r0, [r6, #0]
 800d402:	f1b9 0f0e 	cmp.w	r9, #14
 800d406:	f8d3 b000 	ldr.w	fp, [r3]
 800d40a:	f200 80e6 	bhi.w	800d5da <_dtoa_r+0x43a>
 800d40e:	2d00      	cmp	r5, #0
 800d410:	f000 80e3 	beq.w	800d5da <_dtoa_r+0x43a>
 800d414:	ed9d 7b00 	vldr	d7, [sp]
 800d418:	f1ba 0f00 	cmp.w	sl, #0
 800d41c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d420:	dd74      	ble.n	800d50c <_dtoa_r+0x36c>
 800d422:	4a2a      	ldr	r2, [pc, #168]	; (800d4cc <_dtoa_r+0x32c>)
 800d424:	f00a 030f 	and.w	r3, sl, #15
 800d428:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d42c:	ed93 7b00 	vldr	d7, [r3]
 800d430:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d434:	06f0      	lsls	r0, r6, #27
 800d436:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d43a:	d565      	bpl.n	800d508 <_dtoa_r+0x368>
 800d43c:	4b24      	ldr	r3, [pc, #144]	; (800d4d0 <_dtoa_r+0x330>)
 800d43e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d442:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d446:	f7f3 fa09 	bl	800085c <__aeabi_ddiv>
 800d44a:	e9cd 0100 	strd	r0, r1, [sp]
 800d44e:	f006 060f 	and.w	r6, r6, #15
 800d452:	2503      	movs	r5, #3
 800d454:	4f1e      	ldr	r7, [pc, #120]	; (800d4d0 <_dtoa_r+0x330>)
 800d456:	e04c      	b.n	800d4f2 <_dtoa_r+0x352>
 800d458:	2301      	movs	r3, #1
 800d45a:	930a      	str	r3, [sp, #40]	; 0x28
 800d45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d45e:	4453      	add	r3, sl
 800d460:	f103 0901 	add.w	r9, r3, #1
 800d464:	9302      	str	r3, [sp, #8]
 800d466:	464b      	mov	r3, r9
 800d468:	2b01      	cmp	r3, #1
 800d46a:	bfb8      	it	lt
 800d46c:	2301      	movlt	r3, #1
 800d46e:	e7ba      	b.n	800d3e6 <_dtoa_r+0x246>
 800d470:	2300      	movs	r3, #0
 800d472:	e7b2      	b.n	800d3da <_dtoa_r+0x23a>
 800d474:	2300      	movs	r3, #0
 800d476:	e7f0      	b.n	800d45a <_dtoa_r+0x2ba>
 800d478:	2501      	movs	r5, #1
 800d47a:	2300      	movs	r3, #0
 800d47c:	9306      	str	r3, [sp, #24]
 800d47e:	950a      	str	r5, [sp, #40]	; 0x28
 800d480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d484:	9302      	str	r3, [sp, #8]
 800d486:	4699      	mov	r9, r3
 800d488:	2200      	movs	r2, #0
 800d48a:	2312      	movs	r3, #18
 800d48c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d48e:	e7aa      	b.n	800d3e6 <_dtoa_r+0x246>
 800d490:	2301      	movs	r3, #1
 800d492:	930a      	str	r3, [sp, #40]	; 0x28
 800d494:	e7f4      	b.n	800d480 <_dtoa_r+0x2e0>
 800d496:	2301      	movs	r3, #1
 800d498:	9302      	str	r3, [sp, #8]
 800d49a:	4699      	mov	r9, r3
 800d49c:	461a      	mov	r2, r3
 800d49e:	e7f5      	b.n	800d48c <_dtoa_r+0x2ec>
 800d4a0:	3101      	adds	r1, #1
 800d4a2:	6071      	str	r1, [r6, #4]
 800d4a4:	0052      	lsls	r2, r2, #1
 800d4a6:	e7a2      	b.n	800d3ee <_dtoa_r+0x24e>
 800d4a8:	636f4361 	.word	0x636f4361
 800d4ac:	3fd287a7 	.word	0x3fd287a7
 800d4b0:	8b60c8b3 	.word	0x8b60c8b3
 800d4b4:	3fc68a28 	.word	0x3fc68a28
 800d4b8:	509f79fb 	.word	0x509f79fb
 800d4bc:	3fd34413 	.word	0x3fd34413
 800d4c0:	7ff00000 	.word	0x7ff00000
 800d4c4:	0800e7c5 	.word	0x0800e7c5
 800d4c8:	3ff80000 	.word	0x3ff80000
 800d4cc:	0800e820 	.word	0x0800e820
 800d4d0:	0800e7f8 	.word	0x0800e7f8
 800d4d4:	0800e7f1 	.word	0x0800e7f1
 800d4d8:	07f1      	lsls	r1, r6, #31
 800d4da:	d508      	bpl.n	800d4ee <_dtoa_r+0x34e>
 800d4dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4e4:	f7f3 f890 	bl	8000608 <__aeabi_dmul>
 800d4e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4ec:	3501      	adds	r5, #1
 800d4ee:	1076      	asrs	r6, r6, #1
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	2e00      	cmp	r6, #0
 800d4f4:	d1f0      	bne.n	800d4d8 <_dtoa_r+0x338>
 800d4f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d4fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4fe:	f7f3 f9ad 	bl	800085c <__aeabi_ddiv>
 800d502:	e9cd 0100 	strd	r0, r1, [sp]
 800d506:	e01a      	b.n	800d53e <_dtoa_r+0x39e>
 800d508:	2502      	movs	r5, #2
 800d50a:	e7a3      	b.n	800d454 <_dtoa_r+0x2b4>
 800d50c:	f000 80a0 	beq.w	800d650 <_dtoa_r+0x4b0>
 800d510:	f1ca 0600 	rsb	r6, sl, #0
 800d514:	4b9f      	ldr	r3, [pc, #636]	; (800d794 <_dtoa_r+0x5f4>)
 800d516:	4fa0      	ldr	r7, [pc, #640]	; (800d798 <_dtoa_r+0x5f8>)
 800d518:	f006 020f 	and.w	r2, r6, #15
 800d51c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d528:	f7f3 f86e 	bl	8000608 <__aeabi_dmul>
 800d52c:	e9cd 0100 	strd	r0, r1, [sp]
 800d530:	1136      	asrs	r6, r6, #4
 800d532:	2300      	movs	r3, #0
 800d534:	2502      	movs	r5, #2
 800d536:	2e00      	cmp	r6, #0
 800d538:	d17f      	bne.n	800d63a <_dtoa_r+0x49a>
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1e1      	bne.n	800d502 <_dtoa_r+0x362>
 800d53e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d540:	2b00      	cmp	r3, #0
 800d542:	f000 8087 	beq.w	800d654 <_dtoa_r+0x4b4>
 800d546:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d54a:	2200      	movs	r2, #0
 800d54c:	4b93      	ldr	r3, [pc, #588]	; (800d79c <_dtoa_r+0x5fc>)
 800d54e:	4630      	mov	r0, r6
 800d550:	4639      	mov	r1, r7
 800d552:	f7f3 facb 	bl	8000aec <__aeabi_dcmplt>
 800d556:	2800      	cmp	r0, #0
 800d558:	d07c      	beq.n	800d654 <_dtoa_r+0x4b4>
 800d55a:	f1b9 0f00 	cmp.w	r9, #0
 800d55e:	d079      	beq.n	800d654 <_dtoa_r+0x4b4>
 800d560:	9b02      	ldr	r3, [sp, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	dd35      	ble.n	800d5d2 <_dtoa_r+0x432>
 800d566:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d56a:	9308      	str	r3, [sp, #32]
 800d56c:	4639      	mov	r1, r7
 800d56e:	2200      	movs	r2, #0
 800d570:	4b8b      	ldr	r3, [pc, #556]	; (800d7a0 <_dtoa_r+0x600>)
 800d572:	4630      	mov	r0, r6
 800d574:	f7f3 f848 	bl	8000608 <__aeabi_dmul>
 800d578:	e9cd 0100 	strd	r0, r1, [sp]
 800d57c:	9f02      	ldr	r7, [sp, #8]
 800d57e:	3501      	adds	r5, #1
 800d580:	4628      	mov	r0, r5
 800d582:	f7f2 ffd7 	bl	8000534 <__aeabi_i2d>
 800d586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d58a:	f7f3 f83d 	bl	8000608 <__aeabi_dmul>
 800d58e:	2200      	movs	r2, #0
 800d590:	4b84      	ldr	r3, [pc, #528]	; (800d7a4 <_dtoa_r+0x604>)
 800d592:	f7f2 fe83 	bl	800029c <__adddf3>
 800d596:	4605      	mov	r5, r0
 800d598:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d59c:	2f00      	cmp	r7, #0
 800d59e:	d15d      	bne.n	800d65c <_dtoa_r+0x4bc>
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	4b81      	ldr	r3, [pc, #516]	; (800d7a8 <_dtoa_r+0x608>)
 800d5a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5a8:	f7f2 fe76 	bl	8000298 <__aeabi_dsub>
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	4633      	mov	r3, r6
 800d5b0:	e9cd 0100 	strd	r0, r1, [sp]
 800d5b4:	f7f3 fab8 	bl	8000b28 <__aeabi_dcmpgt>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	f040 8288 	bne.w	800dace <_dtoa_r+0x92e>
 800d5be:	462a      	mov	r2, r5
 800d5c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d5c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5c8:	f7f3 fa90 	bl	8000aec <__aeabi_dcmplt>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	f040 827c 	bne.w	800daca <_dtoa_r+0x92a>
 800d5d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d5d6:	e9cd 2300 	strd	r2, r3, [sp]
 800d5da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f2c0 8150 	blt.w	800d882 <_dtoa_r+0x6e2>
 800d5e2:	f1ba 0f0e 	cmp.w	sl, #14
 800d5e6:	f300 814c 	bgt.w	800d882 <_dtoa_r+0x6e2>
 800d5ea:	4b6a      	ldr	r3, [pc, #424]	; (800d794 <_dtoa_r+0x5f4>)
 800d5ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d5f0:	ed93 7b00 	vldr	d7, [r3]
 800d5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d5fc:	f280 80d8 	bge.w	800d7b0 <_dtoa_r+0x610>
 800d600:	f1b9 0f00 	cmp.w	r9, #0
 800d604:	f300 80d4 	bgt.w	800d7b0 <_dtoa_r+0x610>
 800d608:	f040 825e 	bne.w	800dac8 <_dtoa_r+0x928>
 800d60c:	2200      	movs	r2, #0
 800d60e:	4b66      	ldr	r3, [pc, #408]	; (800d7a8 <_dtoa_r+0x608>)
 800d610:	ec51 0b17 	vmov	r0, r1, d7
 800d614:	f7f2 fff8 	bl	8000608 <__aeabi_dmul>
 800d618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d61c:	f7f3 fa7a 	bl	8000b14 <__aeabi_dcmpge>
 800d620:	464f      	mov	r7, r9
 800d622:	464e      	mov	r6, r9
 800d624:	2800      	cmp	r0, #0
 800d626:	f040 8234 	bne.w	800da92 <_dtoa_r+0x8f2>
 800d62a:	2331      	movs	r3, #49	; 0x31
 800d62c:	f10b 0501 	add.w	r5, fp, #1
 800d630:	f88b 3000 	strb.w	r3, [fp]
 800d634:	f10a 0a01 	add.w	sl, sl, #1
 800d638:	e22f      	b.n	800da9a <_dtoa_r+0x8fa>
 800d63a:	07f2      	lsls	r2, r6, #31
 800d63c:	d505      	bpl.n	800d64a <_dtoa_r+0x4aa>
 800d63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d642:	f7f2 ffe1 	bl	8000608 <__aeabi_dmul>
 800d646:	3501      	adds	r5, #1
 800d648:	2301      	movs	r3, #1
 800d64a:	1076      	asrs	r6, r6, #1
 800d64c:	3708      	adds	r7, #8
 800d64e:	e772      	b.n	800d536 <_dtoa_r+0x396>
 800d650:	2502      	movs	r5, #2
 800d652:	e774      	b.n	800d53e <_dtoa_r+0x39e>
 800d654:	f8cd a020 	str.w	sl, [sp, #32]
 800d658:	464f      	mov	r7, r9
 800d65a:	e791      	b.n	800d580 <_dtoa_r+0x3e0>
 800d65c:	4b4d      	ldr	r3, [pc, #308]	; (800d794 <_dtoa_r+0x5f4>)
 800d65e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d662:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d047      	beq.n	800d6fc <_dtoa_r+0x55c>
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	2000      	movs	r0, #0
 800d672:	494e      	ldr	r1, [pc, #312]	; (800d7ac <_dtoa_r+0x60c>)
 800d674:	f7f3 f8f2 	bl	800085c <__aeabi_ddiv>
 800d678:	462a      	mov	r2, r5
 800d67a:	4633      	mov	r3, r6
 800d67c:	f7f2 fe0c 	bl	8000298 <__aeabi_dsub>
 800d680:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d684:	465d      	mov	r5, fp
 800d686:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d68a:	f7f3 fa6d 	bl	8000b68 <__aeabi_d2iz>
 800d68e:	4606      	mov	r6, r0
 800d690:	f7f2 ff50 	bl	8000534 <__aeabi_i2d>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d69c:	f7f2 fdfc 	bl	8000298 <__aeabi_dsub>
 800d6a0:	3630      	adds	r6, #48	; 0x30
 800d6a2:	f805 6b01 	strb.w	r6, [r5], #1
 800d6a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d6aa:	e9cd 0100 	strd	r0, r1, [sp]
 800d6ae:	f7f3 fa1d 	bl	8000aec <__aeabi_dcmplt>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d163      	bne.n	800d77e <_dtoa_r+0x5de>
 800d6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	4937      	ldr	r1, [pc, #220]	; (800d79c <_dtoa_r+0x5fc>)
 800d6be:	f7f2 fdeb 	bl	8000298 <__aeabi_dsub>
 800d6c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d6c6:	f7f3 fa11 	bl	8000aec <__aeabi_dcmplt>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	f040 80b7 	bne.w	800d83e <_dtoa_r+0x69e>
 800d6d0:	eba5 030b 	sub.w	r3, r5, fp
 800d6d4:	429f      	cmp	r7, r3
 800d6d6:	f77f af7c 	ble.w	800d5d2 <_dtoa_r+0x432>
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4b30      	ldr	r3, [pc, #192]	; (800d7a0 <_dtoa_r+0x600>)
 800d6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6e2:	f7f2 ff91 	bl	8000608 <__aeabi_dmul>
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d6ec:	4b2c      	ldr	r3, [pc, #176]	; (800d7a0 <_dtoa_r+0x600>)
 800d6ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6f2:	f7f2 ff89 	bl	8000608 <__aeabi_dmul>
 800d6f6:	e9cd 0100 	strd	r0, r1, [sp]
 800d6fa:	e7c4      	b.n	800d686 <_dtoa_r+0x4e6>
 800d6fc:	462a      	mov	r2, r5
 800d6fe:	4633      	mov	r3, r6
 800d700:	f7f2 ff82 	bl	8000608 <__aeabi_dmul>
 800d704:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d708:	eb0b 0507 	add.w	r5, fp, r7
 800d70c:	465e      	mov	r6, fp
 800d70e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d712:	f7f3 fa29 	bl	8000b68 <__aeabi_d2iz>
 800d716:	4607      	mov	r7, r0
 800d718:	f7f2 ff0c 	bl	8000534 <__aeabi_i2d>
 800d71c:	3730      	adds	r7, #48	; 0x30
 800d71e:	4602      	mov	r2, r0
 800d720:	460b      	mov	r3, r1
 800d722:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d726:	f7f2 fdb7 	bl	8000298 <__aeabi_dsub>
 800d72a:	f806 7b01 	strb.w	r7, [r6], #1
 800d72e:	42ae      	cmp	r6, r5
 800d730:	e9cd 0100 	strd	r0, r1, [sp]
 800d734:	f04f 0200 	mov.w	r2, #0
 800d738:	d126      	bne.n	800d788 <_dtoa_r+0x5e8>
 800d73a:	4b1c      	ldr	r3, [pc, #112]	; (800d7ac <_dtoa_r+0x60c>)
 800d73c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d740:	f7f2 fdac 	bl	800029c <__adddf3>
 800d744:	4602      	mov	r2, r0
 800d746:	460b      	mov	r3, r1
 800d748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d74c:	f7f3 f9ec 	bl	8000b28 <__aeabi_dcmpgt>
 800d750:	2800      	cmp	r0, #0
 800d752:	d174      	bne.n	800d83e <_dtoa_r+0x69e>
 800d754:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d758:	2000      	movs	r0, #0
 800d75a:	4914      	ldr	r1, [pc, #80]	; (800d7ac <_dtoa_r+0x60c>)
 800d75c:	f7f2 fd9c 	bl	8000298 <__aeabi_dsub>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d768:	f7f3 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	f43f af30 	beq.w	800d5d2 <_dtoa_r+0x432>
 800d772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d776:	2b30      	cmp	r3, #48	; 0x30
 800d778:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d77c:	d002      	beq.n	800d784 <_dtoa_r+0x5e4>
 800d77e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d782:	e04a      	b.n	800d81a <_dtoa_r+0x67a>
 800d784:	4615      	mov	r5, r2
 800d786:	e7f4      	b.n	800d772 <_dtoa_r+0x5d2>
 800d788:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <_dtoa_r+0x600>)
 800d78a:	f7f2 ff3d 	bl	8000608 <__aeabi_dmul>
 800d78e:	e9cd 0100 	strd	r0, r1, [sp]
 800d792:	e7bc      	b.n	800d70e <_dtoa_r+0x56e>
 800d794:	0800e820 	.word	0x0800e820
 800d798:	0800e7f8 	.word	0x0800e7f8
 800d79c:	3ff00000 	.word	0x3ff00000
 800d7a0:	40240000 	.word	0x40240000
 800d7a4:	401c0000 	.word	0x401c0000
 800d7a8:	40140000 	.word	0x40140000
 800d7ac:	3fe00000 	.word	0x3fe00000
 800d7b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d7b4:	465d      	mov	r5, fp
 800d7b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	4639      	mov	r1, r7
 800d7be:	f7f3 f84d 	bl	800085c <__aeabi_ddiv>
 800d7c2:	f7f3 f9d1 	bl	8000b68 <__aeabi_d2iz>
 800d7c6:	4680      	mov	r8, r0
 800d7c8:	f7f2 feb4 	bl	8000534 <__aeabi_i2d>
 800d7cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7d0:	f7f2 ff1a 	bl	8000608 <__aeabi_dmul>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	4630      	mov	r0, r6
 800d7da:	4639      	mov	r1, r7
 800d7dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d7e0:	f7f2 fd5a 	bl	8000298 <__aeabi_dsub>
 800d7e4:	f805 6b01 	strb.w	r6, [r5], #1
 800d7e8:	eba5 060b 	sub.w	r6, r5, fp
 800d7ec:	45b1      	cmp	r9, r6
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	d139      	bne.n	800d868 <_dtoa_r+0x6c8>
 800d7f4:	f7f2 fd52 	bl	800029c <__adddf3>
 800d7f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	460f      	mov	r7, r1
 800d800:	f7f3 f992 	bl	8000b28 <__aeabi_dcmpgt>
 800d804:	b9c8      	cbnz	r0, 800d83a <_dtoa_r+0x69a>
 800d806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d80a:	4630      	mov	r0, r6
 800d80c:	4639      	mov	r1, r7
 800d80e:	f7f3 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 800d812:	b110      	cbz	r0, 800d81a <_dtoa_r+0x67a>
 800d814:	f018 0f01 	tst.w	r8, #1
 800d818:	d10f      	bne.n	800d83a <_dtoa_r+0x69a>
 800d81a:	9904      	ldr	r1, [sp, #16]
 800d81c:	4620      	mov	r0, r4
 800d81e:	f000 fabb 	bl	800dd98 <_Bfree>
 800d822:	2300      	movs	r3, #0
 800d824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d826:	702b      	strb	r3, [r5, #0]
 800d828:	f10a 0301 	add.w	r3, sl, #1
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d830:	2b00      	cmp	r3, #0
 800d832:	f000 8241 	beq.w	800dcb8 <_dtoa_r+0xb18>
 800d836:	601d      	str	r5, [r3, #0]
 800d838:	e23e      	b.n	800dcb8 <_dtoa_r+0xb18>
 800d83a:	f8cd a020 	str.w	sl, [sp, #32]
 800d83e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d842:	2a39      	cmp	r2, #57	; 0x39
 800d844:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d848:	d108      	bne.n	800d85c <_dtoa_r+0x6bc>
 800d84a:	459b      	cmp	fp, r3
 800d84c:	d10a      	bne.n	800d864 <_dtoa_r+0x6c4>
 800d84e:	9b08      	ldr	r3, [sp, #32]
 800d850:	3301      	adds	r3, #1
 800d852:	9308      	str	r3, [sp, #32]
 800d854:	2330      	movs	r3, #48	; 0x30
 800d856:	f88b 3000 	strb.w	r3, [fp]
 800d85a:	465b      	mov	r3, fp
 800d85c:	781a      	ldrb	r2, [r3, #0]
 800d85e:	3201      	adds	r2, #1
 800d860:	701a      	strb	r2, [r3, #0]
 800d862:	e78c      	b.n	800d77e <_dtoa_r+0x5de>
 800d864:	461d      	mov	r5, r3
 800d866:	e7ea      	b.n	800d83e <_dtoa_r+0x69e>
 800d868:	2200      	movs	r2, #0
 800d86a:	4b9b      	ldr	r3, [pc, #620]	; (800dad8 <_dtoa_r+0x938>)
 800d86c:	f7f2 fecc 	bl	8000608 <__aeabi_dmul>
 800d870:	2200      	movs	r2, #0
 800d872:	2300      	movs	r3, #0
 800d874:	4606      	mov	r6, r0
 800d876:	460f      	mov	r7, r1
 800d878:	f7f3 f92e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d09a      	beq.n	800d7b6 <_dtoa_r+0x616>
 800d880:	e7cb      	b.n	800d81a <_dtoa_r+0x67a>
 800d882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d884:	2a00      	cmp	r2, #0
 800d886:	f000 808b 	beq.w	800d9a0 <_dtoa_r+0x800>
 800d88a:	9a06      	ldr	r2, [sp, #24]
 800d88c:	2a01      	cmp	r2, #1
 800d88e:	dc6e      	bgt.n	800d96e <_dtoa_r+0x7ce>
 800d890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d892:	2a00      	cmp	r2, #0
 800d894:	d067      	beq.n	800d966 <_dtoa_r+0x7c6>
 800d896:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d89a:	9f07      	ldr	r7, [sp, #28]
 800d89c:	9d05      	ldr	r5, [sp, #20]
 800d89e:	9a05      	ldr	r2, [sp, #20]
 800d8a0:	2101      	movs	r1, #1
 800d8a2:	441a      	add	r2, r3
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	9205      	str	r2, [sp, #20]
 800d8a8:	4498      	add	r8, r3
 800d8aa:	f000 fb15 	bl	800ded8 <__i2b>
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	2d00      	cmp	r5, #0
 800d8b2:	dd0c      	ble.n	800d8ce <_dtoa_r+0x72e>
 800d8b4:	f1b8 0f00 	cmp.w	r8, #0
 800d8b8:	dd09      	ble.n	800d8ce <_dtoa_r+0x72e>
 800d8ba:	4545      	cmp	r5, r8
 800d8bc:	9a05      	ldr	r2, [sp, #20]
 800d8be:	462b      	mov	r3, r5
 800d8c0:	bfa8      	it	ge
 800d8c2:	4643      	movge	r3, r8
 800d8c4:	1ad2      	subs	r2, r2, r3
 800d8c6:	9205      	str	r2, [sp, #20]
 800d8c8:	1aed      	subs	r5, r5, r3
 800d8ca:	eba8 0803 	sub.w	r8, r8, r3
 800d8ce:	9b07      	ldr	r3, [sp, #28]
 800d8d0:	b1eb      	cbz	r3, 800d90e <_dtoa_r+0x76e>
 800d8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d067      	beq.n	800d9a8 <_dtoa_r+0x808>
 800d8d8:	b18f      	cbz	r7, 800d8fe <_dtoa_r+0x75e>
 800d8da:	4631      	mov	r1, r6
 800d8dc:	463a      	mov	r2, r7
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f000 fb9a 	bl	800e018 <__pow5mult>
 800d8e4:	9a04      	ldr	r2, [sp, #16]
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 fafd 	bl	800deea <__multiply>
 800d8f0:	9904      	ldr	r1, [sp, #16]
 800d8f2:	9008      	str	r0, [sp, #32]
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f000 fa4f 	bl	800dd98 <_Bfree>
 800d8fa:	9b08      	ldr	r3, [sp, #32]
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	9b07      	ldr	r3, [sp, #28]
 800d900:	1bda      	subs	r2, r3, r7
 800d902:	d004      	beq.n	800d90e <_dtoa_r+0x76e>
 800d904:	9904      	ldr	r1, [sp, #16]
 800d906:	4620      	mov	r0, r4
 800d908:	f000 fb86 	bl	800e018 <__pow5mult>
 800d90c:	9004      	str	r0, [sp, #16]
 800d90e:	2101      	movs	r1, #1
 800d910:	4620      	mov	r0, r4
 800d912:	f000 fae1 	bl	800ded8 <__i2b>
 800d916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d918:	4607      	mov	r7, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 81d0 	beq.w	800dcc0 <_dtoa_r+0xb20>
 800d920:	461a      	mov	r2, r3
 800d922:	4601      	mov	r1, r0
 800d924:	4620      	mov	r0, r4
 800d926:	f000 fb77 	bl	800e018 <__pow5mult>
 800d92a:	9b06      	ldr	r3, [sp, #24]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	4607      	mov	r7, r0
 800d930:	dc40      	bgt.n	800d9b4 <_dtoa_r+0x814>
 800d932:	9b00      	ldr	r3, [sp, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d139      	bne.n	800d9ac <_dtoa_r+0x80c>
 800d938:	9b01      	ldr	r3, [sp, #4]
 800d93a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d136      	bne.n	800d9b0 <_dtoa_r+0x810>
 800d942:	9b01      	ldr	r3, [sp, #4]
 800d944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d948:	0d1b      	lsrs	r3, r3, #20
 800d94a:	051b      	lsls	r3, r3, #20
 800d94c:	b12b      	cbz	r3, 800d95a <_dtoa_r+0x7ba>
 800d94e:	9b05      	ldr	r3, [sp, #20]
 800d950:	3301      	adds	r3, #1
 800d952:	9305      	str	r3, [sp, #20]
 800d954:	f108 0801 	add.w	r8, r8, #1
 800d958:	2301      	movs	r3, #1
 800d95a:	9307      	str	r3, [sp, #28]
 800d95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d12a      	bne.n	800d9b8 <_dtoa_r+0x818>
 800d962:	2001      	movs	r0, #1
 800d964:	e030      	b.n	800d9c8 <_dtoa_r+0x828>
 800d966:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d968:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d96c:	e795      	b.n	800d89a <_dtoa_r+0x6fa>
 800d96e:	9b07      	ldr	r3, [sp, #28]
 800d970:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d974:	42bb      	cmp	r3, r7
 800d976:	bfbf      	itttt	lt
 800d978:	9b07      	ldrlt	r3, [sp, #28]
 800d97a:	9707      	strlt	r7, [sp, #28]
 800d97c:	1afa      	sublt	r2, r7, r3
 800d97e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d980:	bfbb      	ittet	lt
 800d982:	189b      	addlt	r3, r3, r2
 800d984:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d986:	1bdf      	subge	r7, r3, r7
 800d988:	2700      	movlt	r7, #0
 800d98a:	f1b9 0f00 	cmp.w	r9, #0
 800d98e:	bfb5      	itete	lt
 800d990:	9b05      	ldrlt	r3, [sp, #20]
 800d992:	9d05      	ldrge	r5, [sp, #20]
 800d994:	eba3 0509 	sublt.w	r5, r3, r9
 800d998:	464b      	movge	r3, r9
 800d99a:	bfb8      	it	lt
 800d99c:	2300      	movlt	r3, #0
 800d99e:	e77e      	b.n	800d89e <_dtoa_r+0x6fe>
 800d9a0:	9f07      	ldr	r7, [sp, #28]
 800d9a2:	9d05      	ldr	r5, [sp, #20]
 800d9a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d9a6:	e783      	b.n	800d8b0 <_dtoa_r+0x710>
 800d9a8:	9a07      	ldr	r2, [sp, #28]
 800d9aa:	e7ab      	b.n	800d904 <_dtoa_r+0x764>
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	e7d4      	b.n	800d95a <_dtoa_r+0x7ba>
 800d9b0:	9b00      	ldr	r3, [sp, #0]
 800d9b2:	e7d2      	b.n	800d95a <_dtoa_r+0x7ba>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	9307      	str	r3, [sp, #28]
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d9be:	6918      	ldr	r0, [r3, #16]
 800d9c0:	f000 fa3c 	bl	800de3c <__hi0bits>
 800d9c4:	f1c0 0020 	rsb	r0, r0, #32
 800d9c8:	4440      	add	r0, r8
 800d9ca:	f010 001f 	ands.w	r0, r0, #31
 800d9ce:	d047      	beq.n	800da60 <_dtoa_r+0x8c0>
 800d9d0:	f1c0 0320 	rsb	r3, r0, #32
 800d9d4:	2b04      	cmp	r3, #4
 800d9d6:	dd3b      	ble.n	800da50 <_dtoa_r+0x8b0>
 800d9d8:	9b05      	ldr	r3, [sp, #20]
 800d9da:	f1c0 001c 	rsb	r0, r0, #28
 800d9de:	4403      	add	r3, r0
 800d9e0:	9305      	str	r3, [sp, #20]
 800d9e2:	4405      	add	r5, r0
 800d9e4:	4480      	add	r8, r0
 800d9e6:	9b05      	ldr	r3, [sp, #20]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	dd05      	ble.n	800d9f8 <_dtoa_r+0x858>
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	9904      	ldr	r1, [sp, #16]
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 fb5f 	bl	800e0b4 <__lshift>
 800d9f6:	9004      	str	r0, [sp, #16]
 800d9f8:	f1b8 0f00 	cmp.w	r8, #0
 800d9fc:	dd05      	ble.n	800da0a <_dtoa_r+0x86a>
 800d9fe:	4639      	mov	r1, r7
 800da00:	4642      	mov	r2, r8
 800da02:	4620      	mov	r0, r4
 800da04:	f000 fb56 	bl	800e0b4 <__lshift>
 800da08:	4607      	mov	r7, r0
 800da0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da0c:	b353      	cbz	r3, 800da64 <_dtoa_r+0x8c4>
 800da0e:	4639      	mov	r1, r7
 800da10:	9804      	ldr	r0, [sp, #16]
 800da12:	f000 fba3 	bl	800e15c <__mcmp>
 800da16:	2800      	cmp	r0, #0
 800da18:	da24      	bge.n	800da64 <_dtoa_r+0x8c4>
 800da1a:	2300      	movs	r3, #0
 800da1c:	220a      	movs	r2, #10
 800da1e:	9904      	ldr	r1, [sp, #16]
 800da20:	4620      	mov	r0, r4
 800da22:	f000 f9d0 	bl	800ddc6 <__multadd>
 800da26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da28:	9004      	str	r0, [sp, #16]
 800da2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f000 814d 	beq.w	800dcce <_dtoa_r+0xb2e>
 800da34:	2300      	movs	r3, #0
 800da36:	4631      	mov	r1, r6
 800da38:	220a      	movs	r2, #10
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 f9c3 	bl	800ddc6 <__multadd>
 800da40:	9b02      	ldr	r3, [sp, #8]
 800da42:	2b00      	cmp	r3, #0
 800da44:	4606      	mov	r6, r0
 800da46:	dc4f      	bgt.n	800dae8 <_dtoa_r+0x948>
 800da48:	9b06      	ldr	r3, [sp, #24]
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	dd4c      	ble.n	800dae8 <_dtoa_r+0x948>
 800da4e:	e011      	b.n	800da74 <_dtoa_r+0x8d4>
 800da50:	d0c9      	beq.n	800d9e6 <_dtoa_r+0x846>
 800da52:	9a05      	ldr	r2, [sp, #20]
 800da54:	331c      	adds	r3, #28
 800da56:	441a      	add	r2, r3
 800da58:	9205      	str	r2, [sp, #20]
 800da5a:	441d      	add	r5, r3
 800da5c:	4498      	add	r8, r3
 800da5e:	e7c2      	b.n	800d9e6 <_dtoa_r+0x846>
 800da60:	4603      	mov	r3, r0
 800da62:	e7f6      	b.n	800da52 <_dtoa_r+0x8b2>
 800da64:	f1b9 0f00 	cmp.w	r9, #0
 800da68:	dc38      	bgt.n	800dadc <_dtoa_r+0x93c>
 800da6a:	9b06      	ldr	r3, [sp, #24]
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	dd35      	ble.n	800dadc <_dtoa_r+0x93c>
 800da70:	f8cd 9008 	str.w	r9, [sp, #8]
 800da74:	9b02      	ldr	r3, [sp, #8]
 800da76:	b963      	cbnz	r3, 800da92 <_dtoa_r+0x8f2>
 800da78:	4639      	mov	r1, r7
 800da7a:	2205      	movs	r2, #5
 800da7c:	4620      	mov	r0, r4
 800da7e:	f000 f9a2 	bl	800ddc6 <__multadd>
 800da82:	4601      	mov	r1, r0
 800da84:	4607      	mov	r7, r0
 800da86:	9804      	ldr	r0, [sp, #16]
 800da88:	f000 fb68 	bl	800e15c <__mcmp>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	f73f adcc 	bgt.w	800d62a <_dtoa_r+0x48a>
 800da92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da94:	465d      	mov	r5, fp
 800da96:	ea6f 0a03 	mvn.w	sl, r3
 800da9a:	f04f 0900 	mov.w	r9, #0
 800da9e:	4639      	mov	r1, r7
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 f979 	bl	800dd98 <_Bfree>
 800daa6:	2e00      	cmp	r6, #0
 800daa8:	f43f aeb7 	beq.w	800d81a <_dtoa_r+0x67a>
 800daac:	f1b9 0f00 	cmp.w	r9, #0
 800dab0:	d005      	beq.n	800dabe <_dtoa_r+0x91e>
 800dab2:	45b1      	cmp	r9, r6
 800dab4:	d003      	beq.n	800dabe <_dtoa_r+0x91e>
 800dab6:	4649      	mov	r1, r9
 800dab8:	4620      	mov	r0, r4
 800daba:	f000 f96d 	bl	800dd98 <_Bfree>
 800dabe:	4631      	mov	r1, r6
 800dac0:	4620      	mov	r0, r4
 800dac2:	f000 f969 	bl	800dd98 <_Bfree>
 800dac6:	e6a8      	b.n	800d81a <_dtoa_r+0x67a>
 800dac8:	2700      	movs	r7, #0
 800daca:	463e      	mov	r6, r7
 800dacc:	e7e1      	b.n	800da92 <_dtoa_r+0x8f2>
 800dace:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dad2:	463e      	mov	r6, r7
 800dad4:	e5a9      	b.n	800d62a <_dtoa_r+0x48a>
 800dad6:	bf00      	nop
 800dad8:	40240000 	.word	0x40240000
 800dadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dade:	f8cd 9008 	str.w	r9, [sp, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f000 80fa 	beq.w	800dcdc <_dtoa_r+0xb3c>
 800dae8:	2d00      	cmp	r5, #0
 800daea:	dd05      	ble.n	800daf8 <_dtoa_r+0x958>
 800daec:	4631      	mov	r1, r6
 800daee:	462a      	mov	r2, r5
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fadf 	bl	800e0b4 <__lshift>
 800daf6:	4606      	mov	r6, r0
 800daf8:	9b07      	ldr	r3, [sp, #28]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d04c      	beq.n	800db98 <_dtoa_r+0x9f8>
 800dafe:	6871      	ldr	r1, [r6, #4]
 800db00:	4620      	mov	r0, r4
 800db02:	f000 f915 	bl	800dd30 <_Balloc>
 800db06:	6932      	ldr	r2, [r6, #16]
 800db08:	3202      	adds	r2, #2
 800db0a:	4605      	mov	r5, r0
 800db0c:	0092      	lsls	r2, r2, #2
 800db0e:	f106 010c 	add.w	r1, r6, #12
 800db12:	300c      	adds	r0, #12
 800db14:	f7fe fd70 	bl	800c5f8 <memcpy>
 800db18:	2201      	movs	r2, #1
 800db1a:	4629      	mov	r1, r5
 800db1c:	4620      	mov	r0, r4
 800db1e:	f000 fac9 	bl	800e0b4 <__lshift>
 800db22:	9b00      	ldr	r3, [sp, #0]
 800db24:	f8cd b014 	str.w	fp, [sp, #20]
 800db28:	f003 0301 	and.w	r3, r3, #1
 800db2c:	46b1      	mov	r9, r6
 800db2e:	9307      	str	r3, [sp, #28]
 800db30:	4606      	mov	r6, r0
 800db32:	4639      	mov	r1, r7
 800db34:	9804      	ldr	r0, [sp, #16]
 800db36:	f7ff faa7 	bl	800d088 <quorem>
 800db3a:	4649      	mov	r1, r9
 800db3c:	4605      	mov	r5, r0
 800db3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800db42:	9804      	ldr	r0, [sp, #16]
 800db44:	f000 fb0a 	bl	800e15c <__mcmp>
 800db48:	4632      	mov	r2, r6
 800db4a:	9000      	str	r0, [sp, #0]
 800db4c:	4639      	mov	r1, r7
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 fb1e 	bl	800e190 <__mdiff>
 800db54:	68c3      	ldr	r3, [r0, #12]
 800db56:	4602      	mov	r2, r0
 800db58:	bb03      	cbnz	r3, 800db9c <_dtoa_r+0x9fc>
 800db5a:	4601      	mov	r1, r0
 800db5c:	9008      	str	r0, [sp, #32]
 800db5e:	9804      	ldr	r0, [sp, #16]
 800db60:	f000 fafc 	bl	800e15c <__mcmp>
 800db64:	9a08      	ldr	r2, [sp, #32]
 800db66:	4603      	mov	r3, r0
 800db68:	4611      	mov	r1, r2
 800db6a:	4620      	mov	r0, r4
 800db6c:	9308      	str	r3, [sp, #32]
 800db6e:	f000 f913 	bl	800dd98 <_Bfree>
 800db72:	9b08      	ldr	r3, [sp, #32]
 800db74:	b9a3      	cbnz	r3, 800dba0 <_dtoa_r+0xa00>
 800db76:	9a06      	ldr	r2, [sp, #24]
 800db78:	b992      	cbnz	r2, 800dba0 <_dtoa_r+0xa00>
 800db7a:	9a07      	ldr	r2, [sp, #28]
 800db7c:	b982      	cbnz	r2, 800dba0 <_dtoa_r+0xa00>
 800db7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800db82:	d029      	beq.n	800dbd8 <_dtoa_r+0xa38>
 800db84:	9b00      	ldr	r3, [sp, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	dd01      	ble.n	800db8e <_dtoa_r+0x9ee>
 800db8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800db8e:	9b05      	ldr	r3, [sp, #20]
 800db90:	1c5d      	adds	r5, r3, #1
 800db92:	f883 8000 	strb.w	r8, [r3]
 800db96:	e782      	b.n	800da9e <_dtoa_r+0x8fe>
 800db98:	4630      	mov	r0, r6
 800db9a:	e7c2      	b.n	800db22 <_dtoa_r+0x982>
 800db9c:	2301      	movs	r3, #1
 800db9e:	e7e3      	b.n	800db68 <_dtoa_r+0x9c8>
 800dba0:	9a00      	ldr	r2, [sp, #0]
 800dba2:	2a00      	cmp	r2, #0
 800dba4:	db04      	blt.n	800dbb0 <_dtoa_r+0xa10>
 800dba6:	d125      	bne.n	800dbf4 <_dtoa_r+0xa54>
 800dba8:	9a06      	ldr	r2, [sp, #24]
 800dbaa:	bb1a      	cbnz	r2, 800dbf4 <_dtoa_r+0xa54>
 800dbac:	9a07      	ldr	r2, [sp, #28]
 800dbae:	bb0a      	cbnz	r2, 800dbf4 <_dtoa_r+0xa54>
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	ddec      	ble.n	800db8e <_dtoa_r+0x9ee>
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	9904      	ldr	r1, [sp, #16]
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f000 fa7b 	bl	800e0b4 <__lshift>
 800dbbe:	4639      	mov	r1, r7
 800dbc0:	9004      	str	r0, [sp, #16]
 800dbc2:	f000 facb 	bl	800e15c <__mcmp>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	dc03      	bgt.n	800dbd2 <_dtoa_r+0xa32>
 800dbca:	d1e0      	bne.n	800db8e <_dtoa_r+0x9ee>
 800dbcc:	f018 0f01 	tst.w	r8, #1
 800dbd0:	d0dd      	beq.n	800db8e <_dtoa_r+0x9ee>
 800dbd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dbd6:	d1d8      	bne.n	800db8a <_dtoa_r+0x9ea>
 800dbd8:	9b05      	ldr	r3, [sp, #20]
 800dbda:	9a05      	ldr	r2, [sp, #20]
 800dbdc:	1c5d      	adds	r5, r3, #1
 800dbde:	2339      	movs	r3, #57	; 0x39
 800dbe0:	7013      	strb	r3, [r2, #0]
 800dbe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbe6:	2b39      	cmp	r3, #57	; 0x39
 800dbe8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800dbec:	d04f      	beq.n	800dc8e <_dtoa_r+0xaee>
 800dbee:	3301      	adds	r3, #1
 800dbf0:	7013      	strb	r3, [r2, #0]
 800dbf2:	e754      	b.n	800da9e <_dtoa_r+0x8fe>
 800dbf4:	9a05      	ldr	r2, [sp, #20]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f102 0501 	add.w	r5, r2, #1
 800dbfc:	dd06      	ble.n	800dc0c <_dtoa_r+0xa6c>
 800dbfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc02:	d0e9      	beq.n	800dbd8 <_dtoa_r+0xa38>
 800dc04:	f108 0801 	add.w	r8, r8, #1
 800dc08:	9b05      	ldr	r3, [sp, #20]
 800dc0a:	e7c2      	b.n	800db92 <_dtoa_r+0x9f2>
 800dc0c:	9a02      	ldr	r2, [sp, #8]
 800dc0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800dc12:	eba5 030b 	sub.w	r3, r5, fp
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d021      	beq.n	800dc5e <_dtoa_r+0xabe>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	220a      	movs	r2, #10
 800dc1e:	9904      	ldr	r1, [sp, #16]
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 f8d0 	bl	800ddc6 <__multadd>
 800dc26:	45b1      	cmp	r9, r6
 800dc28:	9004      	str	r0, [sp, #16]
 800dc2a:	f04f 0300 	mov.w	r3, #0
 800dc2e:	f04f 020a 	mov.w	r2, #10
 800dc32:	4649      	mov	r1, r9
 800dc34:	4620      	mov	r0, r4
 800dc36:	d105      	bne.n	800dc44 <_dtoa_r+0xaa4>
 800dc38:	f000 f8c5 	bl	800ddc6 <__multadd>
 800dc3c:	4681      	mov	r9, r0
 800dc3e:	4606      	mov	r6, r0
 800dc40:	9505      	str	r5, [sp, #20]
 800dc42:	e776      	b.n	800db32 <_dtoa_r+0x992>
 800dc44:	f000 f8bf 	bl	800ddc6 <__multadd>
 800dc48:	4631      	mov	r1, r6
 800dc4a:	4681      	mov	r9, r0
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	220a      	movs	r2, #10
 800dc50:	4620      	mov	r0, r4
 800dc52:	f000 f8b8 	bl	800ddc6 <__multadd>
 800dc56:	4606      	mov	r6, r0
 800dc58:	e7f2      	b.n	800dc40 <_dtoa_r+0xaa0>
 800dc5a:	f04f 0900 	mov.w	r9, #0
 800dc5e:	2201      	movs	r2, #1
 800dc60:	9904      	ldr	r1, [sp, #16]
 800dc62:	4620      	mov	r0, r4
 800dc64:	f000 fa26 	bl	800e0b4 <__lshift>
 800dc68:	4639      	mov	r1, r7
 800dc6a:	9004      	str	r0, [sp, #16]
 800dc6c:	f000 fa76 	bl	800e15c <__mcmp>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	dcb6      	bgt.n	800dbe2 <_dtoa_r+0xa42>
 800dc74:	d102      	bne.n	800dc7c <_dtoa_r+0xadc>
 800dc76:	f018 0f01 	tst.w	r8, #1
 800dc7a:	d1b2      	bne.n	800dbe2 <_dtoa_r+0xa42>
 800dc7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc80:	2b30      	cmp	r3, #48	; 0x30
 800dc82:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800dc86:	f47f af0a 	bne.w	800da9e <_dtoa_r+0x8fe>
 800dc8a:	4615      	mov	r5, r2
 800dc8c:	e7f6      	b.n	800dc7c <_dtoa_r+0xadc>
 800dc8e:	4593      	cmp	fp, r2
 800dc90:	d105      	bne.n	800dc9e <_dtoa_r+0xafe>
 800dc92:	2331      	movs	r3, #49	; 0x31
 800dc94:	f10a 0a01 	add.w	sl, sl, #1
 800dc98:	f88b 3000 	strb.w	r3, [fp]
 800dc9c:	e6ff      	b.n	800da9e <_dtoa_r+0x8fe>
 800dc9e:	4615      	mov	r5, r2
 800dca0:	e79f      	b.n	800dbe2 <_dtoa_r+0xa42>
 800dca2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dd08 <_dtoa_r+0xb68>
 800dca6:	e007      	b.n	800dcb8 <_dtoa_r+0xb18>
 800dca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dd0c <_dtoa_r+0xb6c>
 800dcae:	b11b      	cbz	r3, 800dcb8 <_dtoa_r+0xb18>
 800dcb0:	f10b 0308 	add.w	r3, fp, #8
 800dcb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	4658      	mov	r0, fp
 800dcba:	b017      	add	sp, #92	; 0x5c
 800dcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc0:	9b06      	ldr	r3, [sp, #24]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	f77f ae35 	ble.w	800d932 <_dtoa_r+0x792>
 800dcc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	e649      	b.n	800d962 <_dtoa_r+0x7c2>
 800dcce:	9b02      	ldr	r3, [sp, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	dc03      	bgt.n	800dcdc <_dtoa_r+0xb3c>
 800dcd4:	9b06      	ldr	r3, [sp, #24]
 800dcd6:	2b02      	cmp	r3, #2
 800dcd8:	f73f aecc 	bgt.w	800da74 <_dtoa_r+0x8d4>
 800dcdc:	465d      	mov	r5, fp
 800dcde:	4639      	mov	r1, r7
 800dce0:	9804      	ldr	r0, [sp, #16]
 800dce2:	f7ff f9d1 	bl	800d088 <quorem>
 800dce6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dcea:	f805 8b01 	strb.w	r8, [r5], #1
 800dcee:	9a02      	ldr	r2, [sp, #8]
 800dcf0:	eba5 030b 	sub.w	r3, r5, fp
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	ddb0      	ble.n	800dc5a <_dtoa_r+0xaba>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	220a      	movs	r2, #10
 800dcfc:	9904      	ldr	r1, [sp, #16]
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f000 f861 	bl	800ddc6 <__multadd>
 800dd04:	9004      	str	r0, [sp, #16]
 800dd06:	e7ea      	b.n	800dcde <_dtoa_r+0xb3e>
 800dd08:	0800e7c4 	.word	0x0800e7c4
 800dd0c:	0800e7e8 	.word	0x0800e7e8

0800dd10 <_localeconv_r>:
 800dd10:	4b04      	ldr	r3, [pc, #16]	; (800dd24 <_localeconv_r+0x14>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6a18      	ldr	r0, [r3, #32]
 800dd16:	4b04      	ldr	r3, [pc, #16]	; (800dd28 <_localeconv_r+0x18>)
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	bf08      	it	eq
 800dd1c:	4618      	moveq	r0, r3
 800dd1e:	30f0      	adds	r0, #240	; 0xf0
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	20000184 	.word	0x20000184
 800dd28:	200001e8 	.word	0x200001e8

0800dd2c <__malloc_lock>:
 800dd2c:	4770      	bx	lr

0800dd2e <__malloc_unlock>:
 800dd2e:	4770      	bx	lr

0800dd30 <_Balloc>:
 800dd30:	b570      	push	{r4, r5, r6, lr}
 800dd32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd34:	4604      	mov	r4, r0
 800dd36:	460e      	mov	r6, r1
 800dd38:	b93d      	cbnz	r5, 800dd4a <_Balloc+0x1a>
 800dd3a:	2010      	movs	r0, #16
 800dd3c:	f7fe fc4c 	bl	800c5d8 <malloc>
 800dd40:	6260      	str	r0, [r4, #36]	; 0x24
 800dd42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd46:	6005      	str	r5, [r0, #0]
 800dd48:	60c5      	str	r5, [r0, #12]
 800dd4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd4c:	68eb      	ldr	r3, [r5, #12]
 800dd4e:	b183      	cbz	r3, 800dd72 <_Balloc+0x42>
 800dd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd58:	b9b8      	cbnz	r0, 800dd8a <_Balloc+0x5a>
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	fa01 f506 	lsl.w	r5, r1, r6
 800dd60:	1d6a      	adds	r2, r5, #5
 800dd62:	0092      	lsls	r2, r2, #2
 800dd64:	4620      	mov	r0, r4
 800dd66:	f000 fabf 	bl	800e2e8 <_calloc_r>
 800dd6a:	b160      	cbz	r0, 800dd86 <_Balloc+0x56>
 800dd6c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dd70:	e00e      	b.n	800dd90 <_Balloc+0x60>
 800dd72:	2221      	movs	r2, #33	; 0x21
 800dd74:	2104      	movs	r1, #4
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 fab6 	bl	800e2e8 <_calloc_r>
 800dd7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd7e:	60e8      	str	r0, [r5, #12]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1e4      	bne.n	800dd50 <_Balloc+0x20>
 800dd86:	2000      	movs	r0, #0
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
 800dd8a:	6802      	ldr	r2, [r0, #0]
 800dd8c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dd90:	2300      	movs	r3, #0
 800dd92:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd96:	e7f7      	b.n	800dd88 <_Balloc+0x58>

0800dd98 <_Bfree>:
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dd9c:	4606      	mov	r6, r0
 800dd9e:	460d      	mov	r5, r1
 800dda0:	b93c      	cbnz	r4, 800ddb2 <_Bfree+0x1a>
 800dda2:	2010      	movs	r0, #16
 800dda4:	f7fe fc18 	bl	800c5d8 <malloc>
 800dda8:	6270      	str	r0, [r6, #36]	; 0x24
 800ddaa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddae:	6004      	str	r4, [r0, #0]
 800ddb0:	60c4      	str	r4, [r0, #12]
 800ddb2:	b13d      	cbz	r5, 800ddc4 <_Bfree+0x2c>
 800ddb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ddb6:	686a      	ldr	r2, [r5, #4]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ddbe:	6029      	str	r1, [r5, #0]
 800ddc0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ddc4:	bd70      	pop	{r4, r5, r6, pc}

0800ddc6 <__multadd>:
 800ddc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddca:	690d      	ldr	r5, [r1, #16]
 800ddcc:	461f      	mov	r7, r3
 800ddce:	4606      	mov	r6, r0
 800ddd0:	460c      	mov	r4, r1
 800ddd2:	f101 0c14 	add.w	ip, r1, #20
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f8dc 0000 	ldr.w	r0, [ip]
 800dddc:	b281      	uxth	r1, r0
 800ddde:	fb02 7101 	mla	r1, r2, r1, r7
 800dde2:	0c0f      	lsrs	r7, r1, #16
 800dde4:	0c00      	lsrs	r0, r0, #16
 800dde6:	fb02 7000 	mla	r0, r2, r0, r7
 800ddea:	b289      	uxth	r1, r1
 800ddec:	3301      	adds	r3, #1
 800ddee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ddf2:	429d      	cmp	r5, r3
 800ddf4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ddf8:	f84c 1b04 	str.w	r1, [ip], #4
 800ddfc:	dcec      	bgt.n	800ddd8 <__multadd+0x12>
 800ddfe:	b1d7      	cbz	r7, 800de36 <__multadd+0x70>
 800de00:	68a3      	ldr	r3, [r4, #8]
 800de02:	42ab      	cmp	r3, r5
 800de04:	dc12      	bgt.n	800de2c <__multadd+0x66>
 800de06:	6861      	ldr	r1, [r4, #4]
 800de08:	4630      	mov	r0, r6
 800de0a:	3101      	adds	r1, #1
 800de0c:	f7ff ff90 	bl	800dd30 <_Balloc>
 800de10:	6922      	ldr	r2, [r4, #16]
 800de12:	3202      	adds	r2, #2
 800de14:	f104 010c 	add.w	r1, r4, #12
 800de18:	4680      	mov	r8, r0
 800de1a:	0092      	lsls	r2, r2, #2
 800de1c:	300c      	adds	r0, #12
 800de1e:	f7fe fbeb 	bl	800c5f8 <memcpy>
 800de22:	4621      	mov	r1, r4
 800de24:	4630      	mov	r0, r6
 800de26:	f7ff ffb7 	bl	800dd98 <_Bfree>
 800de2a:	4644      	mov	r4, r8
 800de2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de30:	3501      	adds	r5, #1
 800de32:	615f      	str	r7, [r3, #20]
 800de34:	6125      	str	r5, [r4, #16]
 800de36:	4620      	mov	r0, r4
 800de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de3c <__hi0bits>:
 800de3c:	0c02      	lsrs	r2, r0, #16
 800de3e:	0412      	lsls	r2, r2, #16
 800de40:	4603      	mov	r3, r0
 800de42:	b9b2      	cbnz	r2, 800de72 <__hi0bits+0x36>
 800de44:	0403      	lsls	r3, r0, #16
 800de46:	2010      	movs	r0, #16
 800de48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800de4c:	bf04      	itt	eq
 800de4e:	021b      	lsleq	r3, r3, #8
 800de50:	3008      	addeq	r0, #8
 800de52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800de56:	bf04      	itt	eq
 800de58:	011b      	lsleq	r3, r3, #4
 800de5a:	3004      	addeq	r0, #4
 800de5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800de60:	bf04      	itt	eq
 800de62:	009b      	lsleq	r3, r3, #2
 800de64:	3002      	addeq	r0, #2
 800de66:	2b00      	cmp	r3, #0
 800de68:	db06      	blt.n	800de78 <__hi0bits+0x3c>
 800de6a:	005b      	lsls	r3, r3, #1
 800de6c:	d503      	bpl.n	800de76 <__hi0bits+0x3a>
 800de6e:	3001      	adds	r0, #1
 800de70:	4770      	bx	lr
 800de72:	2000      	movs	r0, #0
 800de74:	e7e8      	b.n	800de48 <__hi0bits+0xc>
 800de76:	2020      	movs	r0, #32
 800de78:	4770      	bx	lr

0800de7a <__lo0bits>:
 800de7a:	6803      	ldr	r3, [r0, #0]
 800de7c:	f013 0207 	ands.w	r2, r3, #7
 800de80:	4601      	mov	r1, r0
 800de82:	d00b      	beq.n	800de9c <__lo0bits+0x22>
 800de84:	07da      	lsls	r2, r3, #31
 800de86:	d423      	bmi.n	800ded0 <__lo0bits+0x56>
 800de88:	0798      	lsls	r0, r3, #30
 800de8a:	bf49      	itett	mi
 800de8c:	085b      	lsrmi	r3, r3, #1
 800de8e:	089b      	lsrpl	r3, r3, #2
 800de90:	2001      	movmi	r0, #1
 800de92:	600b      	strmi	r3, [r1, #0]
 800de94:	bf5c      	itt	pl
 800de96:	600b      	strpl	r3, [r1, #0]
 800de98:	2002      	movpl	r0, #2
 800de9a:	4770      	bx	lr
 800de9c:	b298      	uxth	r0, r3
 800de9e:	b9a8      	cbnz	r0, 800decc <__lo0bits+0x52>
 800dea0:	0c1b      	lsrs	r3, r3, #16
 800dea2:	2010      	movs	r0, #16
 800dea4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dea8:	bf04      	itt	eq
 800deaa:	0a1b      	lsreq	r3, r3, #8
 800deac:	3008      	addeq	r0, #8
 800deae:	071a      	lsls	r2, r3, #28
 800deb0:	bf04      	itt	eq
 800deb2:	091b      	lsreq	r3, r3, #4
 800deb4:	3004      	addeq	r0, #4
 800deb6:	079a      	lsls	r2, r3, #30
 800deb8:	bf04      	itt	eq
 800deba:	089b      	lsreq	r3, r3, #2
 800debc:	3002      	addeq	r0, #2
 800debe:	07da      	lsls	r2, r3, #31
 800dec0:	d402      	bmi.n	800dec8 <__lo0bits+0x4e>
 800dec2:	085b      	lsrs	r3, r3, #1
 800dec4:	d006      	beq.n	800ded4 <__lo0bits+0x5a>
 800dec6:	3001      	adds	r0, #1
 800dec8:	600b      	str	r3, [r1, #0]
 800deca:	4770      	bx	lr
 800decc:	4610      	mov	r0, r2
 800dece:	e7e9      	b.n	800dea4 <__lo0bits+0x2a>
 800ded0:	2000      	movs	r0, #0
 800ded2:	4770      	bx	lr
 800ded4:	2020      	movs	r0, #32
 800ded6:	4770      	bx	lr

0800ded8 <__i2b>:
 800ded8:	b510      	push	{r4, lr}
 800deda:	460c      	mov	r4, r1
 800dedc:	2101      	movs	r1, #1
 800dede:	f7ff ff27 	bl	800dd30 <_Balloc>
 800dee2:	2201      	movs	r2, #1
 800dee4:	6144      	str	r4, [r0, #20]
 800dee6:	6102      	str	r2, [r0, #16]
 800dee8:	bd10      	pop	{r4, pc}

0800deea <__multiply>:
 800deea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deee:	4614      	mov	r4, r2
 800def0:	690a      	ldr	r2, [r1, #16]
 800def2:	6923      	ldr	r3, [r4, #16]
 800def4:	429a      	cmp	r2, r3
 800def6:	bfb8      	it	lt
 800def8:	460b      	movlt	r3, r1
 800defa:	4688      	mov	r8, r1
 800defc:	bfbc      	itt	lt
 800defe:	46a0      	movlt	r8, r4
 800df00:	461c      	movlt	r4, r3
 800df02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800df0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df12:	eb07 0609 	add.w	r6, r7, r9
 800df16:	42b3      	cmp	r3, r6
 800df18:	bfb8      	it	lt
 800df1a:	3101      	addlt	r1, #1
 800df1c:	f7ff ff08 	bl	800dd30 <_Balloc>
 800df20:	f100 0514 	add.w	r5, r0, #20
 800df24:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800df28:	462b      	mov	r3, r5
 800df2a:	2200      	movs	r2, #0
 800df2c:	4573      	cmp	r3, lr
 800df2e:	d316      	bcc.n	800df5e <__multiply+0x74>
 800df30:	f104 0214 	add.w	r2, r4, #20
 800df34:	f108 0114 	add.w	r1, r8, #20
 800df38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800df3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	9b00      	ldr	r3, [sp, #0]
 800df44:	9201      	str	r2, [sp, #4]
 800df46:	4293      	cmp	r3, r2
 800df48:	d80c      	bhi.n	800df64 <__multiply+0x7a>
 800df4a:	2e00      	cmp	r6, #0
 800df4c:	dd03      	ble.n	800df56 <__multiply+0x6c>
 800df4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800df52:	2b00      	cmp	r3, #0
 800df54:	d05d      	beq.n	800e012 <__multiply+0x128>
 800df56:	6106      	str	r6, [r0, #16]
 800df58:	b003      	add	sp, #12
 800df5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5e:	f843 2b04 	str.w	r2, [r3], #4
 800df62:	e7e3      	b.n	800df2c <__multiply+0x42>
 800df64:	f8b2 b000 	ldrh.w	fp, [r2]
 800df68:	f1bb 0f00 	cmp.w	fp, #0
 800df6c:	d023      	beq.n	800dfb6 <__multiply+0xcc>
 800df6e:	4689      	mov	r9, r1
 800df70:	46ac      	mov	ip, r5
 800df72:	f04f 0800 	mov.w	r8, #0
 800df76:	f859 4b04 	ldr.w	r4, [r9], #4
 800df7a:	f8dc a000 	ldr.w	sl, [ip]
 800df7e:	b2a3      	uxth	r3, r4
 800df80:	fa1f fa8a 	uxth.w	sl, sl
 800df84:	fb0b a303 	mla	r3, fp, r3, sl
 800df88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800df8c:	f8dc 4000 	ldr.w	r4, [ip]
 800df90:	4443      	add	r3, r8
 800df92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800df96:	fb0b 840a 	mla	r4, fp, sl, r8
 800df9a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800df9e:	46e2      	mov	sl, ip
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dfa6:	454f      	cmp	r7, r9
 800dfa8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dfac:	f84a 3b04 	str.w	r3, [sl], #4
 800dfb0:	d82b      	bhi.n	800e00a <__multiply+0x120>
 800dfb2:	f8cc 8004 	str.w	r8, [ip, #4]
 800dfb6:	9b01      	ldr	r3, [sp, #4]
 800dfb8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dfbc:	3204      	adds	r2, #4
 800dfbe:	f1ba 0f00 	cmp.w	sl, #0
 800dfc2:	d020      	beq.n	800e006 <__multiply+0x11c>
 800dfc4:	682b      	ldr	r3, [r5, #0]
 800dfc6:	4689      	mov	r9, r1
 800dfc8:	46a8      	mov	r8, r5
 800dfca:	f04f 0b00 	mov.w	fp, #0
 800dfce:	f8b9 c000 	ldrh.w	ip, [r9]
 800dfd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dfd6:	fb0a 440c 	mla	r4, sl, ip, r4
 800dfda:	445c      	add	r4, fp
 800dfdc:	46c4      	mov	ip, r8
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dfe4:	f84c 3b04 	str.w	r3, [ip], #4
 800dfe8:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dff0:	0c1b      	lsrs	r3, r3, #16
 800dff2:	fb0a b303 	mla	r3, sl, r3, fp
 800dff6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dffa:	454f      	cmp	r7, r9
 800dffc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e000:	d805      	bhi.n	800e00e <__multiply+0x124>
 800e002:	f8c8 3004 	str.w	r3, [r8, #4]
 800e006:	3504      	adds	r5, #4
 800e008:	e79b      	b.n	800df42 <__multiply+0x58>
 800e00a:	46d4      	mov	ip, sl
 800e00c:	e7b3      	b.n	800df76 <__multiply+0x8c>
 800e00e:	46e0      	mov	r8, ip
 800e010:	e7dd      	b.n	800dfce <__multiply+0xe4>
 800e012:	3e01      	subs	r6, #1
 800e014:	e799      	b.n	800df4a <__multiply+0x60>
	...

0800e018 <__pow5mult>:
 800e018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e01c:	4615      	mov	r5, r2
 800e01e:	f012 0203 	ands.w	r2, r2, #3
 800e022:	4606      	mov	r6, r0
 800e024:	460f      	mov	r7, r1
 800e026:	d007      	beq.n	800e038 <__pow5mult+0x20>
 800e028:	3a01      	subs	r2, #1
 800e02a:	4c21      	ldr	r4, [pc, #132]	; (800e0b0 <__pow5mult+0x98>)
 800e02c:	2300      	movs	r3, #0
 800e02e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e032:	f7ff fec8 	bl	800ddc6 <__multadd>
 800e036:	4607      	mov	r7, r0
 800e038:	10ad      	asrs	r5, r5, #2
 800e03a:	d035      	beq.n	800e0a8 <__pow5mult+0x90>
 800e03c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e03e:	b93c      	cbnz	r4, 800e050 <__pow5mult+0x38>
 800e040:	2010      	movs	r0, #16
 800e042:	f7fe fac9 	bl	800c5d8 <malloc>
 800e046:	6270      	str	r0, [r6, #36]	; 0x24
 800e048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e04c:	6004      	str	r4, [r0, #0]
 800e04e:	60c4      	str	r4, [r0, #12]
 800e050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e058:	b94c      	cbnz	r4, 800e06e <__pow5mult+0x56>
 800e05a:	f240 2171 	movw	r1, #625	; 0x271
 800e05e:	4630      	mov	r0, r6
 800e060:	f7ff ff3a 	bl	800ded8 <__i2b>
 800e064:	2300      	movs	r3, #0
 800e066:	f8c8 0008 	str.w	r0, [r8, #8]
 800e06a:	4604      	mov	r4, r0
 800e06c:	6003      	str	r3, [r0, #0]
 800e06e:	f04f 0800 	mov.w	r8, #0
 800e072:	07eb      	lsls	r3, r5, #31
 800e074:	d50a      	bpl.n	800e08c <__pow5mult+0x74>
 800e076:	4639      	mov	r1, r7
 800e078:	4622      	mov	r2, r4
 800e07a:	4630      	mov	r0, r6
 800e07c:	f7ff ff35 	bl	800deea <__multiply>
 800e080:	4639      	mov	r1, r7
 800e082:	4681      	mov	r9, r0
 800e084:	4630      	mov	r0, r6
 800e086:	f7ff fe87 	bl	800dd98 <_Bfree>
 800e08a:	464f      	mov	r7, r9
 800e08c:	106d      	asrs	r5, r5, #1
 800e08e:	d00b      	beq.n	800e0a8 <__pow5mult+0x90>
 800e090:	6820      	ldr	r0, [r4, #0]
 800e092:	b938      	cbnz	r0, 800e0a4 <__pow5mult+0x8c>
 800e094:	4622      	mov	r2, r4
 800e096:	4621      	mov	r1, r4
 800e098:	4630      	mov	r0, r6
 800e09a:	f7ff ff26 	bl	800deea <__multiply>
 800e09e:	6020      	str	r0, [r4, #0]
 800e0a0:	f8c0 8000 	str.w	r8, [r0]
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	e7e4      	b.n	800e072 <__pow5mult+0x5a>
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0ae:	bf00      	nop
 800e0b0:	0800e8e8 	.word	0x0800e8e8

0800e0b4 <__lshift>:
 800e0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e0be:	6923      	ldr	r3, [r4, #16]
 800e0c0:	6849      	ldr	r1, [r1, #4]
 800e0c2:	eb0a 0903 	add.w	r9, sl, r3
 800e0c6:	68a3      	ldr	r3, [r4, #8]
 800e0c8:	4607      	mov	r7, r0
 800e0ca:	4616      	mov	r6, r2
 800e0cc:	f109 0501 	add.w	r5, r9, #1
 800e0d0:	42ab      	cmp	r3, r5
 800e0d2:	db32      	blt.n	800e13a <__lshift+0x86>
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	f7ff fe2b 	bl	800dd30 <_Balloc>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4680      	mov	r8, r0
 800e0de:	f100 0114 	add.w	r1, r0, #20
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	4553      	cmp	r3, sl
 800e0e6:	db2b      	blt.n	800e140 <__lshift+0x8c>
 800e0e8:	6920      	ldr	r0, [r4, #16]
 800e0ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0ee:	f104 0314 	add.w	r3, r4, #20
 800e0f2:	f016 021f 	ands.w	r2, r6, #31
 800e0f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0fe:	d025      	beq.n	800e14c <__lshift+0x98>
 800e100:	f1c2 0e20 	rsb	lr, r2, #32
 800e104:	2000      	movs	r0, #0
 800e106:	681e      	ldr	r6, [r3, #0]
 800e108:	468a      	mov	sl, r1
 800e10a:	4096      	lsls	r6, r2
 800e10c:	4330      	orrs	r0, r6
 800e10e:	f84a 0b04 	str.w	r0, [sl], #4
 800e112:	f853 0b04 	ldr.w	r0, [r3], #4
 800e116:	459c      	cmp	ip, r3
 800e118:	fa20 f00e 	lsr.w	r0, r0, lr
 800e11c:	d814      	bhi.n	800e148 <__lshift+0x94>
 800e11e:	6048      	str	r0, [r1, #4]
 800e120:	b108      	cbz	r0, 800e126 <__lshift+0x72>
 800e122:	f109 0502 	add.w	r5, r9, #2
 800e126:	3d01      	subs	r5, #1
 800e128:	4638      	mov	r0, r7
 800e12a:	f8c8 5010 	str.w	r5, [r8, #16]
 800e12e:	4621      	mov	r1, r4
 800e130:	f7ff fe32 	bl	800dd98 <_Bfree>
 800e134:	4640      	mov	r0, r8
 800e136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e13a:	3101      	adds	r1, #1
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	e7c7      	b.n	800e0d0 <__lshift+0x1c>
 800e140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e144:	3301      	adds	r3, #1
 800e146:	e7cd      	b.n	800e0e4 <__lshift+0x30>
 800e148:	4651      	mov	r1, sl
 800e14a:	e7dc      	b.n	800e106 <__lshift+0x52>
 800e14c:	3904      	subs	r1, #4
 800e14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e152:	f841 2f04 	str.w	r2, [r1, #4]!
 800e156:	459c      	cmp	ip, r3
 800e158:	d8f9      	bhi.n	800e14e <__lshift+0x9a>
 800e15a:	e7e4      	b.n	800e126 <__lshift+0x72>

0800e15c <__mcmp>:
 800e15c:	6903      	ldr	r3, [r0, #16]
 800e15e:	690a      	ldr	r2, [r1, #16]
 800e160:	1a9b      	subs	r3, r3, r2
 800e162:	b530      	push	{r4, r5, lr}
 800e164:	d10c      	bne.n	800e180 <__mcmp+0x24>
 800e166:	0092      	lsls	r2, r2, #2
 800e168:	3014      	adds	r0, #20
 800e16a:	3114      	adds	r1, #20
 800e16c:	1884      	adds	r4, r0, r2
 800e16e:	4411      	add	r1, r2
 800e170:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e174:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e178:	4295      	cmp	r5, r2
 800e17a:	d003      	beq.n	800e184 <__mcmp+0x28>
 800e17c:	d305      	bcc.n	800e18a <__mcmp+0x2e>
 800e17e:	2301      	movs	r3, #1
 800e180:	4618      	mov	r0, r3
 800e182:	bd30      	pop	{r4, r5, pc}
 800e184:	42a0      	cmp	r0, r4
 800e186:	d3f3      	bcc.n	800e170 <__mcmp+0x14>
 800e188:	e7fa      	b.n	800e180 <__mcmp+0x24>
 800e18a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e18e:	e7f7      	b.n	800e180 <__mcmp+0x24>

0800e190 <__mdiff>:
 800e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	460d      	mov	r5, r1
 800e196:	4607      	mov	r7, r0
 800e198:	4611      	mov	r1, r2
 800e19a:	4628      	mov	r0, r5
 800e19c:	4614      	mov	r4, r2
 800e19e:	f7ff ffdd 	bl	800e15c <__mcmp>
 800e1a2:	1e06      	subs	r6, r0, #0
 800e1a4:	d108      	bne.n	800e1b8 <__mdiff+0x28>
 800e1a6:	4631      	mov	r1, r6
 800e1a8:	4638      	mov	r0, r7
 800e1aa:	f7ff fdc1 	bl	800dd30 <_Balloc>
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b8:	bfa4      	itt	ge
 800e1ba:	4623      	movge	r3, r4
 800e1bc:	462c      	movge	r4, r5
 800e1be:	4638      	mov	r0, r7
 800e1c0:	6861      	ldr	r1, [r4, #4]
 800e1c2:	bfa6      	itte	ge
 800e1c4:	461d      	movge	r5, r3
 800e1c6:	2600      	movge	r6, #0
 800e1c8:	2601      	movlt	r6, #1
 800e1ca:	f7ff fdb1 	bl	800dd30 <_Balloc>
 800e1ce:	692b      	ldr	r3, [r5, #16]
 800e1d0:	60c6      	str	r6, [r0, #12]
 800e1d2:	6926      	ldr	r6, [r4, #16]
 800e1d4:	f105 0914 	add.w	r9, r5, #20
 800e1d8:	f104 0214 	add.w	r2, r4, #20
 800e1dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e1e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e1e4:	f100 0514 	add.w	r5, r0, #20
 800e1e8:	f04f 0e00 	mov.w	lr, #0
 800e1ec:	f852 ab04 	ldr.w	sl, [r2], #4
 800e1f0:	f859 4b04 	ldr.w	r4, [r9], #4
 800e1f4:	fa1e f18a 	uxtah	r1, lr, sl
 800e1f8:	b2a3      	uxth	r3, r4
 800e1fa:	1ac9      	subs	r1, r1, r3
 800e1fc:	0c23      	lsrs	r3, r4, #16
 800e1fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e202:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e206:	b289      	uxth	r1, r1
 800e208:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e20c:	45c8      	cmp	r8, r9
 800e20e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e212:	4694      	mov	ip, r2
 800e214:	f845 3b04 	str.w	r3, [r5], #4
 800e218:	d8e8      	bhi.n	800e1ec <__mdiff+0x5c>
 800e21a:	45bc      	cmp	ip, r7
 800e21c:	d304      	bcc.n	800e228 <__mdiff+0x98>
 800e21e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e222:	b183      	cbz	r3, 800e246 <__mdiff+0xb6>
 800e224:	6106      	str	r6, [r0, #16]
 800e226:	e7c5      	b.n	800e1b4 <__mdiff+0x24>
 800e228:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e22c:	fa1e f381 	uxtah	r3, lr, r1
 800e230:	141a      	asrs	r2, r3, #16
 800e232:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e236:	b29b      	uxth	r3, r3
 800e238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e23c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e240:	f845 3b04 	str.w	r3, [r5], #4
 800e244:	e7e9      	b.n	800e21a <__mdiff+0x8a>
 800e246:	3e01      	subs	r6, #1
 800e248:	e7e9      	b.n	800e21e <__mdiff+0x8e>

0800e24a <__d2b>:
 800e24a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e24e:	460e      	mov	r6, r1
 800e250:	2101      	movs	r1, #1
 800e252:	ec59 8b10 	vmov	r8, r9, d0
 800e256:	4615      	mov	r5, r2
 800e258:	f7ff fd6a 	bl	800dd30 <_Balloc>
 800e25c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e260:	4607      	mov	r7, r0
 800e262:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e266:	bb34      	cbnz	r4, 800e2b6 <__d2b+0x6c>
 800e268:	9301      	str	r3, [sp, #4]
 800e26a:	f1b8 0300 	subs.w	r3, r8, #0
 800e26e:	d027      	beq.n	800e2c0 <__d2b+0x76>
 800e270:	a802      	add	r0, sp, #8
 800e272:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e276:	f7ff fe00 	bl	800de7a <__lo0bits>
 800e27a:	9900      	ldr	r1, [sp, #0]
 800e27c:	b1f0      	cbz	r0, 800e2bc <__d2b+0x72>
 800e27e:	9a01      	ldr	r2, [sp, #4]
 800e280:	f1c0 0320 	rsb	r3, r0, #32
 800e284:	fa02 f303 	lsl.w	r3, r2, r3
 800e288:	430b      	orrs	r3, r1
 800e28a:	40c2      	lsrs	r2, r0
 800e28c:	617b      	str	r3, [r7, #20]
 800e28e:	9201      	str	r2, [sp, #4]
 800e290:	9b01      	ldr	r3, [sp, #4]
 800e292:	61bb      	str	r3, [r7, #24]
 800e294:	2b00      	cmp	r3, #0
 800e296:	bf14      	ite	ne
 800e298:	2102      	movne	r1, #2
 800e29a:	2101      	moveq	r1, #1
 800e29c:	6139      	str	r1, [r7, #16]
 800e29e:	b1c4      	cbz	r4, 800e2d2 <__d2b+0x88>
 800e2a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e2a4:	4404      	add	r4, r0
 800e2a6:	6034      	str	r4, [r6, #0]
 800e2a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e2ac:	6028      	str	r0, [r5, #0]
 800e2ae:	4638      	mov	r0, r7
 800e2b0:	b003      	add	sp, #12
 800e2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2ba:	e7d5      	b.n	800e268 <__d2b+0x1e>
 800e2bc:	6179      	str	r1, [r7, #20]
 800e2be:	e7e7      	b.n	800e290 <__d2b+0x46>
 800e2c0:	a801      	add	r0, sp, #4
 800e2c2:	f7ff fdda 	bl	800de7a <__lo0bits>
 800e2c6:	9b01      	ldr	r3, [sp, #4]
 800e2c8:	617b      	str	r3, [r7, #20]
 800e2ca:	2101      	movs	r1, #1
 800e2cc:	6139      	str	r1, [r7, #16]
 800e2ce:	3020      	adds	r0, #32
 800e2d0:	e7e5      	b.n	800e29e <__d2b+0x54>
 800e2d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e2d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2da:	6030      	str	r0, [r6, #0]
 800e2dc:	6918      	ldr	r0, [r3, #16]
 800e2de:	f7ff fdad 	bl	800de3c <__hi0bits>
 800e2e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e2e6:	e7e1      	b.n	800e2ac <__d2b+0x62>

0800e2e8 <_calloc_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	fb02 f401 	mul.w	r4, r2, r1
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	f7fe f9e4 	bl	800c6bc <_malloc_r>
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	b118      	cbz	r0, 800e300 <_calloc_r+0x18>
 800e2f8:	4622      	mov	r2, r4
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	f7fe f987 	bl	800c60e <memset>
 800e300:	4628      	mov	r0, r5
 800e302:	bd38      	pop	{r3, r4, r5, pc}

0800e304 <__ssputs_r>:
 800e304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e308:	688e      	ldr	r6, [r1, #8]
 800e30a:	429e      	cmp	r6, r3
 800e30c:	4682      	mov	sl, r0
 800e30e:	460c      	mov	r4, r1
 800e310:	4690      	mov	r8, r2
 800e312:	4699      	mov	r9, r3
 800e314:	d837      	bhi.n	800e386 <__ssputs_r+0x82>
 800e316:	898a      	ldrh	r2, [r1, #12]
 800e318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e31c:	d031      	beq.n	800e382 <__ssputs_r+0x7e>
 800e31e:	6825      	ldr	r5, [r4, #0]
 800e320:	6909      	ldr	r1, [r1, #16]
 800e322:	1a6f      	subs	r7, r5, r1
 800e324:	6965      	ldr	r5, [r4, #20]
 800e326:	2302      	movs	r3, #2
 800e328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e32c:	fb95 f5f3 	sdiv	r5, r5, r3
 800e330:	f109 0301 	add.w	r3, r9, #1
 800e334:	443b      	add	r3, r7
 800e336:	429d      	cmp	r5, r3
 800e338:	bf38      	it	cc
 800e33a:	461d      	movcc	r5, r3
 800e33c:	0553      	lsls	r3, r2, #21
 800e33e:	d530      	bpl.n	800e3a2 <__ssputs_r+0x9e>
 800e340:	4629      	mov	r1, r5
 800e342:	f7fe f9bb 	bl	800c6bc <_malloc_r>
 800e346:	4606      	mov	r6, r0
 800e348:	b950      	cbnz	r0, 800e360 <__ssputs_r+0x5c>
 800e34a:	230c      	movs	r3, #12
 800e34c:	f8ca 3000 	str.w	r3, [sl]
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e356:	81a3      	strh	r3, [r4, #12]
 800e358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e360:	463a      	mov	r2, r7
 800e362:	6921      	ldr	r1, [r4, #16]
 800e364:	f7fe f948 	bl	800c5f8 <memcpy>
 800e368:	89a3      	ldrh	r3, [r4, #12]
 800e36a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e36e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e372:	81a3      	strh	r3, [r4, #12]
 800e374:	6126      	str	r6, [r4, #16]
 800e376:	6165      	str	r5, [r4, #20]
 800e378:	443e      	add	r6, r7
 800e37a:	1bed      	subs	r5, r5, r7
 800e37c:	6026      	str	r6, [r4, #0]
 800e37e:	60a5      	str	r5, [r4, #8]
 800e380:	464e      	mov	r6, r9
 800e382:	454e      	cmp	r6, r9
 800e384:	d900      	bls.n	800e388 <__ssputs_r+0x84>
 800e386:	464e      	mov	r6, r9
 800e388:	4632      	mov	r2, r6
 800e38a:	4641      	mov	r1, r8
 800e38c:	6820      	ldr	r0, [r4, #0]
 800e38e:	f000 f91d 	bl	800e5cc <memmove>
 800e392:	68a3      	ldr	r3, [r4, #8]
 800e394:	1b9b      	subs	r3, r3, r6
 800e396:	60a3      	str	r3, [r4, #8]
 800e398:	6823      	ldr	r3, [r4, #0]
 800e39a:	441e      	add	r6, r3
 800e39c:	6026      	str	r6, [r4, #0]
 800e39e:	2000      	movs	r0, #0
 800e3a0:	e7dc      	b.n	800e35c <__ssputs_r+0x58>
 800e3a2:	462a      	mov	r2, r5
 800e3a4:	f000 f92b 	bl	800e5fe <_realloc_r>
 800e3a8:	4606      	mov	r6, r0
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d1e2      	bne.n	800e374 <__ssputs_r+0x70>
 800e3ae:	6921      	ldr	r1, [r4, #16]
 800e3b0:	4650      	mov	r0, sl
 800e3b2:	f7fe f935 	bl	800c620 <_free_r>
 800e3b6:	e7c8      	b.n	800e34a <__ssputs_r+0x46>

0800e3b8 <_svfiprintf_r>:
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	461d      	mov	r5, r3
 800e3be:	898b      	ldrh	r3, [r1, #12]
 800e3c0:	061f      	lsls	r7, r3, #24
 800e3c2:	b09d      	sub	sp, #116	; 0x74
 800e3c4:	4680      	mov	r8, r0
 800e3c6:	460c      	mov	r4, r1
 800e3c8:	4616      	mov	r6, r2
 800e3ca:	d50f      	bpl.n	800e3ec <_svfiprintf_r+0x34>
 800e3cc:	690b      	ldr	r3, [r1, #16]
 800e3ce:	b96b      	cbnz	r3, 800e3ec <_svfiprintf_r+0x34>
 800e3d0:	2140      	movs	r1, #64	; 0x40
 800e3d2:	f7fe f973 	bl	800c6bc <_malloc_r>
 800e3d6:	6020      	str	r0, [r4, #0]
 800e3d8:	6120      	str	r0, [r4, #16]
 800e3da:	b928      	cbnz	r0, 800e3e8 <_svfiprintf_r+0x30>
 800e3dc:	230c      	movs	r3, #12
 800e3de:	f8c8 3000 	str.w	r3, [r8]
 800e3e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3e6:	e0c8      	b.n	800e57a <_svfiprintf_r+0x1c2>
 800e3e8:	2340      	movs	r3, #64	; 0x40
 800e3ea:	6163      	str	r3, [r4, #20]
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f0:	2320      	movs	r3, #32
 800e3f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3f6:	2330      	movs	r3, #48	; 0x30
 800e3f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3fc:	9503      	str	r5, [sp, #12]
 800e3fe:	f04f 0b01 	mov.w	fp, #1
 800e402:	4637      	mov	r7, r6
 800e404:	463d      	mov	r5, r7
 800e406:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e40a:	b10b      	cbz	r3, 800e410 <_svfiprintf_r+0x58>
 800e40c:	2b25      	cmp	r3, #37	; 0x25
 800e40e:	d13e      	bne.n	800e48e <_svfiprintf_r+0xd6>
 800e410:	ebb7 0a06 	subs.w	sl, r7, r6
 800e414:	d00b      	beq.n	800e42e <_svfiprintf_r+0x76>
 800e416:	4653      	mov	r3, sl
 800e418:	4632      	mov	r2, r6
 800e41a:	4621      	mov	r1, r4
 800e41c:	4640      	mov	r0, r8
 800e41e:	f7ff ff71 	bl	800e304 <__ssputs_r>
 800e422:	3001      	adds	r0, #1
 800e424:	f000 80a4 	beq.w	800e570 <_svfiprintf_r+0x1b8>
 800e428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e42a:	4453      	add	r3, sl
 800e42c:	9309      	str	r3, [sp, #36]	; 0x24
 800e42e:	783b      	ldrb	r3, [r7, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	f000 809d 	beq.w	800e570 <_svfiprintf_r+0x1b8>
 800e436:	2300      	movs	r3, #0
 800e438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e440:	9304      	str	r3, [sp, #16]
 800e442:	9307      	str	r3, [sp, #28]
 800e444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e448:	931a      	str	r3, [sp, #104]	; 0x68
 800e44a:	462f      	mov	r7, r5
 800e44c:	2205      	movs	r2, #5
 800e44e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e452:	4850      	ldr	r0, [pc, #320]	; (800e594 <_svfiprintf_r+0x1dc>)
 800e454:	f7f1 fecc 	bl	80001f0 <memchr>
 800e458:	9b04      	ldr	r3, [sp, #16]
 800e45a:	b9d0      	cbnz	r0, 800e492 <_svfiprintf_r+0xda>
 800e45c:	06d9      	lsls	r1, r3, #27
 800e45e:	bf44      	itt	mi
 800e460:	2220      	movmi	r2, #32
 800e462:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e466:	071a      	lsls	r2, r3, #28
 800e468:	bf44      	itt	mi
 800e46a:	222b      	movmi	r2, #43	; 0x2b
 800e46c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e470:	782a      	ldrb	r2, [r5, #0]
 800e472:	2a2a      	cmp	r2, #42	; 0x2a
 800e474:	d015      	beq.n	800e4a2 <_svfiprintf_r+0xea>
 800e476:	9a07      	ldr	r2, [sp, #28]
 800e478:	462f      	mov	r7, r5
 800e47a:	2000      	movs	r0, #0
 800e47c:	250a      	movs	r5, #10
 800e47e:	4639      	mov	r1, r7
 800e480:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e484:	3b30      	subs	r3, #48	; 0x30
 800e486:	2b09      	cmp	r3, #9
 800e488:	d94d      	bls.n	800e526 <_svfiprintf_r+0x16e>
 800e48a:	b1b8      	cbz	r0, 800e4bc <_svfiprintf_r+0x104>
 800e48c:	e00f      	b.n	800e4ae <_svfiprintf_r+0xf6>
 800e48e:	462f      	mov	r7, r5
 800e490:	e7b8      	b.n	800e404 <_svfiprintf_r+0x4c>
 800e492:	4a40      	ldr	r2, [pc, #256]	; (800e594 <_svfiprintf_r+0x1dc>)
 800e494:	1a80      	subs	r0, r0, r2
 800e496:	fa0b f000 	lsl.w	r0, fp, r0
 800e49a:	4318      	orrs	r0, r3
 800e49c:	9004      	str	r0, [sp, #16]
 800e49e:	463d      	mov	r5, r7
 800e4a0:	e7d3      	b.n	800e44a <_svfiprintf_r+0x92>
 800e4a2:	9a03      	ldr	r2, [sp, #12]
 800e4a4:	1d11      	adds	r1, r2, #4
 800e4a6:	6812      	ldr	r2, [r2, #0]
 800e4a8:	9103      	str	r1, [sp, #12]
 800e4aa:	2a00      	cmp	r2, #0
 800e4ac:	db01      	blt.n	800e4b2 <_svfiprintf_r+0xfa>
 800e4ae:	9207      	str	r2, [sp, #28]
 800e4b0:	e004      	b.n	800e4bc <_svfiprintf_r+0x104>
 800e4b2:	4252      	negs	r2, r2
 800e4b4:	f043 0302 	orr.w	r3, r3, #2
 800e4b8:	9207      	str	r2, [sp, #28]
 800e4ba:	9304      	str	r3, [sp, #16]
 800e4bc:	783b      	ldrb	r3, [r7, #0]
 800e4be:	2b2e      	cmp	r3, #46	; 0x2e
 800e4c0:	d10c      	bne.n	800e4dc <_svfiprintf_r+0x124>
 800e4c2:	787b      	ldrb	r3, [r7, #1]
 800e4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4c6:	d133      	bne.n	800e530 <_svfiprintf_r+0x178>
 800e4c8:	9b03      	ldr	r3, [sp, #12]
 800e4ca:	1d1a      	adds	r2, r3, #4
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	9203      	str	r2, [sp, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	bfb8      	it	lt
 800e4d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e4d8:	3702      	adds	r7, #2
 800e4da:	9305      	str	r3, [sp, #20]
 800e4dc:	4d2e      	ldr	r5, [pc, #184]	; (800e598 <_svfiprintf_r+0x1e0>)
 800e4de:	7839      	ldrb	r1, [r7, #0]
 800e4e0:	2203      	movs	r2, #3
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f7f1 fe84 	bl	80001f0 <memchr>
 800e4e8:	b138      	cbz	r0, 800e4fa <_svfiprintf_r+0x142>
 800e4ea:	2340      	movs	r3, #64	; 0x40
 800e4ec:	1b40      	subs	r0, r0, r5
 800e4ee:	fa03 f000 	lsl.w	r0, r3, r0
 800e4f2:	9b04      	ldr	r3, [sp, #16]
 800e4f4:	4303      	orrs	r3, r0
 800e4f6:	3701      	adds	r7, #1
 800e4f8:	9304      	str	r3, [sp, #16]
 800e4fa:	7839      	ldrb	r1, [r7, #0]
 800e4fc:	4827      	ldr	r0, [pc, #156]	; (800e59c <_svfiprintf_r+0x1e4>)
 800e4fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e502:	2206      	movs	r2, #6
 800e504:	1c7e      	adds	r6, r7, #1
 800e506:	f7f1 fe73 	bl	80001f0 <memchr>
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d038      	beq.n	800e580 <_svfiprintf_r+0x1c8>
 800e50e:	4b24      	ldr	r3, [pc, #144]	; (800e5a0 <_svfiprintf_r+0x1e8>)
 800e510:	bb13      	cbnz	r3, 800e558 <_svfiprintf_r+0x1a0>
 800e512:	9b03      	ldr	r3, [sp, #12]
 800e514:	3307      	adds	r3, #7
 800e516:	f023 0307 	bic.w	r3, r3, #7
 800e51a:	3308      	adds	r3, #8
 800e51c:	9303      	str	r3, [sp, #12]
 800e51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e520:	444b      	add	r3, r9
 800e522:	9309      	str	r3, [sp, #36]	; 0x24
 800e524:	e76d      	b.n	800e402 <_svfiprintf_r+0x4a>
 800e526:	fb05 3202 	mla	r2, r5, r2, r3
 800e52a:	2001      	movs	r0, #1
 800e52c:	460f      	mov	r7, r1
 800e52e:	e7a6      	b.n	800e47e <_svfiprintf_r+0xc6>
 800e530:	2300      	movs	r3, #0
 800e532:	3701      	adds	r7, #1
 800e534:	9305      	str	r3, [sp, #20]
 800e536:	4619      	mov	r1, r3
 800e538:	250a      	movs	r5, #10
 800e53a:	4638      	mov	r0, r7
 800e53c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e540:	3a30      	subs	r2, #48	; 0x30
 800e542:	2a09      	cmp	r2, #9
 800e544:	d903      	bls.n	800e54e <_svfiprintf_r+0x196>
 800e546:	2b00      	cmp	r3, #0
 800e548:	d0c8      	beq.n	800e4dc <_svfiprintf_r+0x124>
 800e54a:	9105      	str	r1, [sp, #20]
 800e54c:	e7c6      	b.n	800e4dc <_svfiprintf_r+0x124>
 800e54e:	fb05 2101 	mla	r1, r5, r1, r2
 800e552:	2301      	movs	r3, #1
 800e554:	4607      	mov	r7, r0
 800e556:	e7f0      	b.n	800e53a <_svfiprintf_r+0x182>
 800e558:	ab03      	add	r3, sp, #12
 800e55a:	9300      	str	r3, [sp, #0]
 800e55c:	4622      	mov	r2, r4
 800e55e:	4b11      	ldr	r3, [pc, #68]	; (800e5a4 <_svfiprintf_r+0x1ec>)
 800e560:	a904      	add	r1, sp, #16
 800e562:	4640      	mov	r0, r8
 800e564:	f7fe f998 	bl	800c898 <_printf_float>
 800e568:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e56c:	4681      	mov	r9, r0
 800e56e:	d1d6      	bne.n	800e51e <_svfiprintf_r+0x166>
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	065b      	lsls	r3, r3, #25
 800e574:	f53f af35 	bmi.w	800e3e2 <_svfiprintf_r+0x2a>
 800e578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e57a:	b01d      	add	sp, #116	; 0x74
 800e57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e580:	ab03      	add	r3, sp, #12
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	4622      	mov	r2, r4
 800e586:	4b07      	ldr	r3, [pc, #28]	; (800e5a4 <_svfiprintf_r+0x1ec>)
 800e588:	a904      	add	r1, sp, #16
 800e58a:	4640      	mov	r0, r8
 800e58c:	f7fe fc3a 	bl	800ce04 <_printf_i>
 800e590:	e7ea      	b.n	800e568 <_svfiprintf_r+0x1b0>
 800e592:	bf00      	nop
 800e594:	0800e8f4 	.word	0x0800e8f4
 800e598:	0800e8fa 	.word	0x0800e8fa
 800e59c:	0800e8fe 	.word	0x0800e8fe
 800e5a0:	0800c899 	.word	0x0800c899
 800e5a4:	0800e305 	.word	0x0800e305

0800e5a8 <__ascii_mbtowc>:
 800e5a8:	b082      	sub	sp, #8
 800e5aa:	b901      	cbnz	r1, 800e5ae <__ascii_mbtowc+0x6>
 800e5ac:	a901      	add	r1, sp, #4
 800e5ae:	b142      	cbz	r2, 800e5c2 <__ascii_mbtowc+0x1a>
 800e5b0:	b14b      	cbz	r3, 800e5c6 <__ascii_mbtowc+0x1e>
 800e5b2:	7813      	ldrb	r3, [r2, #0]
 800e5b4:	600b      	str	r3, [r1, #0]
 800e5b6:	7812      	ldrb	r2, [r2, #0]
 800e5b8:	1c10      	adds	r0, r2, #0
 800e5ba:	bf18      	it	ne
 800e5bc:	2001      	movne	r0, #1
 800e5be:	b002      	add	sp, #8
 800e5c0:	4770      	bx	lr
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	e7fb      	b.n	800e5be <__ascii_mbtowc+0x16>
 800e5c6:	f06f 0001 	mvn.w	r0, #1
 800e5ca:	e7f8      	b.n	800e5be <__ascii_mbtowc+0x16>

0800e5cc <memmove>:
 800e5cc:	4288      	cmp	r0, r1
 800e5ce:	b510      	push	{r4, lr}
 800e5d0:	eb01 0302 	add.w	r3, r1, r2
 800e5d4:	d807      	bhi.n	800e5e6 <memmove+0x1a>
 800e5d6:	1e42      	subs	r2, r0, #1
 800e5d8:	4299      	cmp	r1, r3
 800e5da:	d00a      	beq.n	800e5f2 <memmove+0x26>
 800e5dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e5e4:	e7f8      	b.n	800e5d8 <memmove+0xc>
 800e5e6:	4283      	cmp	r3, r0
 800e5e8:	d9f5      	bls.n	800e5d6 <memmove+0xa>
 800e5ea:	1881      	adds	r1, r0, r2
 800e5ec:	1ad2      	subs	r2, r2, r3
 800e5ee:	42d3      	cmn	r3, r2
 800e5f0:	d100      	bne.n	800e5f4 <memmove+0x28>
 800e5f2:	bd10      	pop	{r4, pc}
 800e5f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e5fc:	e7f7      	b.n	800e5ee <memmove+0x22>

0800e5fe <_realloc_r>:
 800e5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e600:	4607      	mov	r7, r0
 800e602:	4614      	mov	r4, r2
 800e604:	460e      	mov	r6, r1
 800e606:	b921      	cbnz	r1, 800e612 <_realloc_r+0x14>
 800e608:	4611      	mov	r1, r2
 800e60a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e60e:	f7fe b855 	b.w	800c6bc <_malloc_r>
 800e612:	b922      	cbnz	r2, 800e61e <_realloc_r+0x20>
 800e614:	f7fe f804 	bl	800c620 <_free_r>
 800e618:	4625      	mov	r5, r4
 800e61a:	4628      	mov	r0, r5
 800e61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e61e:	f000 f821 	bl	800e664 <_malloc_usable_size_r>
 800e622:	42a0      	cmp	r0, r4
 800e624:	d20f      	bcs.n	800e646 <_realloc_r+0x48>
 800e626:	4621      	mov	r1, r4
 800e628:	4638      	mov	r0, r7
 800e62a:	f7fe f847 	bl	800c6bc <_malloc_r>
 800e62e:	4605      	mov	r5, r0
 800e630:	2800      	cmp	r0, #0
 800e632:	d0f2      	beq.n	800e61a <_realloc_r+0x1c>
 800e634:	4631      	mov	r1, r6
 800e636:	4622      	mov	r2, r4
 800e638:	f7fd ffde 	bl	800c5f8 <memcpy>
 800e63c:	4631      	mov	r1, r6
 800e63e:	4638      	mov	r0, r7
 800e640:	f7fd ffee 	bl	800c620 <_free_r>
 800e644:	e7e9      	b.n	800e61a <_realloc_r+0x1c>
 800e646:	4635      	mov	r5, r6
 800e648:	e7e7      	b.n	800e61a <_realloc_r+0x1c>

0800e64a <__ascii_wctomb>:
 800e64a:	b149      	cbz	r1, 800e660 <__ascii_wctomb+0x16>
 800e64c:	2aff      	cmp	r2, #255	; 0xff
 800e64e:	bf85      	ittet	hi
 800e650:	238a      	movhi	r3, #138	; 0x8a
 800e652:	6003      	strhi	r3, [r0, #0]
 800e654:	700a      	strbls	r2, [r1, #0]
 800e656:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e65a:	bf98      	it	ls
 800e65c:	2001      	movls	r0, #1
 800e65e:	4770      	bx	lr
 800e660:	4608      	mov	r0, r1
 800e662:	4770      	bx	lr

0800e664 <_malloc_usable_size_r>:
 800e664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e668:	1f18      	subs	r0, r3, #4
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	bfbc      	itt	lt
 800e66e:	580b      	ldrlt	r3, [r1, r0]
 800e670:	18c0      	addlt	r0, r0, r3
 800e672:	4770      	bx	lr

0800e674 <_init>:
 800e674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e676:	bf00      	nop
 800e678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e67a:	bc08      	pop	{r3}
 800e67c:	469e      	mov	lr, r3
 800e67e:	4770      	bx	lr

0800e680 <_fini>:
 800e680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e682:	bf00      	nop
 800e684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e686:	bc08      	pop	{r3}
 800e688:	469e      	mov	lr, r3
 800e68a:	4770      	bx	lr
